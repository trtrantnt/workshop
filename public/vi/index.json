[
{
	"uri": "//localhost:62814/vi/1-gioi-thieu/",
	"title": "1. Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Workshop Workshop này sẽ hướng dẫn bạn triển khai một hệ thống Identity Governance toàn diện với Access Certification trên AWS, bao gồm:\nAccess Governance: Quản lý và kiểm soát quyền truy cập Certification Automation: Tự động hóa quy trình xác nhận quyền Privilege Analytics: Phân tích và giám sát đặc quyền Risk Assessment: Đánh giá rủi ro bảo mật Monitoring Setup: Thiết lập giám sát liên tục Operational Procedures: Quy trình vận hành Audit Procedures: Quy trình kiểm toán Compliance Validation: Xác thực tuân thủ Kiến trúc Tổng thể AWS Services Sử dụng (Kiến trúc Tối giản) AWS IAM Identity Center - Quản lý truy cập tập trung AWS IAM - Quản lý danh tính và truy cập AWS Lambda - Hàm tự động hóa và xử lý Amazon EventBridge - Điều phối sự kiện Amazon DynamoDB - Lưu trữ dữ liệu certification Amazon S3 - Lưu trữ log và data lake AWS CloudTrail - Ghi log kiểm toán Amazon CloudWatch - Giám sát và metrics Amazon SNS - Thông báo và cảnh báo Amazon QuickSight - Dashboard phân tích AWS Security Hub - Đánh giá rủi ro và tuân thủ Lợi ích của Identity Governance 1. Bảo mật nâng cao Kiểm soát quyền truy cập chặt chẽ Phát hiện và ngăn chặn rủi ro bảo mật Giám sát liên tục các hoạt động 2. Tuân thủ quy định Đáp ứng các yêu cầu SOX, SOC2, ISO27001 Tự động hóa quy trình audit Lưu trữ bằng chứng tuân thủ 3. Hiệu quả vận hành Tự động hóa quy trình certification Giảm thiểu công việc thủ công Cải thiện quy trình quản lý Tiếp theo Chuyển sang 2. Các bước chuẩn bị để bắt đầu thiết lập môi trường.\n"
},
{
	"uri": "//localhost:62814/vi/",
	"title": "Quản trị Danh tính với Chứng nhận Truy cập",
	"tags": [],
	"description": "",
	"content": "Workshop Quản trị Danh tính với Chứng nhận Truy cập Tổng quan Workshop Workshop toàn diện này hướng dẫn bạn triển khai Quản trị Danh tính với Chứng nhận Truy cập trên AWS, bao gồm các thực hành bảo mật nâng cao và yêu cầu tuân thủ.\nCác Module Workshop 1. Giới thiệu\r2. Các bước chuẩn bị\r3. Thiết lập Access Governance\r4. Tự động hóa Certification\r5. Phân tích Đặc quyền\r6. Đánh giá Rủi ro\r7. Thiết lập Giám sát\r8. Quy trình Vận hành\r9. Quy trình Kiểm toán\r10. Xác thực Tuân thủ\r11. Dọn dẹp Tài nguyên\rTổng quan Kiến trúc Lợi ích Chính Bảo mật Nâng cao: Kiểm soát truy cập nghiêm ngặt và giám sát liên tục Tuân thủ Quy định: Đáp ứng yêu cầu SOX, SOC2, ISO27001 Hiệu quả Vận hành: Quy trình chứng nhận và khắc phục tự động Quản lý Rủi ro: Đánh giá và giảm thiểu rủi ro chủ động Yêu cầu Tiên quyết Tài khoản AWS với quyền Administrator Hiểu biết cơ bản về AWS IAM và Organizations Kiến thức về các framework tuân thủ Kinh nghiệm với Python và AWS CLI "
},
{
	"uri": "//localhost:62814/vi/2-cac-buoc-chuan-bi/",
	"title": "2. Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Thiết lập môi trường 1. Tạo S3 Bucket cho lưu trữ dữ liệu Điều hướng đến dịch vụ Amazon S3 trong AWS Console Click Create bucket Tạo bucket đầu tiên cho dữ liệu phân tích: Bucket name: identity-governance-analytics AWS Region: Chọn region ưa thích (ví dụ: us-east-1) Object Ownership: ACLs disabled (khuyến nghị) Block Public Access settings: Giữ tất cả đều bị chặn (khuyến nghị) Bucket Versioning: Kích hoạt Default encryption: Server-side encryption với Amazon S3 managed keys (SSE-S3) Bucket Key: Kích hoạt Click Create bucket Tạo bucket thứ hai cho báo cáo tuân thủ: Bucket name: identity-governance-reports AWS Region: Giống bucket đầu tiên Object Ownership: ACLs disabled (khuyến nghị) Block Public Access settings: Giữ tất cả đều bị chặn (khuyến nghị) Bucket Versioning: Kích hoạt Default encryption: Server-side encryption với Amazon S3 managed keys (SSE-S3) Bucket Key: Kích hoạt Object Lock: Kích hoạt cho compliance retention Click Create bucket Xác minh cả hai bucket đã được tạo thành công: Chuẩn bị Infrastructure 1. Kích hoạt AWS CloudTrail Điều hướng đến dịch vụ CloudTrail trong AWS Console Click Create trail Bước 1: General details Nhập thông tin cơ bản: Trail name: IdentityGovernanceTrail Enable for all accounts in my organization: Để trống (unchecked) Bước 2: S3 bucket configuration Cấu hình S3 storage:\nCreate new S3 bucket: Chọn option này (ĐỂ TRỐNG - KHÔNG chọn \u0026ldquo;Use existing S3 bucket\u0026rdquo;) S3 bucket name: CloudTrail sẽ tự động tạo tên (ví dụ: aws-cloudtrail-logs-123456789012-abc12345) Cấu hình bảo mật:\nLog file SSE-KMS encryption: Unchecked (giữ mặc định) Log file validation: Checked (khuyến nghị) Bước 3: CloudWatch Logs (Optional) CloudWatch Logs configuration:\nCloudWatch Logs: Unchecked (bỏ qua cho bây giờ) Click Next\nBước 4: Choose log events Chọn loại events để log: Management events: Checked Read: Checked Write: Checked Data events: Unchecked (bỏ qua) Insight events: Unchecked (bỏ qua) Click Next Bước 5: Review and create Kiểm tra lại cấu hình: Xác nhận trail name Xác nhận S3 bucket sẽ được tạo mới Xác nhận management events được bật Click Create trail QUAN TRỌNG: KHÔNG BAO GIỜ chọn bucket identity-governance-analytics hoặc bất kỳ bucket nào bạn đã tạo trước đó BẮT BUỘC chọn \u0026ldquo;Create new S3 bucket\u0026rdquo; để CloudTrail tự tạo bucket riêng CloudTrail sẽ tự động cấu hình bucket policy đúng, tránh lỗi InsufficientS3BucketPolicyException 2. Kích hoạt AWS Security Hub Điều hướng đến dịch vụ AWS Security Hub trong AWS Console Bạn sẽ thấy trang Security Hub Onboard Bước 1: Configure Security Hub Trong phần Configure Security Hub: Đọc thông tin về Service Linked Roles (SLRs) Để mặc định các cài đặt Bước 2: Delegated Administrator Account Trong phần Delegated administrator account: Chọn Do not select an account (cho single account setup) Bước 3: Account Enablement Trong phần Account enablement: ☑️ Enable Security Hub for my account (giữ checked) Bước 4: Delegated Administrator Policy Trong phần Delegated administrator policy: Đọc policy details Giữ cài đặt mặc định Click Onboard ở cuối trang Bước 5: Xác minh kích hoạt thành công Sau khi onboard thành công, bạn sẽ thấy Security Hub dashboard: Security score hiển thị Findings bắt đầu được thu thập Standards tự động kích hoạt 3. Tạo DynamoDB Tables Điều hướng đến dịch vụ DynamoDB Click Create table Tạo bảng đầu tiên: Table name: AccessCertifications Partition key: UserId (String) Sort key: CertificationDate (String) Billing mode: On-demand Click Create table\nTạo bảng thứ hai:\nTable name: RiskAssessments Partition key: AssessmentId (String) Billing mode: On-demand Click Create table\n4. Tạo IAM Roles cần thiết Điều hướng đến dịch vụ IAM Click Roles trong sidebar Click Create role Tạo role cho Lambda: Trusted entity: AWS service Service: Lambda Role name: IdentityGovernanceLambdaRole Policies: Attach AWSLambdaBasicExecutionRole Xác thực thiết lập 1. Kiểm tra các dịch vụ đã kích hoạt CloudTrail: Vào CloudTrail console, xác nhận trail đã được tạo và đang hoạt động S3: Vào S3 console, xác nhận 3 bucket đã được tạo (2 bucket của bạn + 1 CloudTrail bucket) Security Hub: Vào Security Hub console, xác nhận service đã được kích hoạt và có security score DynamoDB: Vào DynamoDB console, xác nhận 2 table đã được tạo IAM: Vào IAM console, xác nhận Lambda role đã được tạo 2. Kiểm tra quyền truy cập Vào IAM console Click Users và xác nhận user hiện tại có quyền cần thiết Click Roles và xác nhận các role đã được tạo Kết quả Mong đợi Sau khi hoàn thành các bước chuẩn bị:\n✅ AWS Account được cấu hình đúng ✅ Các AWS services cần thiết đã được enable ✅ Base infrastructure đã được deploy ✅ Permissions đã được validate ✅ Workshop materials đã sẵn sàng Tiếp theo Chuyển sang 3. Thiết lập Access Governance để bắt đầu triển khai hệ thống.\n"
},
{
	"uri": "//localhost:62814/vi/3-thiet-lap-access-governance/",
	"title": "3. Thiết lập Access Governance",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập nền tảng quản lý truy cập tập trung với AWS IAM Identity Center và IAM.\nBước 1: Thiết lập IAM Foundation 1.1 Tạo IAM Groups Điều hướng đến dịch vụ IAM trong AWS Console Click User groups trong sidebar Click Create group Nhập thông tin group: Group name: SecurityAuditors Click Create group 1.2 Tạo IAM Policies Click Policies trong sidebar Click Create policy Sử dụng JSON editor để tạo custom policy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:Get*\u0026#34;, \u0026#34;iam:List*\u0026#34;, \u0026#34;iam:Generate*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudtrail:Get*\u0026#34;, \u0026#34;cloudtrail:List*\u0026#34;, \u0026#34;cloudtrail:Describe*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Đặt tên policy: SecurityAuditPolicy Click Create policy Bước 2: Cấu hình IAM Identity Center 2.1 Kích hoạt IAM Identity Center Tìm kiếm và mở IAM Identity Center trong AWS Console Click Enable để kích hoạt IAM Identity Center Chọn region để lưu trữ identity store Chọn Use IAM Identity Center as my identity source 2.2 Tạo Permission Sets Trong IAM Identity Center, click Permission sets ở sidebar Click Create permission set Chọn Predefined permission set Chọn SecurityAudit từ dropdown Nhập thông tin: Name: SecurityAuditor Description: Read-only access for security auditing Session duration: 8 hours Click Next và Create Bước 3: Thiết lập Identity Store 3.1 Tạo Users và Groups Trong IAM Identity Center, click Users ở sidebar\nClick Add user\nNhập thông tin user:\nUsername: security-auditor Email: auditor@company.com First name: Security Last name: Auditor Click Next và Add user 3.2 Tạo Groups Click Groups ở sidebar\nClick Create group\nNhập:\nGroup name: SecurityAuditors Description: Security auditing team Add users to group\nChọn user security-auditor Click Create group\nBước 4: Gán Quyền Truy cập 4.1 Gán Permission Sets cho Accounts Click AWS accounts ở sidebar\nChọn account cần assign quyền\nClick Assign users or groups\nChọn Groups tab\nChọn group SecurityAuditors\nClick Next\nChọn permission set SecurityAuditor\nClick Next và Submit\nKết quả Mong đợi Sau khi hoàn thành bước này, bạn sẽ có:\n✅ IAM Groups và Policies được cấu hình ✅ IAM Identity Center được kích hoạt ✅ Permission Sets cho các vai trò governance ✅ Identity Store với groups và users ✅ Các assignment quyền được cấu hình Tiếp theo Chuyển sang 4. Tự động hóa Certification để thiết lập quy trình tự động hóa certification.\n"
},
{
	"uri": "//localhost:62814/vi/4-tu-dong-hoa-certification/",
	"title": "4. Tự động hóa Certification",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Tự động hóa quy trình access certification để đảm bảo quyền truy cập được xem xét định kỳ và tuân thủ các yêu cầu bảo mật.\nBước 1: Xác minh DynamoDB Table 1.1 Kiểm tra Table đã tạo Mở Amazon DynamoDB trong console Xác minh table AccessCertifications đã được tạo trong chương 2 Table này sẽ được sử dụng để lưu certification data Bước 2: Tạo Lambda Function 2.1 Tạo Lambda Function Mở AWS Lambda trong console Click Create function Chọn Author from scratch Nhập thông tin function: Function name: AccessCertificationTrigger Runtime: Python 3.9 Architecture: x86_64 Click Create function 2.2 Cấu hình Code cho Lambda Function Trong tab Code, thay thế code mặc định bằng code sau: import json import boto3 from datetime import datetime def lambda_handler(event, context): print(\u0026#34;Access Certification Trigger Started\u0026#34;) # Initialize AWS clients dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;AccessCertifications\u0026#39;) # Create certification record response = table.put_item( Item={ \u0026#39;UserId\u0026#39;: \u0026#39;system\u0026#39;, \u0026#39;CertificationDate\u0026#39;: datetime.now().isoformat(), \u0026#39;Status\u0026#39;: \u0026#39;Triggered\u0026#39;, \u0026#39;Type\u0026#39;: \u0026#39;Quarterly Review\u0026#39; } ) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Certification process triggered successfully\u0026#39;) } Click Deploy để lưu thay đổi 2.3 Cấu hình IAM Role cho Lambda Chuyển đến tab Configuration Click Permissions Click vào role name để mở IAM console Click Add permissions → Attach policies Tìm và attach policy AmazonDynamoDBFullAccess Chọn Add permissions Bước 3: Thiết lập EventBridge Scheduler 3.1 Tạo Scheduled Rule Mở Amazon EventBridge trong AWS Console Click Rules ở sidebar Click Create rule Bước 1: Define rule detail Nhập thông tin rule:\nName: AccessCertificationSchedule Description: Quarterly access certification review Event bus: default Enable the rule on the selected event bus Trong Rule type, chọn Schedule\nClick Next\nBước 2: Define schedule Trong Occurrence, chọn Recurring schedule Trong Schedule pattern, chọn Rate-based schedule Nhập 90 và chọn Days 10. Trong Flexible time window, nhập 15 minutes 11. Click Next\nBước 3: Select target Trong Target API, chọn AWS Lambda Invoke Trong Lambda function, chọn AccessCertificationTrigger Click Next Bước 4: Configure tags (Optional) Bỏ qua phần tags, click Next Bước 5: Review and create Xem lại cấu hình và click Create rule Bước 4: Kiểm tra Tự động hóa 4.1 Kiểm tra EventBridge Schedule Trong Amazon EventBridge console Click Schedules ở sidebar (không phải Rules) Xác minh schedule AccessCertificationSchedule đã được tạo và đang Enabled 4.2 Test Lambda Function thủ công Vào AWS Lambda console Chọn function AccessCertificationTrigger Click Test để tạo test event Sử dụng default test event và click Test Kiểm tra kết quả thực thi 4.3 Xác minh DynamoDB Record Vào Amazon DynamoDB console Chọn table AccessCertifications Click Explore table items Xác minh có record mới được tạo bởi Lambda function Kết quả Mong đợi Sau khi hoàn thành:\n✅ DynamoDB table để lưu certification data ✅ Lambda function xử lý certification logic ✅ EventBridge scheduled triggers hàng quý ✅ Tự động hóa đánh giá truy cập định kỳ ✅ Audit trail và giám sát Tiếp theo Chuyển sang 5. Phân tích Đặc quyền để thiết lập phân tích đặc quyền.\n"
},
{
	"uri": "//localhost:62814/vi/5-phan-tich-dac-quyen/",
	"title": "5. Phân tích Đặc quyền",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Phân tích và giám sát việc sử dụng đặc quyền để phát hiện rủi ro bảo mật, quyền thừa, và các pattern bất thường thông qua CloudTrail logs.\nBước 1: Xác minh CloudTrail Data 1.1 Kiểm tra CloudTrail Logs Mở Amazon CloudTrail trong console Xác minh trail IdentityGovernanceTrail đã được tạo trong chương 2 Kiểm tra S3 bucket chứa CloudTrail logs 1.2 Xác minh S3 Bucket có CloudTrail Data Vào Amazon S3 console Tìm bucket CloudTrail (tên dạng aws-cloudtrail-logs-xxx) Xác minh có log files được tạo Bước 2: Tạo Lambda Function cho Privilege Analytics 2.1 Tạo Lambda Function Mở AWS Lambda trong console Click Create function Chọn Author from scratch Nhập thông tin function: Function name: PrivilegeAnalyticsEngine Runtime: Python 3.9 Architecture: x86_64 Click Create function 2.2 Cấu hình Code cho Lambda Function Trong tab Code, thay thế code mặc định bằng code sau: import json import boto3 import gzip from datetime import datetime, timedelta from urllib.parse import unquote_plus def lambda_handler(event, context): print(\u0026#34;Privilege Analytics Engine Started\u0026#34;) # Initialize AWS clients s3 = boto3.client(\u0026#39;s3\u0026#39;) dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) # Get the object from the event bucket = event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;bucket\u0026#39;][\u0026#39;name\u0026#39;] key = unquote_plus(event[\u0026#39;Records\u0026#39;][0][\u0026#39;s3\u0026#39;][\u0026#39;object\u0026#39;][\u0026#39;key\u0026#39;]) try: # Download and decompress CloudTrail log response = s3.get_object(Bucket=bucket, Key=key) if key.endswith(\u0026#39;.gz\u0026#39;): content = gzip.decompress(response[\u0026#39;Body\u0026#39;].read()) else: content = response[\u0026#39;Body\u0026#39;].read() # Parse CloudTrail log log_data = json.loads(content.decode(\u0026#39;utf-8\u0026#39;)) # Analyze privilege usage privilege_events = analyze_privilege_events(log_data[\u0026#39;Records\u0026#39;]) # Store analysis results store_analysis_results(privilege_events, dynamodb) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(f\u0026#39;Processed {len(privilege_events)} privilege events\u0026#39;) } except Exception as e: print(f\u0026#39;Error processing {key}: {str(e)}\u0026#39;) return { \u0026#39;statusCode\u0026#39;: 500, \u0026#39;body\u0026#39;: json.dumps(f\u0026#39;Error: {str(e)}\u0026#39;) } def analyze_privilege_events(records): \u0026#34;\u0026#34;\u0026#34;Analyze CloudTrail records for privilege usage patterns\u0026#34;\u0026#34;\u0026#34; privilege_events = [] high_privilege_actions = [ \u0026#39;CreateUser\u0026#39;, \u0026#39;DeleteUser\u0026#39;, \u0026#39;AttachUserPolicy\u0026#39;, \u0026#39;DetachUserPolicy\u0026#39;, \u0026#39;CreateRole\u0026#39;, \u0026#39;DeleteRole\u0026#39;, \u0026#39;AttachRolePolicy\u0026#39;, \u0026#39;DetachRolePolicy\u0026#39;, \u0026#39;PutUserPolicy\u0026#39;, \u0026#39;DeleteUserPolicy\u0026#39;, \u0026#39;PutRolePolicy\u0026#39;, \u0026#39;DeleteRolePolicy\u0026#39; ] for record in records: event_name = record.get(\u0026#39;eventName\u0026#39;, \u0026#39;\u0026#39;) if event_name in high_privilege_actions: privilege_event = { \u0026#39;eventTime\u0026#39;: record.get(\u0026#39;eventTime\u0026#39;), \u0026#39;eventName\u0026#39;: event_name, \u0026#39;userIdentity\u0026#39;: record.get(\u0026#39;userIdentity\u0026#39;, {}), \u0026#39;sourceIPAddress\u0026#39;: record.get(\u0026#39;sourceIPAddress\u0026#39;), \u0026#39;userAgent\u0026#39;: record.get(\u0026#39;userAgent\u0026#39;), \u0026#39;awsRegion\u0026#39;: record.get(\u0026#39;awsRegion\u0026#39;), \u0026#39;riskScore\u0026#39;: calculate_risk_score(record) } privilege_events.append(privilege_event) return privilege_events def calculate_risk_score(record): \u0026#34;\u0026#34;\u0026#34;Calculate risk score for privilege event (1-10 scale)\u0026#34;\u0026#34;\u0026#34; base_score = 5 # High-risk actions high_risk_actions = [\u0026#39;DeleteUser\u0026#39;, \u0026#39;DeleteRole\u0026#39;, \u0026#39;DetachUserPolicy\u0026#39;] if record.get(\u0026#39;eventName\u0026#39;) in high_risk_actions: base_score += 3 # External IP access source_ip = record.get(\u0026#39;sourceIPAddress\u0026#39;, \u0026#39;\u0026#39;) if not source_ip.startswith(\u0026#39;10.\u0026#39;) and not source_ip.startswith(\u0026#39;172.\u0026#39;) and not source_ip.startswith(\u0026#39;192.168.\u0026#39;): base_score += 2 # Console vs API access user_agent = record.get(\u0026#39;userAgent\u0026#39;, \u0026#39;\u0026#39;) if \u0026#39;console\u0026#39; not in user_agent.lower(): base_score += 1 return min(base_score, 10) def store_analysis_results(privilege_events, dynamodb): \u0026#34;\u0026#34;\u0026#34;Store analysis results in DynamoDB\u0026#34;\u0026#34;\u0026#34; table = dynamodb.Table(\u0026#39;RiskAssessments\u0026#39;) for event in privilege_events: table.put_item( Item={ \u0026#39;AssessmentId\u0026#39;: f\u0026#34;privilege-{datetime.now().isoformat()}\u0026#34;, \u0026#39;EventTime\u0026#39;: event[\u0026#39;eventTime\u0026#39;], \u0026#39;EventName\u0026#39;: event[\u0026#39;eventName\u0026#39;], \u0026#39;UserIdentity\u0026#39;: json.dumps(event[\u0026#39;userIdentity\u0026#39;]), \u0026#39;SourceIP\u0026#39;: event[\u0026#39;sourceIPAddress\u0026#39;], \u0026#39;RiskScore\u0026#39;: event[\u0026#39;riskScore\u0026#39;], \u0026#39;AssessmentType\u0026#39;: \u0026#39;Privilege Analysis\u0026#39; } ) Click Deploy để lưu thay đổi 2.3 Cấu hình IAM Role cho Lambda Chuyển đến tab Configuration Click Permissions Click vào role name để mở IAM console Click Add permissions → Attach policies Tìm và attach các policies sau: AmazonS3ReadOnlyAccess AmazonDynamoDBFullAccess Click Add permissions Bước 3: Thiết lập S3 Event Trigger 3.1 Cấu hình S3 Trigger cho Lambda Trong Lambda function PrivilegeAnalyticsEngine Click Add trigger Chọn S3 từ dropdown Cấu hình trigger: Bucket: Chọn CloudTrail S3 bucket Event type: All object create events Prefix: AWSLogs/ (optional) Suffix: .json.gz Click Add Bước 4: Tạo CloudWatch Dashboard 4.1 Tạo Dashboard cho Privilege Analytics Mở Amazon CloudWatch console Click Dashboards ở sidebar Click Create dashboard Nhập dashboard name: PrivilegeAnalyticsDashboard Click Create dashboard 4.2 Thêm Widgets cho Dashboard Click Add widget Chọn Line chart Cấu hình metric: Namespace: AWS/Lambda Metric: Invocations Function: PrivilegeAnalyticsEngine Click Create widget Thêm thêm widgets cho: Lambda Errors Lambda Duration DynamoDB Item Count Bước 5: Kiểm tra Privilege Analytics 5.1 Tạo Test Activity Vào IAM console Thực hiện một số actions để tạo CloudTrail logs: Tạo test user Attach/detach policies Tạo test role 5.2 Kiểm tra Lambda Execution Vào AWS Lambda console Chọn function PrivilegeAnalyticsEngine Click tab Monitor Xem CloudWatch logs để xác minh function đã chạy 5.3 Xác minh DynamoDB Records Vào Amazon DynamoDB console Chọn table RiskAssessments Click Explore table items Xác minh có records mới với AssessmentType = \u0026lsquo;Privilege Analysis\u0026rsquo; Kết quả Mong đợi Sau khi hoàn thành:\n✅ CloudTrail logs được phân tích tự động ✅ Lambda function xử lý privilege events ✅ Risk scoring cho các privilege actions ✅ DynamoDB lưu trữ kết quả phân tích ✅ CloudWatch dashboard giám sát ✅ Real-time privilege monitoring Tiếp theo Chuyển sang 6. Đánh giá Rủi ro để thiết lập đánh giá rủi ro toàn diện.\n"
},
{
	"uri": "//localhost:62814/vi/6-danh-gia-rui-ro/",
	"title": "6. Đánh giá Rủi ro",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập hệ thống đánh giá rủi ro toàn diện để phát hiện, phân tích và ưu tiên các rủi ro bảo mật liên quan đến identity và access management.\nKiến trúc Risk Assessment graph TB A[CloudTrail Events] --\u0026gt; B[Lambda Risk Engine] C[IAM Data] --\u0026gt; B B --\u0026gt; D[DynamoDB Risk Data] D --\u0026gt; E[Security Hub Findings] E --\u0026gt; F[CloudWatch Metrics] F --\u0026gt; G[SNS Alerts] D --\u0026gt; H[QuickSight Dashboard] Bước 1: Risk Assessment Framework 1.1 Risk Categories Definition import boto3 import json from datetime import datetime, timedelta from enum import Enum class RiskCategory(Enum): PRIVILEGE_ESCALATION = \u0026#34;privilege_escalation\u0026#34; UNAUTHORIZED_ACCESS = \u0026#34;unauthorized_access\u0026#34; DATA_EXPOSURE = \u0026#34;data_exposure\u0026#34; COMPLIANCE_VIOLATION = \u0026#34;compliance_violation\u0026#34; OPERATIONAL_RISK = \u0026#34;operational_risk\u0026#34; class RiskSeverity(Enum): CRITICAL = 10 HIGH = 8 MEDIUM = 5 LOW = 3 MINIMAL = 1 class RiskAssessmentFramework: def __init__(self): self.risk_rules = self.load_risk_rules() self.threat_intelligence = self.load_threat_intelligence() self.compliance_requirements = self.load_compliance_requirements() Bước 2: Threat Intelligence Integration 2.1 Threat Intelligence Collector import requests import boto3 from datetime import datetime class ThreatIntelligenceCollector: def __init__(self): self.threat_feeds = [ { \u0026#34;name\u0026#34;: \u0026#34;AWS Security Bulletins\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://aws.amazon.com/security/security-bulletins/\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;aws_security\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;MITRE ATT\u0026amp;CK\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://attack.mitre.org/\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;attack_patterns\u0026#34; } ] def collect_threat_intelligence(self): \u0026#34;\u0026#34;\u0026#34;Collect threat intelligence from various sources\u0026#34;\u0026#34;\u0026#34; intelligence_data = { \u0026#34;collection_timestamp\u0026#34;: datetime.now().isoformat(), \u0026#34;threat_indicators\u0026#34;: [], \u0026#34;attack_patterns\u0026#34;: [], \u0026#34;vulnerabilities\u0026#34;: [] } return intelligence_data Bước 3: Risk Monitoring và Alerting 3.1 Real-time Risk Monitor import boto3 import json from datetime import datetime class RealTimeRiskMonitor: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.risk_table = self.dynamodb.Table(\u0026#39;RiskMonitoring\u0026#39;) def process_security_event(self, event): \u0026#34;\u0026#34;\u0026#34;Process incoming security events for risk assessment\u0026#34;\u0026#34;\u0026#34; event_type = event.get(\u0026#39;eventName\u0026#39;, \u0026#39;\u0026#39;) source_ip = event.get(\u0026#39;sourceIPAddress\u0026#39;, \u0026#39;\u0026#39;) user_identity = event.get(\u0026#39;userIdentity\u0026#39;, {}) # Analyze event for risk indicators risk_score = self.calculate_event_risk_score(event) if risk_score \u0026gt;= 7: # High risk threshold self.handle_high_risk_event(event, risk_score) return { \u0026#39;event_processed\u0026#39;: True, \u0026#39;risk_score\u0026#39;: risk_score, \u0026#39;action_taken\u0026#39;: risk_score \u0026gt;= 7 } Bước 4: Tích hợp Security Hub 4.1 Thiết lập Security Hub Mở AWS Security Hub trong console Click Enable Security Hub Chọn security standards: AWS Foundational Security Standard CIS AWS Foundations Benchmark 4.2 Cấu hình Lambda gửi Findings Cập nhật Lambda risk engine Thêm code gửi findings đến Security Hub Cấu hình IAM permissions Kết quả Mong đợi Sau khi hoàn thành:\n✅ Comprehensive risk assessment framework ✅ Real-time risk monitoring ✅ Threat intelligence integration ✅ Automated alerting system ✅ Risk dashboard and metrics ✅ Prioritized remediation plans Tiếp theo Chuyển sang 7. Thiết lập Giám sát để thiết lập giám sát toàn diện.\n"
},
{
	"uri": "//localhost:62814/vi/7-thiet-lap-giam-sat/",
	"title": "7. Thiết lập Giám sát",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập hệ thống giám sát toàn diện để theo dõi liên tục các hoạt động identity governance, phát hiện anomalies, và đảm bảo compliance.\nKiến trúc Monitoring Bước 1: Thiết lập CloudWatch Monitoring 1.1 Tạo SNS Topic cho Alerts Mở Amazon SNS trong console Click Topics → Create topic Cấu hình: Type: Standard Name: IdentityGovernanceAlerts Display name: Identity Governance Monitoring Alerts Click Create subscription Thêm email subscription cho security team 1.2 Tạo CloudWatch Log Group Mở CloudWatch console Click Log groups → Create log group Cấu hình: Log group name: /aws/identity-governance/events Retention setting: 1 year 1.3 Thiết lập CloudWatch Alarms Trong CloudWatch, click Alarms → Create alarm Tạo các alarms: Failed Login Attempts: Nhiều lần đăng nhập thất bại Privilege Escalation: Phát hiện leo thang quyền Off-hours Access: Truy cập ngoài giờ làm việc Bước 2: Thiết lập Log Analytics 2.1 CloudWatch Insights Queries Mở CloudWatch Logs Insights Chọn log group: /aws/cloudtrail Tạo saved queries: Query 1: Failed Login Attempts\nfields @timestamp, sourceIPAddress, userIdentity.userName, errorMessage | filter eventName = \u0026#34;ConsoleLogin\u0026#34; and errorCode != \u0026#34;Success\u0026#34; | stats count() by userIdentity.userName | sort count desc Query 2: Privilege Escalation Events\nfields @timestamp, eventName, userIdentity.userName, sourceIPAddress | filter eventName in [\u0026#34;AttachUserPolicy\u0026#34;, \u0026#34;CreateRole\u0026#34;, \u0026#34;PutUserPolicy\u0026#34;] | sort @timestamp desc 2.2 Tạo Custom Dashboard Trong CloudWatch, click Dashboards → Create dashboard Tên: IdentityGovernanceMonitoring Thêm widgets: Failed Login Attempts (Line chart) Active Users (Number) Policy Changes (Log table) Geographic Access Map Bước 3: Thiết lập Lambda Monitoring Function 3.1 Tạo Lambda Function Mở AWS Lambda console Click Create function Cấu hình: Function name: IdentityGovernanceMonitor Runtime: Python 3.9 Role: IdentityGovernanceMonitoringRole Cấu hình environment variables: LOG_GROUP_NAME: /aws/identity-governance/events SNS_TOPIC_ARN: ARN của SNS topic Thêm Lambda function code: import boto3 import json import os from datetime import datetime, timedelta class IdentityGovernanceMonitor: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.logs_client = boto3.client(\u0026#39;logs\u0026#39;) self.iam_client = boto3.client(\u0026#39;iam\u0026#39;) self.sso_client = boto3.client(\u0026#39;sso-admin\u0026#39;) self.sns_client = boto3.client(\u0026#39;sns\u0026#39;) self.log_group = os.environ.get(\u0026#39;LOG_GROUP_NAME\u0026#39;, \u0026#39;/aws/identity-governance/events\u0026#39;) self.sns_topic = os.environ.get(\u0026#39;SNS_TOPIC_ARN\u0026#39;) def monitor_identity_events(self): \u0026#34;\u0026#34;\u0026#34;Monitor and analyze identity-related events\u0026#34;\u0026#34;\u0026#34; monitoring_results = { \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;metrics_collected\u0026#39;: [], \u0026#39;anomalies_detected\u0026#39;: [], \u0026#39;alerts_sent\u0026#39;: [] } # Check for failed login attempts failed_logins = self.check_failed_logins() if failed_logins \u0026gt; 5: self.send_alert(f\u0026#34;High failed login attempts detected: {failed_logins}\u0026#34;) monitoring_results[\u0026#39;anomalies_detected\u0026#39;].append(\u0026#39;high_failed_logins\u0026#39;) # Check for privilege escalation privilege_changes = self.check_privilege_escalation() if privilege_changes: self.send_alert(f\u0026#34;Privilege escalation detected: {privilege_changes}\u0026#34;) monitoring_results[\u0026#39;anomalies_detected\u0026#39;].append(\u0026#39;privilege_escalation\u0026#39;) return monitoring_results def check_failed_logins(self): \u0026#34;\u0026#34;\u0026#34;Check for failed login attempts in the last hour\u0026#34;\u0026#34;\u0026#34; end_time = datetime.now() start_time = end_time - timedelta(hours=1) query = \u0026#34;\u0026#34;\u0026#34; fields @timestamp, sourceIPAddress, userIdentity.userName, errorMessage | filter eventName = \u0026#34;ConsoleLogin\u0026#34; and errorCode != \u0026#34;Success\u0026#34; | stats count() as failed_attempts \u0026#34;\u0026#34;\u0026#34; try: response = self.logs_client.start_query( logGroupName=\u0026#39;/aws/cloudtrail\u0026#39;, startTime=int(start_time.timestamp()), endTime=int(end_time.timestamp()), queryString=query ) # Get query results (simplified for demo) return 0 # Would return actual count except Exception as e: print(f\u0026#34;Error checking failed logins: {e}\u0026#34;) return 0 def check_privilege_escalation(self): \u0026#34;\u0026#34;\u0026#34;Check for privilege escalation events\u0026#34;\u0026#34;\u0026#34; escalation_events = [ \u0026#39;AttachUserPolicy\u0026#39;, \u0026#39;CreateRole\u0026#39;, \u0026#39;PutUserPolicy\u0026#39;, \u0026#39;AttachRolePolicy\u0026#39; ] # Check recent IAM events try: # This would query CloudTrail logs for privilege changes return [] # Would return actual events except Exception as e: print(f\u0026#34;Error checking privilege escalation: {e}\u0026#34;) return [] def send_alert(self, message): \u0026#34;\u0026#34;\u0026#34;Send alert via SNS\u0026#34;\u0026#34;\u0026#34; try: self.sns_client.publish( TopicArn=self.sns_topic, Message=message, Subject=\u0026#39;Identity Governance Alert\u0026#39; ) except Exception as e: print(f\u0026#34;Error sending alert: {e}\u0026#34;) def lambda_handler(event, context): monitor = IdentityGovernanceMonitor() results = monitor.monitor_identity_events() return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(results) } 3.2 Thiết lập EventBridge Schedule Mở EventBridge console Click Rules → Create rule Cấu hình: Name: IdentityMonitoringSchedule Schedule: Rate(5 minutes) Target: Lambda IdentityGovernanceMonitor Bước 4: Anomaly Detection Setup 4.1 CloudWatch Anomaly Detection Trong CloudWatch Metrics, chọn metric cần monitor Click Actions → Create anomaly detector Cấu hình threshold và notification 4.2 Security Hub Integration Mở Security Hub console Cấu hình findings export đến S3 Thiết lập EventBridge rule cho Security Hub findings Tích hợp với Lambda monitoring function Kết quả Mong đợi Sau khi hoàn thành:\n✅ Real-time monitoring của identity events ✅ Custom CloudWatch metrics và alarms ✅ Automated log analysis ✅ Anomaly detection và alerting ✅ Comprehensive monitoring dashboard ✅ Scheduled monitoring tasks Tiếp theo Chuyển sang 8. Quy trình Vận hành để thiết lập quy trình vận hành.\n"
},
{
	"uri": "//localhost:62814/vi/8-quy-trinh-van-hanh/",
	"title": "8. Quy trình Vận hành",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập các quy trình vận hành chuẩn hóa để quản lý identity governance một cách hiệu quả, đảm bảo tính nhất quán và tuân thủ.\nQuy trình Tổng quan graph TB A[Daily Operations] --\u0026gt; B[Weekly Reviews] B --\u0026gt; C[Monthly Assessments] C --\u0026gt; D[Quarterly Certifications] E[Incident Response] --\u0026gt; F[Investigation] F --\u0026gt; G[Remediation] G --\u0026gt; H[Documentation] I[Change Management] --\u0026gt; J[Approval Process] J --\u0026gt; K[Implementation] K --\u0026gt; L[Validation] Bước 1: Daily Operations Procedures 1.1 Daily Monitoring Checklist import boto3 import json from datetime import datetime, timedelta class DailyOperations: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.operations_table = self.dynamodb.Table(\u0026#39;AccessCertifications\u0026#39;) def execute_daily_checklist(self): \u0026#34;\u0026#34;\u0026#34;Execute daily operational checklist\u0026#34;\u0026#34;\u0026#34; checklist_results = { \u0026#39;date\u0026#39;: datetime.now().strftime(\u0026#39;%Y-%m-%d\u0026#39;), \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;checks_performed\u0026#39;: [], \u0026#39;issues_found\u0026#39;: [], \u0026#39;actions_taken\u0026#39;: [] } # Daily checks checks = [ (\u0026#39;Monitor Failed Logins\u0026#39;, self.check_failed_logins), (\u0026#39;Review High-Risk Alerts\u0026#39;, self.review_high_risk_alerts), (\u0026#39;Check System Health\u0026#39;, self.check_system_health), (\u0026#39;Validate Backup Status\u0026#39;, self.validate_backup_status), (\u0026#39;Review Pending Certifications\u0026#39;, self.review_pending_certifications) ] return checklist_results 1.2 Standard Operating Procedures (SOPs) # Identity Governance Standard Operating Procedures ## SOP-001: Daily Monitoring Procedures ### Purpose Ensure daily monitoring of identity governance systems and prompt response to issues. ### Scope All identity governance monitoring activities performed daily. ### Procedure 1. **Morning Health Check (9:00 AM)** - Review CloudWatch dashboard - Check for active alarms - Verify system availability 2. **Failed Login Review (10:00 AM)** - Analyze failed login patterns - Investigate suspicious activities - Document findings 3. **Risk Alert Review (2:00 PM)** - Review high-risk alerts - Prioritize investigations - Assign remediation tasks 4. **End-of-Day Summary (5:00 PM)** - Generate daily report - Update incident tracking - Plan next day activities ### Escalation Criteria - Critical alarms: Immediate escalation - High-risk events: 2-hour response time - System outages: Immediate escalation Bước 2: Weekly Review Procedures 2.1 Weekly Assessment Script import boto3 import json from datetime import datetime, timedelta class WeeklyReview: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.athena_client = boto3.client(\u0026#39;athena\u0026#39;) def execute_weekly_review(self): \u0026#34;\u0026#34;\u0026#34;Execute weekly identity governance review\u0026#34;\u0026#34;\u0026#34; review_results = { \u0026#39;week_ending\u0026#39;: datetime.now().strftime(\u0026#39;%Y-%m-%d\u0026#39;), \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;metrics_summary\u0026#39;: {}, \u0026#39;trend_analysis\u0026#39;: {}, \u0026#39;recommendations\u0026#39;: [] } # Collect weekly metrics review_results[\u0026#39;metrics_summary\u0026#39;] = self.collect_weekly_metrics() # Perform trend analysis review_results[\u0026#39;trend_analysis\u0026#39;] = self.analyze_trends() # Generate recommendations review_results[\u0026#39;recommendations\u0026#39;] = self.generate_weekly_recommendations() return review_results Bước 3: Runbook Templates 3.1 Incident Response Runbook # Incident Response Runbook Template incident_response: incident_id: \u0026#34;INC-{YYYY-MM-DD}-{###}\u0026#34; classification: severity: \u0026#34;[P1|P2|P3|P4]\u0026#34; category: \u0026#34;[Security|Availability|Performance|Compliance]\u0026#34; impact: \u0026#34;[Critical|High|Medium|Low]\u0026#34; initial_response: - step: \u0026#34;Acknowledge incident\u0026#34; owner: \u0026#34;On-call engineer\u0026#34; sla: \u0026#34;15 minutes\u0026#34; - step: \u0026#34;Assess severity and impact\u0026#34; owner: \u0026#34;Incident commander\u0026#34; sla: \u0026#34;30 minutes\u0026#34; - step: \u0026#34;Activate response team\u0026#34; owner: \u0026#34;Incident commander\u0026#34; sla: \u0026#34;30 minutes\u0026#34; investigation: - step: \u0026#34;Collect initial evidence\u0026#34; actions: - \u0026#34;Export relevant CloudTrail logs\u0026#34; - \u0026#34;Capture system state\u0026#34; - \u0026#34;Document timeline\u0026#34; - step: \u0026#34;Analyze root cause\u0026#34; actions: - \u0026#34;Review logs and metrics\u0026#34; - \u0026#34;Interview stakeholders\u0026#34; - \u0026#34;Test hypotheses\u0026#34; Kết quả Mong đợi Sau khi hoàn thành:\n✅ Standardized daily operations procedures ✅ Weekly review and trend analysis ✅ Incident response runbooks ✅ Change management processes ✅ Operational documentation ✅ Automated operational tasks Tiếp theo Chuyển sang 9. Quy trình Kiểm toán để thiết lập quy trình kiểm toán.\n"
},
{
	"uri": "//localhost:62814/vi/9-quy-trinh-kiem-toan/",
	"title": "9. Quy trình Kiểm toán",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập quy trình kiểm toán toàn diện để đảm bảo tuân thủ các yêu cầu bảo mật, pháp lý và nội bộ trong quản lý identity governance.\nKiến trúc Audit graph TB A[Audit Planning] --\u0026gt; B[Evidence Collection] B --\u0026gt; C[Analysis \u0026amp; Testing] C --\u0026gt; D[Findings Documentation] D --\u0026gt; E[Remediation Tracking] E --\u0026gt; F[Audit Reporting] G[Continuous Monitoring] --\u0026gt; H[Automated Controls Testing] H --\u0026gt; I[Exception Reporting] I --\u0026gt; J[Management Dashboard] Bước 1: Audit Framework Setup 1.1 Audit Control Matrix import boto3 import json from datetime import datetime, timedelta from enum import Enum class AuditFramework: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.athena_client = boto3.client(\u0026#39;athena\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.audit_table = self.dynamodb.Table(\u0026#39;AuditFindings\u0026#39;) # Define audit controls self.audit_controls = self.load_audit_controls() def load_audit_controls(self): \u0026#34;\u0026#34;\u0026#34;Load comprehensive audit control matrix\u0026#34;\u0026#34;\u0026#34; return { \u0026#34;access_management\u0026#34;: [ { \u0026#34;control_id\u0026#34;: \u0026#34;AM-001\u0026#34;, \u0026#34;control_name\u0026#34;: \u0026#34;User Access Provisioning\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Verify user access is properly authorized and documented\u0026#34;, \u0026#34;frequency\u0026#34;: \u0026#34;Quarterly\u0026#34;, \u0026#34;test_procedure\u0026#34;: self.test_user_provisioning, \u0026#34;compliance_frameworks\u0026#34;: [\u0026#34;SOX\u0026#34;, \u0026#34;SOC2\u0026#34;, \u0026#34;ISO27001\u0026#34;] } ] } Bước 2: Continuous Audit Monitoring 2.1 Lambda-based Compliance Monitoring Mở AWS Lambda trong console Tạo function: ComplianceAuditMonitor Cấu hình trigger từ EventBridge (daily schedule) Upload code kiểm tra compliance: Kiểm tra IAM policies Kiểm tra access patterns Ghi kết quả vào DynamoDB Cấu hình CloudWatch Logs để theo dõi Bước 3: Audit Report Generation 3.1 Automated Report Generator import boto3 import json from datetime import datetime, timedelta from jinja2 import Template class AuditReportGenerator: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.ses_client = boto3.client(\u0026#39;ses\u0026#39;) def generate_monthly_audit_report(self): \u0026#34;\u0026#34;\u0026#34;Generate comprehensive monthly audit report\u0026#34;\u0026#34;\u0026#34; report_data = { \u0026#34;report_period\u0026#34;: datetime.now().strftime(\u0026#34;%Y-%m\u0026#34;), \u0026#34;generated_date\u0026#34;: datetime.now().isoformat(), \u0026#34;executive_summary\u0026#34;: {}, \u0026#34;control_effectiveness\u0026#34;: {}, \u0026#34;findings_summary\u0026#34;: {}, \u0026#34;trend_analysis\u0026#34;: {}, \u0026#34;recommendations\u0026#34;: [] } # Collect audit data from S3 audit_data = self.collect_monthly_audit_data() # Generate report sections report_data[\u0026#34;executive_summary\u0026#34;] = self.generate_executive_summary(audit_data) return report_data Kết quả Mong đợi Sau khi hoàn thành:\n✅ Comprehensive audit framework ✅ Automated control testing ✅ Continuous compliance monitoring ✅ Detailed audit reports ✅ Finding tracking and remediation ✅ Stakeholder communication Tiếp theo Chuyển sang 10. Xác thực Tuân thủ để hoàn thành workshop.\n"
},
{
	"uri": "//localhost:62814/vi/10-xac-thuc-tuan-thu/",
	"title": "10. Xác thực Tuân thủ",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Xác thực và duy trì tuân thủ các framework bảo mật và quy định pháp lý thông qua identity governance, đảm bảo tổ chức đáp ứng các yêu cầu SOX, SOC2, ISO27001, PCI-DSS và các tiêu chuẩn khác.\nCompliance Framework Mapping Bước 1: Thiết lập AWS Artifact cho Compliance Documentation 1.1 Truy cập AWS Artifact Mở AWS Artifact trong console Click Reports để xem các báo cáo compliance Download các báo cáo cần thiết: SOC 2 Type II ISO 27001 PCI DSS AOC Xem lại AWS responsibility matrix Lưu trữ documents trong S3 bucket compliance Bước 2: Thiết lập AWS Security Hub 2.1 Kích hoạt Security Standards Mở AWS Security Hub Click Security standards Kích hoạt các standards: AWS Foundational Security Standard CIS AWS Foundations Benchmark PCI DSS Cấu hình compliance scoring Thiết lập automated remediation Bước 3: Tạo Compliance Dashboard 3.1 CloudWatch Dashboard Mở CloudWatch Click Dashboards → Create dashboard Tên dashboard: ComplianceMonitoring Thêm widgets: Compliance Score Metrics Failed Controls Count Remediation Status 3.2 Thiết lập Compliance Alarms Trong CloudWatch, click Alarms Tạo alarm cho: Low Compliance Score Critical Finding Detected Failed Remediation Bước 4: Automated Compliance Validation 4.1 Tạo Lambda Function Mở AWS Lambda Click Create function Cấu hình: Function name: ComplianceValidator Runtime: Python 3.9 Role: ComplianceValidationRole Thêm Lambda function code: import boto3 import json from datetime import datetime, timedelta from enum import Enum class ComplianceFramework(Enum): SOX = \u0026#34;sox\u0026#34; SOC2 = \u0026#34;soc2\u0026#34; ISO27001 = \u0026#34;iso27001\u0026#34; PCI_DSS = \u0026#34;pci_dss\u0026#34; NIST = \u0026#34;nist\u0026#34; class ComplianceValidator: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.config_client = boto3.client(\u0026#39;config\u0026#39;) self.security_hub = boto3.client(\u0026#39;securityhub\u0026#39;) # Compliance requirements mapping self.compliance_requirements = { ComplianceFramework.SOX: { \u0026#34;name\u0026#34;: \u0026#34;Sarbanes-Oxley Act\u0026#34;, \u0026#34;controls\u0026#34;: [ \u0026#34;access_segregation\u0026#34;, \u0026#34;approval_workflows\u0026#34;, \u0026#34;audit_trails\u0026#34;, \u0026#34;financial_access_controls\u0026#34; ] }, ComplianceFramework.SOC2: { \u0026#34;name\u0026#34;: \u0026#34;SOC 2 Type II\u0026#34;, \u0026#34;controls\u0026#34;: [ \u0026#34;logical_access_controls\u0026#34;, \u0026#34;system_monitoring\u0026#34;, \u0026#34;change_management\u0026#34;, \u0026#34;data_protection\u0026#34; ] }, ComplianceFramework.ISO27001: { \u0026#34;name\u0026#34;: \u0026#34;ISO 27001\u0026#34;, \u0026#34;controls\u0026#34;: [ \u0026#34;information_security_policy\u0026#34;, \u0026#34;access_control_management\u0026#34;, \u0026#34;incident_management\u0026#34;, \u0026#34;business_continuity\u0026#34; ] } } def validate_compliance(self, framework): \u0026#34;\u0026#34;\u0026#34;Validate compliance for specific framework\u0026#34;\u0026#34;\u0026#34; validation_results = { \u0026#39;framework\u0026#39;: framework.value, \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;overall_score\u0026#39;: 0, \u0026#39;control_results\u0026#39;: {}, \u0026#39;findings\u0026#39;: [], \u0026#39;recommendations\u0026#39;: [] } if framework in self.compliance_requirements: controls = self.compliance_requirements[framework][\u0026#39;controls\u0026#39;] for control in controls: control_score = self.validate_control(control) validation_results[\u0026#39;control_results\u0026#39;][control] = control_score if control_score \u0026lt; 80: # Threshold for compliance validation_results[\u0026#39;findings\u0026#39;].append({ \u0026#39;control\u0026#39;: control, \u0026#39;score\u0026#39;: control_score, \u0026#39;severity\u0026#39;: \u0026#39;HIGH\u0026#39; if control_score \u0026lt; 50 else \u0026#39;MEDIUM\u0026#39; }) # Calculate overall score if validation_results[\u0026#39;control_results\u0026#39;]: validation_results[\u0026#39;overall_score\u0026#39;] = sum( validation_results[\u0026#39;control_results\u0026#39;].values() ) / len(validation_results[\u0026#39;control_results\u0026#39;]) return validation_results def validate_control(self, control_name): \u0026#34;\u0026#34;\u0026#34;Validate specific control implementation\u0026#34;\u0026#34;\u0026#34; # Control validation logic based on AWS Config rules control_mappings = { \u0026#39;access_segregation\u0026#39;: self.check_iam_separation(), \u0026#39;audit_trails\u0026#39;: self.check_cloudtrail_enabled(), \u0026#39;logical_access_controls\u0026#39;: self.check_mfa_enabled(), \u0026#39;system_monitoring\u0026#39;: self.check_cloudwatch_monitoring(), \u0026#39;data_protection\u0026#39;: self.check_encryption_enabled() } return control_mappings.get(control_name, 0) def check_iam_separation(self): \u0026#34;\u0026#34;\u0026#34;Check IAM role separation\u0026#34;\u0026#34;\u0026#34; try: # Check for proper role separation # This would implement actual IAM policy analysis return 85 # Demo score except Exception: return 0 def check_cloudtrail_enabled(self): \u0026#34;\u0026#34;\u0026#34;Check CloudTrail configuration\u0026#34;\u0026#34;\u0026#34; try: cloudtrail = boto3.client(\u0026#39;cloudtrail\u0026#39;) trails = cloudtrail.describe_trails() if trails[\u0026#39;trailList\u0026#39;]: # Check if trails are properly configured return 90 return 0 except Exception: return 0 def check_mfa_enabled(self): \u0026#34;\u0026#34;\u0026#34;Check MFA enforcement\u0026#34;\u0026#34;\u0026#34; try: # Check MFA policies and enforcement return 75 # Demo score except Exception: return 0 def check_cloudwatch_monitoring(self): \u0026#34;\u0026#34;\u0026#34;Check CloudWatch monitoring setup\u0026#34;\u0026#34;\u0026#34; try: cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) alarms = cloudwatch.describe_alarms() if alarms[\u0026#39;MetricAlarms\u0026#39;]: return 80 return 0 except Exception: return 0 def check_encryption_enabled(self): \u0026#34;\u0026#34;\u0026#34;Check encryption configuration\u0026#34;\u0026#34;\u0026#34; try: # Check S3 bucket encryption, EBS encryption, etc. return 85 # Demo score except Exception: return 0 def generate_compliance_report(self, validation_results): \u0026#34;\u0026#34;\u0026#34;Generate compliance report\u0026#34;\u0026#34;\u0026#34; report = { \u0026#39;report_id\u0026#39;: f\u0026#34;compliance-{datetime.now().strftime(\u0026#39;%Y%m%d-%H%M%S\u0026#39;)}\u0026#34;, \u0026#39;generated_at\u0026#39;: datetime.now().isoformat(), \u0026#39;framework\u0026#39;: validation_results[\u0026#39;framework\u0026#39;], \u0026#39;overall_compliance\u0026#39;: validation_results[\u0026#39;overall_score\u0026#39;], \u0026#39;status\u0026#39;: \u0026#39;COMPLIANT\u0026#39; if validation_results[\u0026#39;overall_score\u0026#39;] \u0026gt;= 80 else \u0026#39;NON_COMPLIANT\u0026#39;, \u0026#39;summary\u0026#39;: { \u0026#39;total_controls\u0026#39;: len(validation_results[\u0026#39;control_results\u0026#39;]), \u0026#39;passed_controls\u0026#39;: len([s for s in validation_results[\u0026#39;control_results\u0026#39;].values() if s \u0026gt;= 80]), \u0026#39;failed_controls\u0026#39;: len([s for s in validation_results[\u0026#39;control_results\u0026#39;].values() if s \u0026lt; 80]), \u0026#39;critical_findings\u0026#39;: len([f for f in validation_results[\u0026#39;findings\u0026#39;] if f[\u0026#39;severity\u0026#39;] == \u0026#39;HIGH\u0026#39;]) }, \u0026#39;detailed_results\u0026#39;: validation_results } return report def lambda_handler(event, context): validator = ComplianceValidator() # Validate all frameworks all_results = {} for framework in ComplianceFramework: results = validator.validate_compliance(framework) report = validator.generate_compliance_report(results) all_results[framework.value] = report return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(all_results, default=str) } 4.2 Thiết lập EventBridge Schedule Mở EventBridge Tạo rule cho daily compliance check Target: Lambda ComplianceValidator function Bước 5: Compliance Evidence Collection 5.1 Sử dụng Security Hub Findings Sử dụng AWS Security Hub để validate: IAM password policies S3 bucket encryption CloudTrail logging VPC security groups 5.2 Automated Evidence Storage Cấu hình Security Hub để lưu compliance evidence vào S3 Sử dụng DynamoDB để lưu trữ compliance records Tạo compliance reports tự động với Lambda Kết quả Mong đợi Sau khi hoàn thành workshop này, bạn sẽ có:\n✅ Comprehensive Identity Governance System Centralized access management với AWS IAM Identity Center Automated access certification workflows Real-time privilege analytics và risk assessment Continuous monitoring và alerting ✅ Compliance Framework Implementation SOX, SOC2, ISO27001, PCI-DSS compliance validation Automated evidence collection Regulatory reporting capabilities Audit trail maintenance ✅ Operational Excellence Standardized operational procedures Incident response capabilities Change management processes Performance monitoring ✅ Audit và Governance Comprehensive audit framework Automated control testing Finding tracking và remediation Management reporting Best Practices Summary Implement Least Privilege: Chỉ cấp quyền tối thiểu cần thiết Automate Where Possible: Tự động hóa các quy trình lặp lại Monitor Continuously: Giám sát liên tục các hoạt động Document Everything: Ghi chép đầy đủ cho audit trail Regular Reviews: Thực hiện review định kỳ Stay Updated: Cập nhật theo các thay đổi compliance Tài liệu Tham khảo AWS IAM Identity Center Documentation AWS Organizations Best Practices SOX Compliance Guidelines SOC 2 Framework ISO 27001 Standard Hỗ trợ Nếu bạn gặp vấn đề trong quá trình triển khai, vui lòng:\nKiểm tra CloudWatch Logs để debug Xem lại IAM permissions Tham khảo AWS documentation Liên hệ team support nếu cần thiết Workshop hoàn thành thành công! 🎉\n"
},
{
	"uri": "//localhost:62814/vi/11-clean-resources/",
	"title": "11. Dọn dẹp Tài nguyên",
	"tags": [],
	"description": "",
	"content": "Tổng quan Phần này cung cấp hướng dẫn toàn diện để dọn dẹp tất cả tài nguyên AWS được tạo trong workshop Identity Governance nhằm tránh phát sinh chi phí không cần thiết.\nLưu ý quan trọng ⚠️ Cảnh báo: Thực hiện các bước dọn dẹp này sẽ xóa vĩnh viễn tất cả tài nguyên và dữ liệu được tạo trong workshop. Hãy đảm bảo bạn đã sao lưu các cấu hình hoặc dữ liệu quan trọng trước khi tiến hành.\nThứ tự Dọn dẹp Tài nguyên nên được dọn dẹp theo thứ tự sau để tránh xung đột phụ thuộc:\nLambda Functions và EventBridge Rules Step Functions State Machines DynamoDB Tables S3 Buckets và Objects CloudWatch Resources IAM Roles và Policies CloudFormation Stacks AWS Organizations (nếu đã tạo) IAM Identity Center (nếu không còn cần thiết) Bước 1: Lambda Functions và EventBridge Xóa Lambda Functions Mở AWS Lambda console Lọc functions theo tên workshop: IdentityGovernance AccessCertification ComplianceValidation Chọn workshop functions Click Actions → Delete Xác nhận xóa bằng cách gõ delete Xóa EventBridge Rules Mở Amazon EventBridge console Vào Rules Chọn workshop rules: AccessCertificationSchedule ComplianceValidationSchedule Click Delete cho từng rule Bước 2: Step Functions Mở AWS Step Functions console Chọn workshop state machines: AccessCertificationWorkflow ComplianceValidationWorkflow Click Delete Xác nhận xóa Bước 3: DynamoDB Tables Mở Amazon DynamoDB console Vào Tables Chọn workshop tables: OperationalProcedures ComplianceEvidence AuditFindings Click Delete cho từng table Gõ delete để xác nhận Bước 4: S3 Buckets Làm trống S3 Buckets Mở Amazon S3 console Xác định workshop buckets: privilege-analytics-* compliance-reports-* Chọn bucket và click Empty Gõ permanently delete để xác nhận Xóa S3 Buckets Sau khi làm trống, chọn bucket Click Delete Gõ tên bucket để xác nhận Bước 5: CloudWatch Resources Xóa CloudWatch Dashboards Mở Amazon CloudWatch console Vào Dashboards Chọn workshop dashboards: IdentityGovernanceRiskDashboard DailyOperationsDashboard Click Delete cho từng dashboard Xóa CloudWatch Alarms Vào Alarms Chọn workshop alarms Click Actions → Delete Xóa Log Groups Vào Log groups Chọn workshop log groups Click Actions → Delete log group Bước 6: SNS Topics Mở Amazon SNS console Vào Topics Chọn workshop topics: IdentityGovernanceAlerts ComplianceAlerts Click Delete cho từng topic Xác nhận xóa Bước 6: IAM Resources Xóa IAM Roles Điều hướng đến dịch vụ IAM trong AWS Console Click Roles trong sidebar Tìm kiếm các workshop roles: IdentityGovernanceLambdaRole ComplianceValidationRole CertificationWorkflowRole Chọn từng role và click Delete Gõ tên role để xác nhận xóa Xóa Custom IAM Policies Click Policies trong sidebar Lọc theo Customer managed Tìm kiếm các workshop policies: SecurityAuditPolicy IdentityGovernancePolicy ComplianceValidationPolicy Chọn từng policy và click Actions → Delete Xác nhận xóa Xóa IAM Users và Groups Click Users trong sidebar Chọn workshop users và click Delete Click User groups trong sidebar Chọn workshop groups và click Delete Bước 7: Dọn dẹp IAM Identity Center Xóa Permission Set Assignments Điều hướng đến IAM Identity Center Click AWS accounts trong sidebar Chọn account của bạn và click Remove access Xóa Permission Sets Click Permission sets trong sidebar Chọn các workshop permission sets: SecurityAuditor ComplianceReviewer Click Delete Xóa Users và Groups Click Users trong sidebar Chọn workshop users và click Delete Click Groups trong sidebar Chọn workshop groups và click Delete Bước 8: Dọn dẹp AWS Config Điều hướng đến dịch vụ AWS Config Click Settings trong sidebar Click Edit và sau đó Delete configuration recorder Xác nhận xóa bằng cách gõ delete Bước 9: Dọn dẹp CloudTrail Điều hướng đến dịch vụ CloudTrail Click Trails trong sidebar Chọn IdentityGovernanceTrail Click Delete Gõ tên trail để xác nhận xóa Checklist Dọn dẹp qua Console Để dọn dẹp có hệ thống qua AWS Console, hãy làm theo checklist này:\n✅ Checklist Dọn dẹp Lambda Functions:\nIdentityGovernanceMonitor AccessReviewGenerator ComplianceValidationEngine RiskAssessmentEngine CertificationNotifier EventBridge Rules:\nAccessCertificationSchedule ComplianceValidationSchedule RiskAssessmentSchedule Step Functions:\nAccessCertificationWorkflow ComplianceValidationWorkflow DynamoDB Tables:\nCertificationTasks OperationsLog ComplianceEvidence RiskMonitoring AuditFindings S3 Buckets:\nprivilege-analytics-[ACCOUNT-ID] compliance-reports-[ACCOUNT-ID] CloudWatch Resources:\nIdentityGovernanceRiskDashboard DailyOperationsDashboard Tất cả workshop alarms Tất cả workshop log groups SNS Topics:\nIdentityGovernanceAlerts ComplianceAlerts IAM Resources:\nWorkshop IAM roles Workshop IAM policies Workshop IAM users Workshop IAM groups IAM Identity Center:\nPermission set assignments Permission sets SSO users và groups Các Dịch vụ Khác:\nAWS Config recorder CloudTrail trail GuardDuty detector (nếu không cần) Bước 10: Xác minh Dọn dẹp Kiểm tra Tài nguyên Còn lại Kiểm tra AWS Cost Explorer để xác nhận không còn phí phát sinh Sử dụng AWS Resource Groups để tìm tagged resources Tìm kiếm tag: Project=IdentityGovernance Kiểm tra Dịch vụ Cuối cùng AWS Config: Tắt configuration recorder nếu không cần AWS Security Hub: Tắt nếu không sử dụng ở nơi khác Amazon GuardDuty: Tắt nếu không cần AWS Audit Manager: Tắt data collection Báo cáo Xác minh Dọn dẹp Tạo báo cáo tóm tắt dọn dẹp Ghi chép các tài nguyên không thể xóa Lưu ý các phí đang phát sinh Xác minh Chi phí Sau khi dọn dẹp, hãy theo dõi dashboard billing AWS để đảm bảo không có phí phát sinh từ tài nguyên còn lại.\nKhắc phục Sự cố Vấn đề Thường gặp Lỗi Phụ thuộc: Một số tài nguyên có thể có phụ thuộc. Hãy xóa tài nguyên phụ thuộc trước. Lỗi Quyền: Đảm bảo bạn có đủ quyền để xóa tất cả tài nguyên. Vấn đề Region: Đảm bảo bạn đang xóa tài nguyên ở đúng region. Dọn dẹp Thủ công Nếu dọn dẹp tự động thất bại, hãy xóa tài nguyên thủ công qua AWS Console:\nTruy cập console của từng service Tìm kiếm tài nguyên có tên chứa \u0026ldquo;IdentityGovernance\u0026rdquo;, \u0026ldquo;Compliance\u0026rdquo;, hoặc \u0026ldquo;Certification\u0026rdquo; Xóa từng tài nguyên một cách riêng lẻ Ghi chú Cuối Việc dọn dẹp này sẽ xóa TẤT CẢ tài nguyên workshop Kiểm tra kỹ trước khi chạy lệnh dọn dẹp Một số tài nguyên có thể có độ trễ ngắn trước khi bị xóa Theo dõi hóa đơn AWS để đảm bảo không có phí tiếp tục phát sinh Dọn dẹp workshop hoàn tất! 🎉\n"
},
{
	"uri": "//localhost:62814/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:62814/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]