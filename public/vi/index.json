[
{
	"uri": "//localhost:1313/vi/1-gioi-thieu/",
	"title": "1. Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Workshop Workshop này sẽ hướng dẫn bạn triển khai một hệ thống Identity Governance toàn diện với Access Certification trên AWS, bao gồm:\nAccess Governance: Quản lý và kiểm soát quyền truy cập Certification Automation: Tự động hóa quy trình xác nhận quyền Privilege Analytics: Phân tích và giám sát đặc quyền Risk Assessment: Đánh giá rủi ro bảo mật Monitoring Setup: Thiết lập giám sát liên tục Operational Procedures: Quy trình vận hành Audit Procedures: Quy trình kiểm toán Compliance Validation: Xác thực tuân thủ Kiến trúc Tổng thể AWS Services Sử dụng AWS IAM Identity Center - Centralized access management AWS IAM - Identity and access management AWS CloudTrail - Audit logging AWS Config - Compliance monitoring AWS Lambda - Automation functions Amazon EventBridge - Event-driven automation Amazon S3 - Data storage Amazon Athena - Analytics queries Amazon QuickSight - Reporting dashboard AWS Systems Manager - Operational management Lợi ích của Identity Governance 1. Bảo mật nâng cao Kiểm soát quyền truy cập chặt chẽ Phát hiện và ngăn chặn rủi ro bảo mật Giám sát liên tục các hoạt động 2. Tuân thủ quy định Đáp ứng các yêu cầu SOX, SOC2, ISO27001 Tự động hóa quy trình audit Lưu trữ bằng chứng tuân thủ 3. Hiệu quả vận hành Tự động hóa quy trình certification Giảm thiểu công việc thủ công Cải thiện quy trình quản lý Thời gian Hoàn thành Khoảng 4-6 giờ (có thể chia thành nhiều session)\nTiếp theo Chuyển sang 2. Các bước chuẩn bị để bắt đầu thiết lập môi trường.\n"
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Quản trị Danh tính với Chứng nhận Truy cập",
	"tags": [],
	"description": "",
	"content": "Workshop Quản trị Danh tính với Chứng nhận Truy cập Tổng quan Workshop Workshop toàn diện này hướng dẫn bạn triển khai Quản trị Danh tính với Chứng nhận Truy cập trên AWS, bao gồm các thực hành bảo mật nâng cao và yêu cầu tuân thủ.\nCác Module Workshop 1. Giới thiệu\r2. Các bước chuẩn bị\r3. Thiết lập Access Governance\r4. Tự động hóa Certification\r5. Phân tích Đặc quyền\r6. Đánh giá Rủi ro\r7. Thiết lập Giám sát\r8. Quy trình Vận hành\r9. Quy trình Kiểm toán\r10. Xác thực Tuân thủ\r11. Dọn dẹp Tài nguyên\rTổng quan Kiến trúc graph TB\rA[Nhà cung cấp Danh tính] --\u0026gt; B[AWS IAM Identity Center]\rB --\u0026gt; C[Quản lý Truy cập]\rC --\u0026gt; D[Phân tích Đặc quyền]\rD --\u0026gt; E[Đánh giá Rủi ro]\rE --\u0026gt; F[Chứng nhận Truy cập]\rF --\u0026gt; G[Báo cáo Tuân thủ]\rH[CloudTrail] --\u0026gt; I[Giám sát \u0026amp; Cảnh báo]\rI --\u0026gt; J[Dashboard Vận hành]\rK[Engine Tự động hóa] --\u0026gt; L[Quy trình Chứng nhận]\rL --\u0026gt; M[Hành động Khắc phục] Lợi ích Chính Bảo mật Nâng cao: Kiểm soát truy cập nghiêm ngặt và giám sát liên tục Tuân thủ Quy định: Đáp ứng yêu cầu SOX, SOC2, ISO27001 Hiệu quả Vận hành: Quy trình chứng nhận và khắc phục tự động Quản lý Rủi ro: Đánh giá và giảm thiểu rủi ro chủ động Yêu cầu Tiên quyết Tài khoản AWS với quyền Administrator Hiểu biết cơ bản về AWS IAM và Organizations Kiến thức về các framework tuân thủ Kinh nghiệm với Python và AWS CLI Thời gian Ước tính 4-6 giờ (có thể hoàn thành trong nhiều phiên)\n"
},
{
	"uri": "//localhost:1313/vi/2-cac-buoc-chuan-bi/",
	"title": "2. Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Yêu cầu Tiên quyết 1. AWS Account AWS Account với quyền Administrator Quyền tạo và quản lý IAM users, groups, và roles Quyền sử dụng IAM Identity Center 2. Kiến thức cần thiết Hiểu biết cơ bản về AWS IAM Kinh nghiệm với IAM users, groups, và policies Kiến thức về compliance frameworks (SOX, SOC2, ISO27001) Hiểu biết về Python và AWS CLI 3. Yêu cầu truy cập Trình duyệt web (Chrome, Firefox, Safari, hoặc Edge) Kết nối internet ổn định Quyền truy cập AWS Console Quyền quản trị trong AWS account Thiết lập môi trường 1. Truy cập AWS Console Mở trình duyệt web và truy cập AWS Console Đăng nhập bằng thông tin tài khoản AWS của bạn Đảm bảo bạn có quyền Administrator 2. Xác minh quyền tài khoản Trong AWS Console, click vào tên tài khoản ở góc trên bên phải Chọn My Account để xem chi tiết tài khoản Xác minh bạn có quyền truy cập: AWS IAM service IAM Identity Center Quyền quản trị 3. Tạo S3 Bucket cho lưu trữ dữ liệu Điều hướng đến dịch vụ S3 trong AWS Console Click Create bucket Tạo bucket đầu tiên: Bucket name: privilege-analytics-[YOUR-ACCOUNT-ID] Region: Chọn region ưa thích Giữ cài đặt mặc định Click Create bucket Tạo bucket thứ hai: Bucket name: compliance-reports-[YOUR-ACCOUNT-ID] Region: Giống bucket đầu tiên Giữ cài đặt mặc định Click Create bucket Chuẩn bị Infrastructure 1. Kích hoạt AWS CloudTrail Điều hướng đến dịch vụ CloudTrail Click Create trail Cấu hình trail: Trail name: IdentityGovernanceTrail S3 bucket: Chọn bucket privilege-analytics-[YOUR-ACCOUNT-ID] Log file prefix: cloudtrail-logs/ Click Create trail 2. Kích hoạt AWS Config Điều hướng đến dịch vụ AWS Config Click Get started Cấu hình: Resource types: Chọn All resources S3 bucket: Tạo bucket mới hoặc sử dụng có sẵn SNS topic: Tạo topic mới Click Next và Confirm 3. Kích hoạt Amazon GuardDuty Điều hướng đến dịch vụ GuardDuty Click Get Started Click Enable GuardDuty Xem lại quyền dịch vụ và click Enable 4. Tạo IAM Roles cần thiết Điều hướng đến dịch vụ IAM Click Roles trong sidebar Click Create role Tạo role cho Lambda: Trusted entity: AWS service Service: Lambda Role name: IdentityGovernanceLambdaRole Policies: Attach AWSLambdaBasicExecutionRole 5. Tạo DynamoDB Tables Điều hướng đến dịch vụ DynamoDB Click Create table Tạo bảng đầu tiên: Table name: OperationsLog Partition key: operation_id (String) Billing mode: On-demand Click Create table Tạo bảng thứ hai: Table name: CertificationTasks Partition key: task_id (String) Billing mode: On-demand Click Create table Xác thực thiết lập 1. Kiểm tra các dịch vụ đã kích hoạt CloudTrail: Vào CloudTrail console, xác nhận trail đã được tạo và đang hoạt động S3: Vào S3 console, xác nhận 2 bucket đã được tạo Config: Vào Config console, xác nhận service đang ghi lại resources GuardDuty: Vào GuardDuty console, xác nhận detector đang hoạt động DynamoDB: Vào DynamoDB console, xác nhận 2 table đã được tạo 2. Kiểm tra quyền truy cập Vào IAM console Click Users và xác nhận user hiện tại có quyền cần thiết Click Roles và xác nhận các role đã được tạo Kiểm tra Organizations service để đảm bảo có quyền quản lý Kết quả Mong đợi Sau khi hoàn thành các bước chuẩn bị:\n✅ AWS Account được cấu hình đúng ✅ Các AWS services cần thiết đã được enable ✅ Base infrastructure đã được deploy ✅ Permissions đã được validate ✅ Workshop materials đã sẵn sàng Tiếp theo Chuyển sang 3. Thiết lập Access Governance để bắt đầu triển khai hệ thống.\n"
},
{
	"uri": "//localhost:1313/vi/3-thiet-lap-access-governance/",
	"title": "3. Thiết lập Access Governance",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập nền tảng quản lý truy cập tập trung với AWS IAM Identity Center và IAM.\nKiến trúc Bước 1: Thiết lập IAM Foundation 1.1 Tạo IAM Groups Điều hướng đến dịch vụ IAM trong AWS Console Click User groups trong sidebar Click Create group Nhập thông tin group: Group name: SecurityAuditors Description: Security auditing team Click Create group 1.2 Tạo IAM Policies Click Policies trong sidebar Click Create policy Sử dụng JSON editor để tạo custom policy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:Get*\u0026#34;, \u0026#34;iam:List*\u0026#34;, \u0026#34;iam:Generate*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudtrail:Get*\u0026#34;, \u0026#34;cloudtrail:List*\u0026#34;, \u0026#34;cloudtrail:Describe*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Đặt tên policy: SecurityAuditPolicy Click Create policy Bước 2: Cấu hình IAM Identity Center 2.1 Kích hoạt IAM Identity Center Tìm kiếm và mở IAM Identity Center trong AWS Console Click Enable để kích hoạt IAM Identity Center Chọn region để lưu trữ identity store Chọn Use IAM Identity Center as my identity source 2.2 Tạo Permission Sets Trong IAM Identity Center, click Permission sets ở sidebar Click Create permission set Chọn Predefined permission set Chọn SecurityAudit từ dropdown Nhập thông tin: Name: SecurityAuditor Description: Read-only access for security auditing Session duration: 8 hours Click Next và Create Bước 3: Thiết lập Identity Store 3.1 Tạo Users và Groups Trong IAM Identity Center, click Users ở sidebar Click Add user Nhập thông tin user: Username: security-auditor Email: auditor@company.com First name: Security Last name: Auditor Click Next và Add user 3.2 Tạo Groups Click Groups ở sidebar Click Create group Nhập: Group name: SecurityAuditors Description: Security auditing team Click Create group 3.3 Gán Users vào Groups Chọn group SecurityAuditors Click Add users to group Chọn user security-auditor Click Add users Bước 4: Gán Quyền Truy cập 4.1 Gán Permission Sets cho Accounts Click AWS accounts ở sidebar Chọn account cần assign quyền Click Assign users or groups Chọn Groups tab Chọn group SecurityAuditors Click Next Chọn permission set SecurityAuditor Click Next và Submit Kết quả Mong đợi Sau khi hoàn thành bước này, bạn sẽ có:\n✅ IAM Groups và Policies được cấu hình ✅ IAM Identity Center được kích hoạt ✅ Permission Sets cho các vai trò governance ✅ Identity Store với groups và users ✅ Các assignment quyền được cấu hình Tiếp theo Chuyển sang 4. Tự động hóa Certification để thiết lập quy trình tự động hóa certification.\n"
},
{
	"uri": "//localhost:1313/vi/4-tu-dong-hoa-certification/",
	"title": "4. Tự động hóa Certification",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Tự động hóa quy trình access certification để đảm bảo quyền truy cập được xem xét định kỳ và tuân thủ các yêu cầu bảo mật.\nKiến trúc Automation graph TB A[EventBridge Schedule] --\u0026gt; B[Lambda Trigger] B --\u0026gt; C[Access Review Generator] C --\u0026gt; D[Certification Workflow] D --\u0026gt; E[Manager Approval] E --\u0026gt; F[Remediation Actions] F --\u0026gt; G[Compliance Report] Bước 1: Thiết lập EventBridge Scheduler 1.1 Tạo Scheduled Rule Mở Amazon EventBridge trong AWS Console Click Rules ở sidebar Click Create rule Nhập thông tin rule: Name: AccessCertificationSchedule Description: Quarterly access certification review Event bus: default Trong Define pattern, chọn Schedule Chọn Fixed rate every và nhập 90 days Click Next Bước 2: Thiết lập Lambda Function 2.1 Tạo Lambda Function Mở AWS Lambda trong console Click Create function Chọn Author from scratch Nhập thông tin function: Function name: AccessCertificationTrigger Runtime: Python 3.9 Architecture: x86_64 Click Create function 2.2 Cấu hình Code cho Lambda Function Trong tab Code, thay thế code mặc định Upload logic code cho certification Click Deploy để lưu thay đổi 2.3 Thiết lập Environment Variables Chuyển đến tab Configuration Click Environment variables Click Edit Thêm các biến cần thiết: S3_BUCKET: certification-data-bucket SNS_TOPIC: certification-notifications Bước 3: Quy trình Step Functions 3.1 Tạo State Machine Mở AWS Step Functions trong console Click Create state machine Chọn Write your workflow in code Chọn loại Standard Nhập định nghĩa workflow ở định dạng JSON Đặt tên state machine: AccessCertificationWorkflow 3.2 Cấu hình IAM Role Tạo hoặc chọn IAM role cho Step Functions Đảm bảo nó có quyền invoke Lambda functions Click Create state machine Bước 4: Kết nối EventBridge với Lambda 4.1 Thêm Lambda Target vào EventBridge Rule Quay lại EventBridge console Chọn rule AccessCertificationSchedule Click tab Targets Click Add target Cấu hình target: Target type: AWS service Service: Lambda function Function: AccessCertificationTrigger Click Add rồi Update rule Bước 5: Kiểm tra Tự động hóa 5.1 Thực thi Kiểm tra Thủ công Trong EventBridge, chọn rule của bạn Click Actions → Test rule Giám sát thực thi Lambda function trong CloudWatch Logs Kết quả Mong đợi Sau khi hoàn thành:\n✅ Tự động hóa đánh giá truy cập hàng quý ✅ EventBridge scheduled triggers ✅ Lambda function xử lý ✅ Step Functions workflow orchestration ✅ Audit trail và giám sát Tiếp theo Chuyển sang 5. Phân tích Đặc quyền để thiết lập phân tích đặc quyền.\n"
},
{
	"uri": "//localhost:1313/vi/5-phan-tich-dac-quyen/",
	"title": "5. Phân tích Đặc quyền",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Phân tích và giám sát việc sử dụng đặc quyền để phát hiện rủi ro bảo mật, quyền thừa, và các pattern bất thường.\nKiến trúc Analytics graph TB A[CloudTrail Logs] --\u0026gt; B[S3 Data Lake] C[Config Data] --\u0026gt; B D[IAM Data] --\u0026gt; B B --\u0026gt; E[Athena Queries] E --\u0026gt; F[Analytics Engine] F --\u0026gt; G[Risk Scoring] G --\u0026gt; H[QuickSight Dashboard] F --\u0026gt; I[Anomaly Detection] I --\u0026gt; J[Alerts] Bước 1: Data Collection Setup 1.1 CloudTrail Configuration AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Privilege Analytics Data Collection\u0026#39; Resources: PrivilegeAnalyticsTrail: Type: AWS::CloudTrail::Trail Properties: TrailName: PrivilegeAnalyticsTrail S3BucketName: !Ref AnalyticsDataBucket S3KeyPrefix: \u0026#39;cloudtrail-logs/\u0026#39; IncludeGlobalServiceEvents: true IsMultiRegionTrail: true EnableLogFileValidation: true Bước 2: Athena Queries cho Analytics 2.1 Create Athena Tables -- Create table for privilege analytics data CREATE EXTERNAL TABLE privilege_analytics ( collection_timestamp string, iam_data struct\u0026lt; users: array\u0026lt;struct\u0026lt; username: string, user_id: string, arn: string, create_date: string, risk_score: double \u0026gt;\u0026gt; \u0026gt; ) STORED AS JSON LOCATION \u0026#39;s3://privilege-analytics-REGION/analytics-data/\u0026#39; 2.2 Analytics Queries -- Query 1: High-risk users SELECT user.username, user.risk_score, cardinality(user.attached_policies) as policy_count, user.last_activity FROM privilege_analytics CROSS JOIN UNNEST(iam_data.users) AS t(user) WHERE user.risk_score \u0026gt; 7.0 ORDER BY user.risk_score DESC; Bước 3: Risk Scoring Engine 3.1 Risk Calculation Lambda import boto3 import json import math from datetime import datetime, timedelta class RiskScoringEngine: def __init__(self): self.weights = { \u0026#39;privilege_level\u0026#39;: 0.3, \u0026#39;usage_frequency\u0026#39;: 0.2, \u0026#39;last_activity\u0026#39;: 0.2, \u0026#39;policy_violations\u0026#39;: 0.15, \u0026#39;external_access\u0026#39;: 0.15 } def calculate_user_risk_score(self, user_data, policies, groups, activity): \u0026#34;\u0026#34;\u0026#34;Calculate risk score for a user (0-10 scale)\u0026#34;\u0026#34;\u0026#34; scores = { \u0026#39;privilege_level\u0026#39;: self.score_privilege_level(policies, groups), \u0026#39;usage_frequency\u0026#39;: self.score_usage_frequency(activity), \u0026#39;last_activity\u0026#39;: self.score_last_activity(user_data.get(\u0026#39;PasswordLastUsed\u0026#39;)), \u0026#39;policy_violations\u0026#39;: self.score_policy_violations(policies), \u0026#39;external_access\u0026#39;: self.score_external_access(activity) } # Calculate weighted score total_score = sum(scores[factor] * self.weights[factor] for factor in scores) return { \u0026#39;total_score\u0026#39;: round(total_score, 2), \u0026#39;factor_scores\u0026#39;: scores, \u0026#39;risk_level\u0026#39;: self.get_risk_level(total_score) } Kết quả Mong đợi Sau khi hoàn thành:\n✅ Automated privilege data collection ✅ Risk scoring for users and roles ✅ Athena queries for analytics ✅ QuickSight dashboard for visualization ✅ Anomaly detection and alerting Tiếp theo Chuyển sang 6. Đánh giá Rủi ro để thiết lập đánh giá rủi ro toàn diện.\n"
},
{
	"uri": "//localhost:1313/vi/6-danh-gia-rui-ro/",
	"title": "6. Đánh giá Rủi ro",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập hệ thống đánh giá rủi ro toàn diện để phát hiện, phân tích và ưu tiên các rủi ro bảo mật liên quan đến identity và access management.\nKiến trúc Risk Assessment graph TB A[Data Sources] --\u0026gt; B[Risk Engine] B --\u0026gt; C[Risk Scoring] C --\u0026gt; D[Risk Classification] D --\u0026gt; E[Risk Prioritization] E --\u0026gt; F[Remediation Recommendations] F --\u0026gt; G[Risk Dashboard] H[Threat Intelligence] --\u0026gt; B I[Compliance Rules] --\u0026gt; B J[Business Context] --\u0026gt; B Bước 1: Risk Assessment Framework 1.1 Risk Categories Definition import boto3 import json from datetime import datetime, timedelta from enum import Enum class RiskCategory(Enum): PRIVILEGE_ESCALATION = \u0026#34;privilege_escalation\u0026#34; UNAUTHORIZED_ACCESS = \u0026#34;unauthorized_access\u0026#34; DATA_EXPOSURE = \u0026#34;data_exposure\u0026#34; COMPLIANCE_VIOLATION = \u0026#34;compliance_violation\u0026#34; OPERATIONAL_RISK = \u0026#34;operational_risk\u0026#34; class RiskSeverity(Enum): CRITICAL = 10 HIGH = 8 MEDIUM = 5 LOW = 3 MINIMAL = 1 class RiskAssessmentFramework: def __init__(self): self.risk_rules = self.load_risk_rules() self.threat_intelligence = self.load_threat_intelligence() self.compliance_requirements = self.load_compliance_requirements() Bước 2: Threat Intelligence Integration 2.1 Threat Intelligence Collector import requests import boto3 from datetime import datetime class ThreatIntelligenceCollector: def __init__(self): self.threat_feeds = [ { \u0026#34;name\u0026#34;: \u0026#34;AWS Security Bulletins\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://aws.amazon.com/security/security-bulletins/\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;aws_security\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;MITRE ATT\u0026amp;CK\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://attack.mitre.org/\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;attack_patterns\u0026#34; } ] def collect_threat_intelligence(self): \u0026#34;\u0026#34;\u0026#34;Collect threat intelligence from various sources\u0026#34;\u0026#34;\u0026#34; intelligence_data = { \u0026#34;collection_timestamp\u0026#34;: datetime.now().isoformat(), \u0026#34;threat_indicators\u0026#34;: [], \u0026#34;attack_patterns\u0026#34;: [], \u0026#34;vulnerabilities\u0026#34;: [] } return intelligence_data Bước 3: Risk Monitoring và Alerting 3.1 Real-time Risk Monitor import boto3 import json from datetime import datetime class RealTimeRiskMonitor: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.risk_table = self.dynamodb.Table(\u0026#39;RiskMonitoring\u0026#39;) def process_security_event(self, event): \u0026#34;\u0026#34;\u0026#34;Process incoming security events for risk assessment\u0026#34;\u0026#34;\u0026#34; event_type = event.get(\u0026#39;eventName\u0026#39;, \u0026#39;\u0026#39;) source_ip = event.get(\u0026#39;sourceIPAddress\u0026#39;, \u0026#39;\u0026#39;) user_identity = event.get(\u0026#39;userIdentity\u0026#39;, {}) # Analyze event for risk indicators risk_score = self.calculate_event_risk_score(event) if risk_score \u0026gt;= 7: # High risk threshold self.handle_high_risk_event(event, risk_score) return { \u0026#39;event_processed\u0026#39;: True, \u0026#39;risk_score\u0026#39;: risk_score, \u0026#39;action_taken\u0026#39;: risk_score \u0026gt;= 7 } Bước 4: Risk Dashboard 4.1 CloudFormation cho Dashboard Resources AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Risk Assessment Dashboard Resources\u0026#39; Resources: RiskDashboard: Type: AWS::CloudWatch::Dashboard Properties: DashboardName: IdentityGovernanceRiskDashboard DashboardBody: !Sub | { \u0026#34;widgets\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;metric\u0026#34;, \u0026#34;x\u0026#34;: 0, \u0026#34;y\u0026#34;: 0, \u0026#34;width\u0026#34;: 12, \u0026#34;height\u0026#34;: 6, \u0026#34;properties\u0026#34;: { \u0026#34;metrics\u0026#34;: [ [ \u0026#34;IdentityGovernance/Risk\u0026#34;, \u0026#34;RiskScore\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;HighRiskEvents\u0026#34; ] ], \u0026#34;period\u0026#34;: 300, \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;${AWS::Region}\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Risk Metrics Overview\u0026#34; } } ] } Kết quả Mong đợi Sau khi hoàn thành:\n✅ Comprehensive risk assessment framework ✅ Real-time risk monitoring ✅ Threat intelligence integration ✅ Automated alerting system ✅ Risk dashboard and metrics ✅ Prioritized remediation plans Tiếp theo Chuyển sang 7. Thiết lập Giám sát để thiết lập giám sát toàn diện.\n"
},
{
	"uri": "//localhost:1313/vi/7-thiet-lap-giam-sat/",
	"title": "7. Thiết lập Giám sát",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập hệ thống giám sát toàn diện để theo dõi liên tục các hoạt động identity governance, phát hiện anomalies, và đảm bảo compliance.\nKiến trúc Monitoring graph TB A[CloudTrail] --\u0026gt; B[CloudWatch Logs] C[Config] --\u0026gt; B D[GuardDuty] --\u0026gt; B B --\u0026gt; E[CloudWatch Metrics] E --\u0026gt; F[CloudWatch Alarms] F --\u0026gt; G[SNS Notifications] E --\u0026gt; H[Custom Dashboard] B --\u0026gt; I[Log Analytics] I --\u0026gt; J[Anomaly Detection] Bước 1: CloudWatch Monitoring Setup 1.1 Custom Metrics và Alarms AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Identity Governance Monitoring Infrastructure\u0026#39; Parameters: NotificationEmail: Type: String Description: Email for monitoring alerts Default: security-team@company.com Resources: # SNS Topic for Alerts MonitoringAlertsTopic: Type: AWS::SNS::Topic Properties: TopicName: IdentityGovernanceAlerts DisplayName: Identity Governance Monitoring Alerts Subscription: - Protocol: email Endpoint: !Ref NotificationEmail # CloudWatch Log Group for Identity Events IdentityLogGroup: Type: AWS::Logs::LogGroup Properties: LogGroupName: /aws/identity-governance/events RetentionInDays: 365 1.2 Monitoring Lambda Function import boto3 import json import os from datetime import datetime, timedelta class IdentityGovernanceMonitor: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.logs_client = boto3.client(\u0026#39;logs\u0026#39;) self.iam_client = boto3.client(\u0026#39;iam\u0026#39;) self.sso_client = boto3.client(\u0026#39;sso-admin\u0026#39;) self.sns_client = boto3.client(\u0026#39;sns\u0026#39;) self.log_group = os.environ.get(\u0026#39;LOG_GROUP_NAME\u0026#39;, \u0026#39;/aws/identity-governance/events\u0026#39;) self.sns_topic = os.environ.get(\u0026#39;SNS_TOPIC_ARN\u0026#39;) def monitor_identity_events(self): \u0026#34;\u0026#34;\u0026#34;Monitor and analyze identity-related events\u0026#34;\u0026#34;\u0026#34; monitoring_results = { \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;metrics_collected\u0026#39;: [], \u0026#39;anomalies_detected\u0026#39;: [], \u0026#39;alerts_sent\u0026#39;: [] } return monitoring_results Bước 2: Log Analytics Setup 2.1 CloudWatch Insights Queries -- Query 1: Failed login attempts by user fields @timestamp, sourceIPAddress, userIdentity.userName, errorMessage | filter eventName = \u0026#34;ConsoleLogin\u0026#34; and errorCode != \u0026#34;Success\u0026#34; | stats count() by userIdentity.userName | sort count desc -- Query 2: Privilege escalation events fields @timestamp, eventName, userIdentity.userName, sourceIPAddress | filter eventName in [\u0026#34;AttachUserPolicy\u0026#34;, \u0026#34;CreateRole\u0026#34;, \u0026#34;PutUserPolicy\u0026#34;] | sort @timestamp desc -- Query 3: Off-hours access patterns fields @timestamp, eventName, userIdentity.userName, sourceIPAddress | filter @timestamp like /T(0[0-5]|2[2-3])/ | stats count() by userIdentity.userName | sort count desc 2.2 Automated Log Analysis import boto3 import json from datetime import datetime, timedelta class LogAnalyzer: def __init__(self): self.logs_client = boto3.client(\u0026#39;logs\u0026#39;) self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) def analyze_security_logs(self): \u0026#34;\u0026#34;\u0026#34;Analyze security logs for patterns and anomalies\u0026#34;\u0026#34;\u0026#34; analysis_results = { \u0026#39;analysis_timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;patterns_detected\u0026#39;: [], \u0026#39;recommendations\u0026#39;: [] } return analysis_results Bước 3: Deployment Script 3.1 Complete Monitoring Deployment #!/bin/bash echo \u0026#34;Deploying Identity Governance Monitoring...\u0026#34; # Deploy CloudFormation stack aws cloudformation deploy \\ --template-file monitoring-infrastructure.yaml \\ --stack-name identity-governance-monitoring \\ --parameter-overrides NotificationEmail=security-team@company.com \\ --capabilities CAPABILITY_IAM # Create Lambda functions echo \u0026#34;Creating monitoring Lambda functions...\u0026#34; # Package and deploy monitoring function zip -r monitoring-function.zip monitoring_lambda.py aws lambda create-function \\ --function-name IdentityGovernanceMonitor \\ --runtime python3.9 \\ --role arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/IdentityGovernanceMonitoringRole \\ --handler monitoring_lambda.lambda_handler \\ --zip-file fileb://monitoring-function.zip echo \u0026#34;Monitoring setup completed successfully!\u0026#34; Kết quả Mong đợi Sau khi hoàn thành:\n✅ Real-time monitoring của identity events ✅ Custom CloudWatch metrics và alarms ✅ Automated log analysis ✅ Anomaly detection và alerting ✅ Comprehensive monitoring dashboard ✅ Scheduled monitoring tasks Tiếp theo Chuyển sang 8. Quy trình Vận hành để thiết lập quy trình vận hành.\n"
},
{
	"uri": "//localhost:1313/vi/8-quy-trinh-van-hanh/",
	"title": "8. Quy trình Vận hành",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập các quy trình vận hành chuẩn hóa để quản lý identity governance một cách hiệu quả, đảm bảo tính nhất quán và tuân thủ.\nQuy trình Tổng quan graph TB A[Daily Operations] --\u0026gt; B[Weekly Reviews] B --\u0026gt; C[Monthly Assessments] C --\u0026gt; D[Quarterly Certifications] E[Incident Response] --\u0026gt; F[Investigation] F --\u0026gt; G[Remediation] G --\u0026gt; H[Documentation] I[Change Management] --\u0026gt; J[Approval Process] J --\u0026gt; K[Implementation] K --\u0026gt; L[Validation] Bước 1: Daily Operations Procedures 1.1 Daily Monitoring Checklist import boto3 import json from datetime import datetime, timedelta class DailyOperations: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.operations_table = self.dynamodb.Table(\u0026#39;OperationsLog\u0026#39;) def execute_daily_checklist(self): \u0026#34;\u0026#34;\u0026#34;Execute daily operational checklist\u0026#34;\u0026#34;\u0026#34; checklist_results = { \u0026#39;date\u0026#39;: datetime.now().strftime(\u0026#39;%Y-%m-%d\u0026#39;), \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;checks_performed\u0026#39;: [], \u0026#39;issues_found\u0026#39;: [], \u0026#39;actions_taken\u0026#39;: [] } # Daily checks checks = [ (\u0026#39;Monitor Failed Logins\u0026#39;, self.check_failed_logins), (\u0026#39;Review High-Risk Alerts\u0026#39;, self.review_high_risk_alerts), (\u0026#39;Check System Health\u0026#39;, self.check_system_health), (\u0026#39;Validate Backup Status\u0026#39;, self.validate_backup_status), (\u0026#39;Review Pending Certifications\u0026#39;, self.review_pending_certifications) ] return checklist_results 1.2 Standard Operating Procedures (SOPs) # Identity Governance Standard Operating Procedures ## SOP-001: Daily Monitoring Procedures ### Purpose Ensure daily monitoring of identity governance systems and prompt response to issues. ### Scope All identity governance monitoring activities performed daily. ### Procedure 1. **Morning Health Check (9:00 AM)** - Review CloudWatch dashboard - Check for active alarms - Verify system availability 2. **Failed Login Review (10:00 AM)** - Analyze failed login patterns - Investigate suspicious activities - Document findings 3. **Risk Alert Review (2:00 PM)** - Review high-risk alerts - Prioritize investigations - Assign remediation tasks 4. **End-of-Day Summary (5:00 PM)** - Generate daily report - Update incident tracking - Plan next day activities ### Escalation Criteria - Critical alarms: Immediate escalation - High-risk events: 2-hour response time - System outages: Immediate escalation Bước 2: Weekly Review Procedures 2.1 Weekly Assessment Script import boto3 import json from datetime import datetime, timedelta class WeeklyReview: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.athena_client = boto3.client(\u0026#39;athena\u0026#39;) def execute_weekly_review(self): \u0026#34;\u0026#34;\u0026#34;Execute weekly identity governance review\u0026#34;\u0026#34;\u0026#34; review_results = { \u0026#39;week_ending\u0026#39;: datetime.now().strftime(\u0026#39;%Y-%m-%d\u0026#39;), \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;metrics_summary\u0026#39;: {}, \u0026#39;trend_analysis\u0026#39;: {}, \u0026#39;recommendations\u0026#39;: [] } # Collect weekly metrics review_results[\u0026#39;metrics_summary\u0026#39;] = self.collect_weekly_metrics() # Perform trend analysis review_results[\u0026#39;trend_analysis\u0026#39;] = self.analyze_trends() # Generate recommendations review_results[\u0026#39;recommendations\u0026#39;] = self.generate_weekly_recommendations() return review_results Bước 3: Runbook Templates 3.1 Incident Response Runbook # Incident Response Runbook Template incident_response: incident_id: \u0026#34;INC-{YYYY-MM-DD}-{###}\u0026#34; classification: severity: \u0026#34;[P1|P2|P3|P4]\u0026#34; category: \u0026#34;[Security|Availability|Performance|Compliance]\u0026#34; impact: \u0026#34;[Critical|High|Medium|Low]\u0026#34; initial_response: - step: \u0026#34;Acknowledge incident\u0026#34; owner: \u0026#34;On-call engineer\u0026#34; sla: \u0026#34;15 minutes\u0026#34; - step: \u0026#34;Assess severity and impact\u0026#34; owner: \u0026#34;Incident commander\u0026#34; sla: \u0026#34;30 minutes\u0026#34; - step: \u0026#34;Activate response team\u0026#34; owner: \u0026#34;Incident commander\u0026#34; sla: \u0026#34;30 minutes\u0026#34; investigation: - step: \u0026#34;Collect initial evidence\u0026#34; actions: - \u0026#34;Export relevant CloudTrail logs\u0026#34; - \u0026#34;Capture system state\u0026#34; - \u0026#34;Document timeline\u0026#34; - step: \u0026#34;Analyze root cause\u0026#34; actions: - \u0026#34;Review logs and metrics\u0026#34; - \u0026#34;Interview stakeholders\u0026#34; - \u0026#34;Test hypotheses\u0026#34; Kết quả Mong đợi Sau khi hoàn thành:\n✅ Standardized daily operations procedures ✅ Weekly review and trend analysis ✅ Incident response runbooks ✅ Change management processes ✅ Operational documentation ✅ Automated operational tasks Tiếp theo Chuyển sang 9. Quy trình Kiểm toán để thiết lập quy trình kiểm toán.\n"
},
{
	"uri": "//localhost:1313/vi/9-quy-trinh-kiem-toan/",
	"title": "9. Quy trình Kiểm toán",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Thiết lập quy trình kiểm toán toàn diện để đảm bảo tuân thủ các yêu cầu bảo mật, pháp lý và nội bộ trong quản lý identity governance.\nKiến trúc Audit graph TB A[Audit Planning] --\u0026gt; B[Evidence Collection] B --\u0026gt; C[Analysis \u0026amp; Testing] C --\u0026gt; D[Findings Documentation] D --\u0026gt; E[Remediation Tracking] E --\u0026gt; F[Audit Reporting] G[Continuous Monitoring] --\u0026gt; H[Automated Controls Testing] H --\u0026gt; I[Exception Reporting] I --\u0026gt; J[Management Dashboard] Bước 1: Audit Framework Setup 1.1 Audit Control Matrix import boto3 import json from datetime import datetime, timedelta from enum import Enum class AuditFramework: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.athena_client = boto3.client(\u0026#39;athena\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.audit_table = self.dynamodb.Table(\u0026#39;AuditFindings\u0026#39;) # Define audit controls self.audit_controls = self.load_audit_controls() def load_audit_controls(self): \u0026#34;\u0026#34;\u0026#34;Load comprehensive audit control matrix\u0026#34;\u0026#34;\u0026#34; return { \u0026#34;access_management\u0026#34;: [ { \u0026#34;control_id\u0026#34;: \u0026#34;AM-001\u0026#34;, \u0026#34;control_name\u0026#34;: \u0026#34;User Access Provisioning\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Verify user access is properly authorized and documented\u0026#34;, \u0026#34;frequency\u0026#34;: \u0026#34;Quarterly\u0026#34;, \u0026#34;test_procedure\u0026#34;: self.test_user_provisioning, \u0026#34;compliance_frameworks\u0026#34;: [\u0026#34;SOX\u0026#34;, \u0026#34;SOC2\u0026#34;, \u0026#34;ISO27001\u0026#34;] } ] } Bước 2: Continuous Audit Monitoring 2.1 Real-time Compliance Monitoring import boto3 import json from datetime import datetime class ContinuousAuditMonitor: def __init__(self): self.config_client = boto3.client(\u0026#39;config\u0026#39;) self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) def monitor_compliance_rules(self): \u0026#34;\u0026#34;\u0026#34;Monitor AWS Config compliance rules\u0026#34;\u0026#34;\u0026#34; monitoring_results = { \u0026#34;timestamp\u0026#34;: datetime.now().isoformat(), \u0026#34;compliance_summary\u0026#34;: {}, \u0026#34;non_compliant_resources\u0026#34;: [], \u0026#34;alerts_sent\u0026#34;: [] } # Get compliance summary response = self.config_client.get_compliance_summary_by_config_rule() for rule_summary in response[\u0026#39;ComplianceSummary\u0026#39;]: rule_name = rule_summary[\u0026#39;ConfigRuleName\u0026#39;] compliance_summary = rule_summary[\u0026#39;ComplianceSummary\u0026#39;] monitoring_results[\u0026#34;compliance_summary\u0026#34;][rule_name] = { \u0026#34;compliant\u0026#34;: compliance_summary.get(\u0026#39;CompliantResourceCount\u0026#39;, {}).get(\u0026#39;CappedCount\u0026#39;, 0), \u0026#34;non_compliant\u0026#34;: compliance_summary.get(\u0026#39;NonCompliantResourceCount\u0026#39;, {}).get(\u0026#39;CappedCount\u0026#39;, 0) } return monitoring_results Bước 3: Audit Report Generation 3.1 Automated Report Generator import boto3 import json from datetime import datetime, timedelta from jinja2 import Template class AuditReportGenerator: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.ses_client = boto3.client(\u0026#39;ses\u0026#39;) def generate_monthly_audit_report(self): \u0026#34;\u0026#34;\u0026#34;Generate comprehensive monthly audit report\u0026#34;\u0026#34;\u0026#34; report_data = { \u0026#34;report_period\u0026#34;: datetime.now().strftime(\u0026#34;%Y-%m\u0026#34;), \u0026#34;generated_date\u0026#34;: datetime.now().isoformat(), \u0026#34;executive_summary\u0026#34;: {}, \u0026#34;control_effectiveness\u0026#34;: {}, \u0026#34;findings_summary\u0026#34;: {}, \u0026#34;trend_analysis\u0026#34;: {}, \u0026#34;recommendations\u0026#34;: [] } # Collect audit data from S3 audit_data = self.collect_monthly_audit_data() # Generate report sections report_data[\u0026#34;executive_summary\u0026#34;] = self.generate_executive_summary(audit_data) return report_data Kết quả Mong đợi Sau khi hoàn thành:\n✅ Comprehensive audit framework ✅ Automated control testing ✅ Continuous compliance monitoring ✅ Detailed audit reports ✅ Finding tracking and remediation ✅ Stakeholder communication Tiếp theo Chuyển sang 10. Xác thực Tuân thủ để hoàn thành workshop.\n"
},
{
	"uri": "//localhost:1313/vi/10-xac-thuc-tuan-thu/",
	"title": "10. Xác thực Tuân thủ",
	"tags": [],
	"description": "",
	"content": "Mục tiêu Xác thực và duy trì tuân thủ các framework bảo mật và quy định pháp lý thông qua identity governance, đảm bảo tổ chức đáp ứng các yêu cầu SOX, SOC2, ISO27001, PCI-DSS và các tiêu chuẩn khác.\nCompliance Framework Mapping graph TB A[Identity Governance Controls] --\u0026gt; B[SOX Compliance] A --\u0026gt; C[SOC2 Type II] A --\u0026gt; D[ISO 27001] A --\u0026gt; E[PCI-DSS] A --\u0026gt; F[NIST Framework] B --\u0026gt; G[Audit Evidence] C --\u0026gt; G D --\u0026gt; G E --\u0026gt; G F --\u0026gt; G G --\u0026gt; H[Compliance Dashboard] G --\u0026gt; I[Regulatory Reports] Bước 1: Compliance Framework Implementation 1.1 Multi-Framework Compliance Engine import boto3 import json from datetime import datetime, timedelta from enum import Enum class ComplianceFramework(Enum): SOX = \u0026#34;sox\u0026#34; SOC2 = \u0026#34;soc2\u0026#34; ISO27001 = \u0026#34;iso27001\u0026#34; PCI_DSS = \u0026#34;pci_dss\u0026#34; NIST = \u0026#34;nist\u0026#34; GDPR = \u0026#34;gdpr\u0026#34; class ComplianceValidationEngine: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.compliance_table = self.dynamodb.Table(\u0026#39;ComplianceEvidence\u0026#39;) # Load compliance requirements self.compliance_requirements = self.load_compliance_requirements() def load_compliance_requirements(self): \u0026#34;\u0026#34;\u0026#34;Load compliance requirements for each framework\u0026#34;\u0026#34;\u0026#34; return { ComplianceFramework.SOX: { \u0026#34;name\u0026#34;: \u0026#34;Sarbanes-Oxley Act\u0026#34;, \u0026#34;requirements\u0026#34;: [ { \u0026#34;requirement_id\u0026#34;: \u0026#34;SOX-302\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Corporate Responsibility for Financial Reports\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Ensure proper access controls for financial systems\u0026#34;, \u0026#34;controls\u0026#34;: [\u0026#34;access_segregation\u0026#34;, \u0026#34;approval_workflows\u0026#34;, \u0026#34;audit_trails\u0026#34;] } ] } } Bước 2: Compliance Dashboard 2.1 Real-time Compliance Monitoring import boto3 import json from datetime import datetime, timedelta class ComplianceDashboard: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) def generate_compliance_metrics(self): \u0026#34;\u0026#34;\u0026#34;Generate real-time compliance metrics\u0026#34;\u0026#34;\u0026#34; metrics = { \u0026#34;timestamp\u0026#34;: datetime.now().isoformat(), \u0026#34;overall_compliance_score\u0026#34;: 0, \u0026#34;framework_scores\u0026#34;: {}, \u0026#34;trending_metrics\u0026#34;: {}, \u0026#34;risk_indicators\u0026#34;: {} } # Calculate compliance scores for each framework frameworks = [\u0026#39;sox\u0026#39;, \u0026#39;soc2\u0026#39;, \u0026#39;iso27001\u0026#39;, \u0026#39;pci_dss\u0026#39;] for framework in frameworks: score = self.calculate_framework_score(framework) metrics[\u0026#34;framework_scores\u0026#34;][framework] = score # Calculate overall score metrics[\u0026#34;overall_compliance_score\u0026#34;] = sum(metrics[\u0026#34;framework_scores\u0026#34;].values()) / len(frameworks) return metrics Bước 3: Regulatory Reporting 3.1 Automated Compliance Reports # CloudFormation template for compliance reporting AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Compliance Reporting Infrastructure\u0026#39; Resources: ComplianceReportingBucket: Type: AWS::S3::Bucket Properties: BucketName: !Sub \u0026#39;compliance-reports-${AWS::AccountId}\u0026#39; VersioningConfiguration: Status: Enabled LifecycleConfiguration: Rules: - Id: RetainReports Status: Enabled ExpirationInDays: 2555 # 7 years retention QuarterlyComplianceReport: Type: AWS::Events::Rule Properties: Name: QuarterlyComplianceReporting Description: Generate quarterly compliance reports ScheduleExpression: \u0026#34;cron(0 9 1 */3 *)\u0026#34; # First day of quarter at 9 AM State: ENABLED Bước 4: Deployment và Validation 4.1 Complete Deployment Script #!/bin/bash echo \u0026#34;Deploying Identity Governance Compliance Validation...\u0026#34; # Deploy compliance infrastructure aws cloudformation deploy \\ --template-file compliance-infrastructure.yaml \\ --stack-name identity-governance-compliance \\ --capabilities CAPABILITY_IAM # Create DynamoDB table for compliance evidence aws dynamodb create-table \\ --table-name ComplianceEvidence \\ --attribute-definitions \\ AttributeName=evidence_id,AttributeType=S \\ AttributeName=framework,AttributeType=S \\ --key-schema \\ AttributeName=evidence_id,KeyType=HASH \\ --billing-mode PAY_PER_REQUEST echo \u0026#34;Compliance validation deployment completed successfully!\u0026#34; Kết quả Mong đợi Sau khi hoàn thành workshop này, bạn sẽ có:\n✅ Comprehensive Identity Governance System Centralized access management với AWS IAM Identity Center Automated access certification workflows Real-time privilege analytics và risk assessment Continuous monitoring và alerting ✅ Compliance Framework Implementation SOX, SOC2, ISO27001, PCI-DSS compliance validation Automated evidence collection Regulatory reporting capabilities Audit trail maintenance ✅ Operational Excellence Standardized operational procedures Incident response capabilities Change management processes Performance monitoring ✅ Audit và Governance Comprehensive audit framework Automated control testing Finding tracking và remediation Management reporting Best Practices Summary Implement Least Privilege: Chỉ cấp quyền tối thiểu cần thiết Automate Where Possible: Tự động hóa các quy trình lặp lại Monitor Continuously: Giám sát liên tục các hoạt động Document Everything: Ghi chép đầy đủ cho audit trail Regular Reviews: Thực hiện review định kỳ Stay Updated: Cập nhật theo các thay đổi compliance Tài liệu Tham khảo AWS IAM Identity Center Documentation AWS Organizations Best Practices SOX Compliance Guidelines SOC 2 Framework ISO 27001 Standard Hỗ trợ Nếu bạn gặp vấn đề trong quá trình triển khai, vui lòng:\nKiểm tra CloudWatch Logs để debug Xem lại IAM permissions Tham khảo AWS documentation Liên hệ team support nếu cần thiết Workshop hoàn thành thành công! 🎉\n"
},
{
	"uri": "//localhost:1313/vi/11-clean-resources/",
	"title": "11. Dọn dẹp Tài nguyên",
	"tags": [],
	"description": "",
	"content": "Tổng quan Phần này cung cấp hướng dẫn toàn diện để dọn dẹp tất cả tài nguyên AWS được tạo trong workshop Identity Governance nhằm tránh phát sinh chi phí không cần thiết.\nLưu ý quan trọng ⚠️ Cảnh báo: Thực hiện các bước dọn dẹp này sẽ xóa vĩnh viễn tất cả tài nguyên và dữ liệu được tạo trong workshop. Hãy đảm bảo bạn đã sao lưu các cấu hình hoặc dữ liệu quan trọng trước khi tiến hành.\nThứ tự Dọn dẹp Tài nguyên nên được dọn dẹp theo thứ tự sau để tránh xung đột phụ thuộc:\nLambda Functions và EventBridge Rules Step Functions State Machines DynamoDB Tables S3 Buckets và Objects CloudWatch Resources IAM Roles và Policies CloudFormation Stacks AWS Organizations (nếu đã tạo) IAM Identity Center (nếu không còn cần thiết) Bước 1: Lambda Functions và EventBridge Xóa Lambda Functions # Liệt kê tất cả Lambda functions được tạo trong workshop aws lambda list-functions --query \u0026#39;Functions[?contains(FunctionName, `IdentityGovernance`) || contains(FunctionName, `Compliance`) || contains(FunctionName, `AccessReview`)].FunctionName\u0026#39; --output table # Xóa Lambda functions aws lambda delete-function --function-name IdentityGovernanceMonitor aws lambda delete-function --function-name AccessReviewGenerator aws lambda delete-function --function-name ComplianceValidationEngine aws lambda delete-function --function-name RiskAssessmentEngine aws lambda delete-function --function-name CertificationNotifier Xóa EventBridge Rules # Liệt kê EventBridge rules aws events list-rules --query \u0026#39;Rules[?contains(Name, `IdentityGovernance`) || contains(Name, `Compliance`) || contains(Name, `Certification`)].Name\u0026#39; --output table # Xóa EventBridge rules aws events delete-rule --name AccessCertificationSchedule aws events delete-rule --name ComplianceValidationSchedule aws events delete-rule --name RiskAssessmentSchedule Bước 2: Step Functions # Liệt kê Step Functions aws stepfunctions list-state-machines --query \u0026#39;stateMachines[?contains(name, `Certification`) || contains(name, `Governance`)].name\u0026#39; --output table # Xóa Step Functions aws stepfunctions delete-state-machine --state-machine-arn arn:aws:states:REGION:ACCOUNT:stateMachine:CertificationWorkflow Bước 3: DynamoDB Tables # Liệt kê DynamoDB tables aws dynamodb list-tables --query \u0026#39;TableNames[?contains(@, `Certification`) || contains(@, `Operations`) || contains(@, `Compliance`) || contains(@, `Risk`)]\u0026#39; --output table # Xóa DynamoDB tables aws dynamodb delete-table --table-name CertificationTasks aws dynamodb delete-table --table-name OperationsLog aws dynamodb delete-table --table-name ComplianceEvidence aws dynamodb delete-table --table-name RiskMonitoring aws dynamodb delete-table --table-name AuditFindings Bước 4: S3 Buckets Làm trống và Xóa S3 Buckets # Lấy account ID ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text) # Liệt kê workshop S3 buckets aws s3 ls | grep -E \u0026#34;(privilege-analytics|compliance-reports|identity-governance)\u0026#34; # Làm trống buckets trước aws s3 rm s3://privilege-analytics-${ACCOUNT_ID} --recursive aws s3 rm s3://compliance-reports-${ACCOUNT_ID} --recursive # Xóa buckets aws s3 rb s3://privilege-analytics-${ACCOUNT_ID} aws s3 rb s3://compliance-reports-${ACCOUNT_ID} Bước 5: CloudWatch Resources Xóa CloudWatch Dashboards # Liệt kê dashboards aws cloudwatch list-dashboards --query \u0026#39;DashboardEntries[?contains(DashboardName, `IdentityGovernance`) || contains(DashboardName, `Compliance`)].DashboardName\u0026#39; --output table # Xóa dashboards aws cloudwatch delete-dashboards --dashboard-names IdentityGovernanceRiskDashboard IdentityGovernanceMonitoring ComplianceDashboard Xóa CloudWatch Alarms # Liệt kê alarms aws cloudwatch describe-alarms --query \u0026#39;MetricAlarms[?contains(AlarmName, `IdentityGovernance`) || contains(AlarmName, `Compliance`) || contains(AlarmName, `Risk`)].AlarmName\u0026#39; --output table # Xóa alarms aws cloudwatch delete-alarms --alarm-names HighFailedLoginAttempts PrivilegeEscalationDetected HighRiskEventsAlarm ComplianceViolationAlarm Bước 6: IAM Resources Xóa IAM Roles Điều hướng đến dịch vụ IAM trong AWS Console Click Roles trong sidebar Tìm kiếm các workshop roles: IdentityGovernanceLambdaRole ComplianceValidationRole CertificationWorkflowRole Chọn từng role và click Delete Gõ tên role để xác nhận xóa Xóa Custom IAM Policies Click Policies trong sidebar Lọc theo Customer managed Tìm kiếm các workshop policies: SecurityAuditPolicy IdentityGovernancePolicy ComplianceValidationPolicy Chọn từng policy và click Actions → Delete Xác nhận xóa Xóa IAM Users và Groups Click Users trong sidebar Chọn workshop users và click Delete Click User groups trong sidebar Chọn workshop groups và click Delete Bước 7: Dọn dẹp IAM Identity Center Xóa Permission Set Assignments Điều hướng đến IAM Identity Center Click AWS accounts trong sidebar Chọn account của bạn và click Remove access Xóa Permission Sets Click Permission sets trong sidebar Chọn các workshop permission sets: SecurityAuditor ComplianceReviewer Click Delete Xóa Users và Groups Click Users trong sidebar Chọn workshop users và click Delete Click Groups trong sidebar Chọn workshop groups và click Delete Bước 8: Dọn dẹp AWS Config Điều hướng đến dịch vụ AWS Config Click Settings trong sidebar Click Edit và sau đó Delete configuration recorder Xác nhận xóa bằng cách gõ delete Bước 9: Dọn dẹp CloudTrail Điều hướng đến dịch vụ CloudTrail Click Trails trong sidebar Chọn IdentityGovernanceTrail Click Delete Gõ tên trail để xác nhận xóa Checklist Dọn dẹp qua Console Để dọn dẹp có hệ thống qua AWS Console, hãy làm theo checklist này:\n✅ Checklist Dọn dẹp Lambda Functions:\nIdentityGovernanceMonitor AccessReviewGenerator ComplianceValidationEngine RiskAssessmentEngine CertificationNotifier EventBridge Rules:\nAccessCertificationSchedule ComplianceValidationSchedule RiskAssessmentSchedule Step Functions:\nAccessCertificationWorkflow ComplianceValidationWorkflow DynamoDB Tables:\nCertificationTasks OperationsLog ComplianceEvidence RiskMonitoring AuditFindings S3 Buckets:\nprivilege-analytics-[ACCOUNT-ID] compliance-reports-[ACCOUNT-ID] CloudWatch Resources:\nIdentityGovernanceRiskDashboard DailyOperationsDashboard Tất cả workshop alarms Tất cả workshop log groups SNS Topics:\nIdentityGovernanceAlerts ComplianceAlerts IAM Resources:\nWorkshop IAM roles Workshop IAM policies Workshop IAM users Workshop IAM groups IAM Identity Center:\nPermission set assignments Permission sets SSO users và groups Các Dịch vụ Khác:\nAWS Config recorder CloudTrail trail GuardDuty detector (nếu không cần) Xác minh Sau khi chạy dọn dẹp, hãy xác minh rằng tất cả tài nguyên đã được xóa:\nKiểm tra Tài nguyên Còn lại # Kiểm tra Lambda functions aws lambda list-functions --query \u0026#39;Functions[?contains(FunctionName, `IdentityGovernance`)].FunctionName\u0026#39; # Kiểm tra DynamoDB tables aws dynamodb list-tables --query \u0026#39;TableNames[?contains(@, `Certification`) || contains(@, `Compliance`)]\u0026#39; # Kiểm tra S3 buckets aws s3 ls | grep -E \u0026#34;(privilege-analytics|compliance-reports)\u0026#34; # Kiểm tra CloudFormation stacks aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query \u0026#39;StackSummaries[?contains(StackName, `identity-governance`)].StackName\u0026#39; Xác minh Chi phí Sau khi dọn dẹp, hãy theo dõi dashboard billing AWS để đảm bảo không có phí phát sinh từ tài nguyên còn lại.\nKhắc phục Sự cố Vấn đề Thường gặp Lỗi Phụ thuộc: Một số tài nguyên có thể có phụ thuộc. Hãy xóa tài nguyên phụ thuộc trước. Lỗi Quyền: Đảm bảo bạn có đủ quyền để xóa tất cả tài nguyên. Vấn đề Region: Đảm bảo bạn đang xóa tài nguyên ở đúng region. Dọn dẹp Thủ công Nếu dọn dẹp tự động thất bại, hãy xóa tài nguyên thủ công qua AWS Console:\nTruy cập console của từng service Tìm kiếm tài nguyên có tên chứa \u0026ldquo;IdentityGovernance\u0026rdquo;, \u0026ldquo;Compliance\u0026rdquo;, hoặc \u0026ldquo;Certification\u0026rdquo; Xóa từng tài nguyên một cách riêng lẻ Ghi chú Cuối Việc dọn dẹp này sẽ xóa TẤT CẢ tài nguyên workshop Kiểm tra kỹ trước khi chạy lệnh dọn dẹp Một số tài nguyên có thể có độ trễ ngắn trước khi bị xóa Theo dõi hóa đơn AWS để đảm bảo không có phí tiếp tục phát sinh Dọn dẹp workshop hoàn tất! 🎉\n"
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]