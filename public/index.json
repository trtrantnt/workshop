[
{
	"uri": "http://localhost:1313/workshop/1-gioi-thieu/",
	"title": "1. Introduction",
	"tags": [],
	"description": "",
	"content": "Workshop Overview This workshop will guide you through implementing a comprehensive Identity Governance system with Access Certification on AWS, including:\nAccess Governance: Managing and controlling access rights Certification Automation: Automating access certification processes Privilege Analytics: Analyzing and monitoring privileges Risk Assessment: Security risk evaluation Monitoring Setup: Setting up continuous monitoring Operational Procedures: Operational processes Audit Procedures: Audit processes Compliance Validation: Compliance verification Overall Architecture graph TB A[Identity Provider] --\u0026gt; B[AWS IAM Identity Center] B --\u0026gt; C[Access Management] C --\u0026gt; D[Privilege Analytics] D --\u0026gt; E[Risk Assessment] E --\u0026gt; F[Access Certification] F --\u0026gt; G[Compliance Reporting] H[CloudTrail] --\u0026gt; I[Monitoring \u0026amp; Alerting] I --\u0026gt; J[Operational Dashboard] K[Automation Engine] --\u0026gt; L[Certification Workflows] L --\u0026gt; M[Remediation Actions] AWS Services Used AWS IAM Identity Center - Centralized access management AWS Organizations - Multi-account governance AWS CloudTrail - Audit logging AWS Config - Compliance monitoring AWS Lambda - Automation functions Amazon EventBridge - Event-driven automation Amazon S3 - Data storage Amazon Athena - Analytics queries Amazon QuickSight - Reporting dashboard AWS Systems Manager - Operational management Benefits of Identity Governance 1. Enhanced Security Strict access control Security risk detection and prevention Continuous activity monitoring 2. Regulatory Compliance Meet SOX, SOC2, ISO27001 requirements Automated audit processes Compliance evidence storage 3. Operational Efficiency Automated certification processes Reduced manual work Improved management processes Completion Time Approximately 4-6 hours (can be divided into multiple sessions)\nNext Steps Continue to 2. Preparation Steps to start setting up the environment.\n"
},
{
	"uri": "http://localhost:1313/workshop/",
	"title": "Identity Governance with Access Certification",
	"tags": [],
	"description": "",
	"content": "Identity Governance with Access Certification Workshop Workshop Overview This comprehensive workshop guides you through implementing Identity Governance with Access Certification on AWS, covering advanced security practices and compliance requirements.\nWorkshop Modules 1. Introduction\r2. Preparation Steps\r3. Access Governance Setup\r4. Certification Automation\r5. Privilege Analytics\r6. Risk Assessment\r7. Monitoring Setup\r8. Operational Procedures\r9. Audit Procedures\r10. Compliance Validation\r11. Clean Resources\rArchitecture Overview graph TB\rA[Identity Provider] --\u0026gt; B[AWS IAM Identity Center]\rB --\u0026gt; C[Access Management]\rC --\u0026gt; D[Privilege Analytics]\rD --\u0026gt; E[Risk Assessment]\rE --\u0026gt; F[Access Certification]\rF --\u0026gt; G[Compliance Reporting]\rH[CloudTrail] --\u0026gt; I[Monitoring \u0026amp; Alerting]\rI --\u0026gt; J[Operational Dashboard]\rK[Automation Engine] --\u0026gt; L[Certification Workflows]\rL --\u0026gt; M[Remediation Actions] Key Benefits Enhanced Security: Strict access control and continuous monitoring Regulatory Compliance: Meet SOX, SOC2, ISO27001 requirements Operational Efficiency: Automated certification and remediation processes Risk Management: Proactive risk assessment and mitigation Prerequisites AWS Account with Administrator privileges Basic understanding of AWS IAM and Organizations Knowledge of compliance frameworks Python and AWS CLI experience Estimated Duration 4-6 hours (can be completed in multiple sessions)\n"
},
{
	"uri": "http://localhost:1313/workshop/2-cac-buoc-chuan-bi/",
	"title": "2. Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Prerequisites 1. AWS Account AWS Account with Administrator privileges Permission to create and manage AWS Organizations Permission to use IAM Identity Center 2. Required Knowledge Basic understanding of AWS IAM Experience with AWS Organizations Knowledge of compliance frameworks (SOX, SOC2, ISO27001) Understanding of Python and AWS CLI 3. Required Tools Configured AWS CLI Python 3.9 or higher Git to clone code examples Text editor or IDE Environment Setup 1. Configure AWS CLI # Install AWS CLI pip install awscli # Configure credentials aws configure 2. Check Permissions # Check current account aws sts get-caller-identity # Check Organizations permissions aws organizations describe-organization 3. Create S3 Buckets for Data # Create bucket for analytics data aws s3 mb s3://privilege-analytics-$(aws sts get-caller-identity --query Account --output text) # Create bucket for compliance reports aws s3 mb s3://compliance-reports-$(aws sts get-caller-identity --query Account --output text) Infrastructure Preparation 1. Enable AWS Services # Enable CloudTrail aws cloudtrail create-trail \\ --name IdentityGovernanceTrail \\ --s3-bucket-name privilege-analytics-$(aws sts get-caller-identity --query Account --output text) # Enable Config aws configservice put-configuration-recorder \\ --configuration-recorder name=IdentityGovernanceRecorder,roleARN=arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig # Enable GuardDuty aws guardduty create-detector --enable Expected Results After completing the preparation steps:\n✅ AWS Account properly configured ✅ Required AWS services enabled ✅ Base infrastructure deployed ✅ Permissions validated ✅ Workshop materials ready Next Steps Continue to 3. Access Governance Setup to start implementing the system.\n"
},
{
	"uri": "http://localhost:1313/workshop/3-thiet-lap-access-governance/",
	"title": "3. Access Governance Setup",
	"tags": [],
	"description": "",
	"content": "Objective Set up centralized access management foundation with AWS IAM Identity Center and Organizations.\nArchitecture graph LR A[Management Account] --\u0026gt; B[AWS Organizations] B --\u0026gt; C[Member Accounts] C --\u0026gt; D[IAM Identity Center] D --\u0026gt; E[Permission Sets] E --\u0026gt; F[User Assignments] Step 1: AWS Organizations Setup 1.1 Create Organization Đăng nhập vào AWS Console với tài khoản root Tìm kiếm và mở service AWS Organizations Click Create organization Chọn Enable all features để có đầy đủ tính năng quản lý Click Create organization 1.2 Create Organizational Units Trong AWS Organizations console, click AWS accounts ở sidebar Click Actions → Create organizational unit Nhập tên OU: Security Click Create organizational unit Step 2: Configure IAM Identity Center 2.1 Enable IAM Identity Center Tìm kiếm và mở IAM Identity Center trong AWS Console Click Enable để kích hoạt IAM Identity Center Chọn region để lưu trữ identity store Click Create AWS organization nếu chưa có 2.2 Create Permission Sets Trong IAM Identity Center, click Permission sets ở sidebar Click Create permission set Chọn Predefined permission set Chọn SecurityAudit từ dropdown Nhập thông tin: Name: SecurityAuditor Description: Read-only access for security auditing Session duration: 8 hours Click Next và Create Step 3: Identity Store Setup 3.1 Create Users and Groups Trong IAM Identity Center, click Users ở sidebar Click Add user Nhập thông tin user: Username: security-auditor Email: auditor@company.com First name: Security Last name: Auditor Click Next và Add user 3.2 Create Groups Click Groups ở sidebar Click Create group Nhập: Group name: SecurityAuditors Description: Security auditing team Click Create group 3.3 Assign Users to Groups Chọn group SecurityAuditors Click Add users to group Chọn user security-auditor Click Add users Step 4: Assign Access 4.1 Assign Permission Sets to Accounts Click AWS accounts ở sidebar Chọn account cần assign quyền Click Assign users or groups Chọn Groups tab Chọn group SecurityAuditors Click Next Chọn permission set SecurityAuditor Click Next và Submit Expected Results After completing this step, you will have:\n✅ AWS Organizations configured with OUs ✅ IAM Identity Center activated ✅ Permission Sets for governance roles ✅ Identity Store with groups and users ✅ Access assignments configured Next Steps Continue to 4. Certification Automation to set up automated certification processes.\n"
},
{
	"uri": "http://localhost:1313/workshop/4-tu-dong-hoa-certification/",
	"title": "4. Certification Automation",
	"tags": [],
	"description": "",
	"content": "Objective Automate access certification processes to ensure access rights are reviewed periodically and comply with security requirements.\nAutomation Architecture graph TB A[EventBridge Schedule] --\u0026gt; B[Lambda Trigger] B --\u0026gt; C[Access Review Generator] C --\u0026gt; D[Certification Workflow] D --\u0026gt; E[Manager Approval] E --\u0026gt; F[Remediation Actions] F --\u0026gt; G[Compliance Report] Step 1: EventBridge Scheduler Setup 1.1 Create Scheduled Rule Open Amazon EventBridge in AWS Console Click Rules in the sidebar Click Create rule Enter rule details: Name: AccessCertificationSchedule Description: Quarterly access certification review Event bus: default In Define pattern, select Schedule Choose Fixed rate every and enter 90 days Click Next Step 2: Lambda Function Setup 2.1 Create Lambda Function Open AWS Lambda in the console Click Create function Choose Author from scratch Enter function details: Function name: AccessCertificationTrigger Runtime: Python 3.9 Architecture: x86_64 Click Create function 2.2 Configure Lambda Function Code In the Code tab, replace the default code Upload the certification logic code Click Deploy to save changes 2.3 Set Environment Variables Go to Configuration tab Click Environment variables Click Edit Add required variables: S3_BUCKET: certification-data-bucket SNS_TOPIC: certification-notifications Step 3: Step Functions Workflow 3.1 Create State Machine Open AWS Step Functions in the console Click Create state machine Choose Write your workflow in code Select Standard type Enter the workflow definition in JSON format Name the state machine: AccessCertificationWorkflow 3.2 Configure IAM Role Create or select an IAM role for Step Functions Ensure it has permissions to invoke Lambda functions Click Create state machine Step 4: Connect EventBridge to Lambda 4.1 Add Lambda Target to EventBridge Rule Go back to EventBridge console Select the rule AccessCertificationSchedule Click Targets tab Click Add target Configure target: Target type: AWS service Service: Lambda function Function: AccessCertificationTrigger Click Add and then Update rule Step 5: Test the Automation 5.1 Manual Test Execution In EventBridge, select your rule Click Actions → Test rule Monitor Lambda function execution in CloudWatch Logs Expected Results After completion:\n✅ Automated quarterly access reviews ✅ EventBridge scheduled triggers ✅ Lambda function processing ✅ Step Functions workflow orchestration ✅ Audit trail and monitoring Next Steps Continue to 5. Privilege Analytics to set up privilege analysis.\n"
},
{
	"uri": "http://localhost:1313/workshop/5-phan-tich-dac-quyen/",
	"title": "5. Privilege Analytics",
	"tags": [],
	"description": "",
	"content": "Objective Analyze and monitor privilege usage to detect security risks, excessive permissions, and anomalous patterns.\nAnalytics Architecture graph TB A[CloudTrail Logs] --\u0026gt; B[S3 Data Lake] C[Config Data] --\u0026gt; B D[IAM Data] --\u0026gt; B B --\u0026gt; E[Athena Queries] E --\u0026gt; F[Analytics Engine] F --\u0026gt; G[Risk Scoring] G --\u0026gt; H[QuickSight Dashboard] F --\u0026gt; I[Anomaly Detection] I --\u0026gt; J[Alerts] Step 1: CloudTrail Setup for Data Collection 1.1 Create CloudTrail Open AWS CloudTrail in the console Click Create trail Configure trail settings: Trail name: PrivilegeAnalyticsTrail Apply trail to all regions: Yes Management events: Read and Write Configure S3 bucket: Create new S3 bucket: Yes S3 bucket name: privilege-analytics-logs-[account-id] Log file prefix: cloudtrail-logs/ Enable Log file validation Click Create trail Step 2: Amazon Athena Setup 2.1 Create Athena Database Open Amazon Athena in the console Click Query editor Set up query result location if prompted Create database for privilege analytics: CREATE DATABASE privilege_analytics_db; 2.2 Create CloudTrail Table Use the database: USE privilege_analytics_db; Create table for CloudTrail logs: 2.3 Run Analytics Queries Query for high-privilege activities: SELECT useridentity.username, eventname, sourceipaddress, eventtime, COUNT(*) as event_count FROM cloudtrail_logs WHERE eventname IN (\u0026#39;AssumeRole\u0026#39;, \u0026#39;AttachUserPolicy\u0026#39;, \u0026#39;CreateRole\u0026#39;) GROUP BY useridentity.username, eventname, sourceipaddress, eventtime ORDER BY event_count DESC; Step 3: QuickSight Dashboard Setup 3.1 Create QuickSight Account Open Amazon QuickSight in the console Sign up for QuickSight if not already done Choose Standard edition 3.2 Create Data Source Click Datasets in QuickSight Click New dataset Choose Athena as data source Configure Athena connection: Data source name: PrivilegeAnalytics Database: privilege_analytics_db Table: cloudtrail_logs 3.3 Create Analysis Dashboard Click Create analysis Add visualizations for: Top users by activity High-risk events timeline Geographic access patterns Configure filters and parameters Publish the dashboard Step 4: Set Up Automated Analysis 4.1 Create Lambda for Risk Scoring Open AWS Lambda console Create function PrivilegeRiskScoring Configure to run daily via EventBridge 4.2 Configure CloudWatch Alarms Open CloudWatch console Create alarms for high-risk activities Set SNS notifications Expected Results After completion:\n✅ CloudTrail collecting privilege data ✅ Athena tables for analytics queries ✅ QuickSight dashboard for visualization ✅ Automated risk scoring ✅ CloudWatch monitoring and alerts Next Steps Continue to 6. Risk Assessment to set up comprehensive risk assessment.\n"
},
{
	"uri": "http://localhost:1313/workshop/6-danh-gia-rui-ro/",
	"title": "6. Risk Assessment",
	"tags": [],
	"description": "",
	"content": "Objective Establish a comprehensive risk assessment system to detect, analyze, and prioritize security risks related to identity and access management.\nRisk Assessment Architecture graph TB A[Data Sources] --\u0026gt; B[Risk Engine] B --\u0026gt; C[Risk Scoring] C --\u0026gt; D[Risk Classification] D --\u0026gt; E[Risk Prioritization] E --\u0026gt; F[Remediation Recommendations] F --\u0026gt; G[Risk Dashboard] H[Threat Intelligence] --\u0026gt; B I[Compliance Rules] --\u0026gt; B J[Business Context] --\u0026gt; B Step 1: AWS Config Setup for Risk Assessment 1.1 Enable AWS Config Open AWS Config in the console Click Get started Configure settings: Resource types: All supported resource types Amazon S3 bucket: Create new bucket Amazon SNS topic: Create new topic Choose AWS Config role: Create new role Click Next 1.2 Add Config Rules Click Rules in AWS Config Click Add rule Add security-related rules: iam-user-mfa-enabled root-access-key-check iam-password-policy Step 2: GuardDuty Integration 2.1 Enable Amazon GuardDuty Open Amazon GuardDuty in the console Click Get started Review service permissions Click Enable GuardDuty 2.2 Configure Threat Intelligence Go to Settings in GuardDuty Click Threat Intelligence Enable AWS threat intelligence Configure Malware Protection Enable S3 Protection Step 3: Security Hub Integration 3.1 Enable AWS Security Hub Open AWS Security Hub in the console Click Go to Security Hub Enable security standards: AWS Foundational Security Standard CIS AWS Foundations Benchmark PCI DSS Click Enable Security Hub 3.2 Configure Integrations Go to Integrations tab Enable integrations: AWS Config Amazon GuardDuty AWS Inspector Configure custom insights for risk assessment Step 4: CloudWatch Dashboard for Risk Monitoring 4.1 Create Risk Assessment Dashboard Open Amazon CloudWatch console Click Dashboards in sidebar Click Create dashboard Name: IdentityGovernanceRiskDashboard Add widgets for: Security Hub findings GuardDuty threats Config compliance 4.2 Configure Risk Alarms Click Alarms in CloudWatch Click Create alarm Configure alarms for: High severity findings Critical GuardDuty threats Config rule violations Set SNS notifications Expected Results After completion:\n✅ AWS Config monitoring compliance ✅ GuardDuty detecting threats ✅ Security Hub centralizing findings ✅ CloudWatch dashboard for risk metrics ✅ Automated alerting for high-risk events ✅ Integrated security monitoring Next Steps Continue to 7. Monitoring Setup to set up comprehensive monitoring.\n"
},
{
	"uri": "http://localhost:1313/workshop/7-thiet-lap-giam-sat/",
	"title": "7. Monitoring Setup",
	"tags": [],
	"description": "",
	"content": "Objective Set up comprehensive monitoring system to continuously track identity governance activities, detect anomalies, and ensure compliance.\nMonitoring Architecture graph TB A[CloudTrail] --\u0026gt; B[CloudWatch Logs] C[Config] --\u0026gt; B D[GuardDuty] --\u0026gt; B B --\u0026gt; E[CloudWatch Metrics] E --\u0026gt; F[CloudWatch Alarms] F --\u0026gt; G[SNS Notifications] E --\u0026gt; H[Custom Dashboard] B --\u0026gt; I[Log Analytics] I --\u0026gt; J[Anomaly Detection] Step 1: CloudWatch Logs Setup 1.1 Create Log Groups Open Amazon CloudWatch console Click Log groups in sidebar Click Create log group Configure log group: Log group name: /aws/identity-governance/events Retention setting: 1 year Click Create 1.2 Set Up SNS Topic for Alerts Open Amazon SNS console Click Topics in sidebar Click Create topic Configure topic: Type: Standard Name: IdentityGovernanceAlerts Display name: Identity Governance Alerts Create subscription with your email Step 2: CloudWatch Metrics and Alarms 2.1 Create Custom Metrics In CloudWatch console, click All metrics Click Browse tab Create custom namespace: IdentityGovernance 2.2 Set Up Alarms Click Alarms in CloudWatch Click Create alarm Configure alarm for failed logins: Metric: Custom metric for failed logins Threshold: \u0026gt; 5 in 5 minutes Action: Send to SNS topic Create additional alarms for: Privilege escalation events Off-hours access Unusual geographic access Step 3: CloudWatch Insights Setup 3.1 Create Insights Queries Click Logs Insights in CloudWatch Select log group: /aws/cloudtrail Create saved queries for monitoring 3.2 Failed Login Analysis Run query for failed logins: fields @timestamp, sourceIPAddress, userIdentity.userName, errorMessage | filter eventName = \u0026#34;ConsoleLogin\u0026#34; and errorCode != \u0026#34;Success\u0026#34; | stats count() by userIdentity.userName | sort count desc 3.3 Privilege Escalation Monitoring Create query for privilege changes: fields @timestamp, eventName, userIdentity.userName, sourceIPAddress | filter eventName in [\u0026#34;AttachUserPolicy\u0026#34;, \u0026#34;CreateRole\u0026#34;, \u0026#34;PutUserPolicy\u0026#34;] | sort @timestamp desc Save queries for regular use Step 4: Automated Monitoring with Lambda 4.1 Create Monitoring Lambda Function Open AWS Lambda console Click Create function Configure function: Name: IdentityGovernanceMonitor Runtime: Python 3.9 4.2 Configure Lambda Triggers Add EventBridge trigger Set schedule: rate(1 hour) Add CloudWatch Logs trigger for real-time analysis 4.3 Configure Environment Variables Set environment variables: SNS_TOPIC_ARN: Your SNS topic ARN LOG_GROUP_NAME: /aws/identity-governance/events Step 5: Dashboard and Reporting 5.1 Create Monitoring Dashboard In CloudWatch, click Dashboards Click Create dashboard Name: IdentityGovernanceMonitoring Add widgets for: Failed login attempts Privilege escalation events Geographic access patterns System health metrics 5.2 Set Up Automated Reports Create EventBridge rule for daily reports Configure Lambda to generate reports Send reports via email Expected Results After completion:\n✅ CloudWatch Logs collecting identity events ✅ Custom metrics and alarms configured ✅ CloudWatch Insights for log analysis ✅ Lambda functions for automated monitoring ✅ SNS notifications for alerts ✅ Comprehensive monitoring dashboard Next Steps Continue to 8. Operational Procedures to set up operational processes.\n"
},
{
	"uri": "http://localhost:1313/workshop/8-quy-trinh-van-hanh/",
	"title": "8. Operational Procedures",
	"tags": [],
	"description": "",
	"content": "Objective Establish standardized operational procedures to manage identity governance effectively, ensuring consistency and compliance.\nProcess Overview graph TB A[Daily Operations] --\u0026gt; B[Weekly Reviews] B --\u0026gt; C[Monthly Assessments] C --\u0026gt; D[Quarterly Certifications] E[Incident Response] --\u0026gt; F[Investigation] F --\u0026gt; G[Remediation] G --\u0026gt; H[Documentation] I[Change Management] --\u0026gt; J[Approval Process] J --\u0026gt; K[Implementation] K --\u0026gt; L[Validation] Step 1: Daily Operations Dashboard 1.1 Create Operations Dashboard Open Amazon CloudWatch console Click Dashboards Click Create dashboard Name: DailyOperationsDashboard Add widgets for daily monitoring: Failed login attempts (last 24h) High-risk alerts System health status Pending certifications 1.2 Set Up Daily Checklist Automation Open AWS Systems Manager Click Documents in sidebar Click Create document Create Automation document for daily checks: Name: DailyOperationsChecklist Document type: Automation Configure automation steps for: Security alerts review System health validation Backup status check Step 2: Standard Operating Procedures (SOPs) 2.1 Create SOP Documentation in Wiki Open Amazon WorkDocs or create S3 bucket for documentation Create folder structure for SOPs Create SOP-001: Daily Monitoring Procedures Include sections: Purpose and Scope Daily procedures timeline Escalation criteria Contact information 2.2 Implement SOP Tracking Create DynamoDB table for SOP tracking: Table name: OperationalProcedures Primary key: procedure_id Create Lambda function to track SOP execution Configure EventBridge rules for SOP scheduling Step 3: Weekly Review Automation 3.1 Set Up Weekly Review Reports Open Amazon QuickSight Create Weekly Review Dashboard Configure data sources: CloudWatch metrics Security Hub findings Config compliance data 3.2 Automate Weekly Report Generation Create Lambda function for weekly reports Configure EventBridge rule: Schedule: Every Monday at 9:00 AM Target: Weekly report Lambda Configure report delivery via SES Step 4: Incident Response Runbooks 4.1 Create Digital Runbooks Open AWS Systems Manager Click Documents Create Command document for incident response Configure runbook sections: Incident classification Initial response steps Investigation procedures Escalation matrix 4.2 Implement Incident Tracking Create ServiceNow integration or use AWS Support Cases Configure ChatBot for Slack/Teams notifications Set up PagerDuty integration for on-call management 4.3 Test Runbook Procedures Schedule tabletop exercises Document lessons learned Update runbooks based on feedback Expected Results After completion:\n✅ CloudWatch dashboard for daily operations ✅ Automated SOP execution and tracking ✅ Weekly review reports via QuickSight ✅ Digital incident response runbooks ✅ Integrated incident tracking system ✅ Automated operational workflows Next Steps Continue to 9. Audit Procedures to set up audit processes.\n"
},
{
	"uri": "http://localhost:1313/workshop/9-quy-trinh-kiem-toan/",
	"title": "9. Audit Procedures",
	"tags": [],
	"description": "",
	"content": "Objective Establish comprehensive audit procedures to ensure compliance with security, legal, and internal requirements in identity governance management.\nAudit Architecture graph TB A[Audit Planning] --\u0026gt; B[Evidence Collection] B --\u0026gt; C[Analysis \u0026amp; Testing] C --\u0026gt; D[Findings Documentation] D --\u0026gt; E[Remediation Tracking] E --\u0026gt; F[Audit Reporting] G[Continuous Monitoring] --\u0026gt; H[Automated Controls Testing] H --\u0026gt; I[Exception Reporting] I --\u0026gt; J[Management Dashboard] Step 1: AWS Audit Manager Setup 1.1 Enable AWS Audit Manager Open AWS Audit Manager in the console Click Get started Configure service settings: Enable data collection: Yes KMS encryption: Use default key S3 bucket: Create new bucket for audit evidence Click Complete setup 1.2 Create Audit Framework Click Assessment frameworks in sidebar Click Create custom framework Configure framework: Name: Identity Governance Audit Framework Description: Comprehensive identity governance audit Compliance type: SOX, SOC2, ISO27001 Add control sets for: Access Management Privilege Governance Compliance Monitoring Step 2: Create Assessment 2.1 Start New Assessment Click Assessments in Audit Manager Click Create assessment Configure assessment: Name: Q1 Identity Governance Audit Framework: Identity Governance Audit Framework Scope: Select AWS accounts and services Assign roles: Assessment owner: Security team lead Reviewers: Compliance team 2.2 Configure Evidence Collection Set up automatic evidence collection: AWS Config: Compliance data CloudTrail: Activity logs Security Hub: Security findings Configure manual evidence upload process Step 3: Control Testing and Evidence Review 3.1 Review Control Evidence Navigate to Control sets in your assessment Review each control: Evidence status Compliance rating Comments and findings Upload additional evidence if needed Add control testing notes 3.2 Document Findings For each control, document: Testing procedures performed Results and observations Exceptions or deficiencies Recommendations Assign risk ratings to findings Set remediation timelines Step 4: Generate Audit Reports 4.1 Create Assessment Report Click Generate assessment report Select report format: PDF or HTML Configure report sections: Executive summary Control testing results Findings and recommendations Evidence appendix 4.2 Share Report with Stakeholders Download completed report Share with: Executive leadership Audit committee Compliance team Expected Results After completion:\n✅ AWS Audit Manager configured ✅ Custom audit framework created ✅ Assessment with evidence collection ✅ Control testing documentation ✅ Comprehensive audit reports ✅ Stakeholder communication process Next Steps Continue to 10. Compliance Validation to complete the workshop.\n"
},
{
	"uri": "http://localhost:1313/workshop/10-xac-thuc-tuan-thu/",
	"title": "10. Compliance Validation",
	"tags": [],
	"description": "",
	"content": "Objective Validate and maintain compliance with security frameworks and legal regulations through identity governance, ensuring the organization meets SOX, SOC2, ISO27001, PCI-DSS, and other standards.\nCompliance Framework Mapping graph TB A[Identity Governance Controls] --\u0026gt; B[SOX Compliance] A --\u0026gt; C[SOC2 Type II] A --\u0026gt; D[ISO 27001] A --\u0026gt; E[PCI-DSS] A --\u0026gt; F[NIST Framework] B --\u0026gt; G[Audit Evidence] C --\u0026gt; G D --\u0026gt; G E --\u0026gt; G F --\u0026gt; G G --\u0026gt; H[Compliance Dashboard] G --\u0026gt; I[Regulatory Reports] Step 1: AWS Artifact for Compliance Documentation 1.1 Access AWS Artifact Open AWS Artifact in the console Review available compliance reports: SOC reports PCI DSS documentation ISO 27001 certification Download relevant compliance documents Review AWS responsibility matrix 1.2 Map Controls to Frameworks Create compliance mapping spreadsheet Map identity governance controls to: SOX Section 302/404 SOC 2 Type II ISO 27001 Annex A PCI DSS Requirements Document shared responsibility model Step 2: Compliance Dashboard with Security Hub 2.1 Configure Compliance Standards Open AWS Security Hub Go to Security standards Enable compliance standards: AWS Foundational Security Standard CIS AWS Foundations Benchmark PCI DSS Review compliance scores for each standard 2.2 Create Compliance Dashboard Open Amazon QuickSight Create Compliance Dashboard Connect to Security Hub data Add visualizations for: Overall compliance score Framework-specific scores Trending compliance metrics Critical findings Set up automated refresh schedule Step 3: Automated Compliance Reporting 3.1 Set Up Report Generation Create S3 bucket for compliance reports: Bucket name: compliance-reports-[account-id] Versioning: Enabled Retention: 7 years Configure lifecycle policies for long-term retention 3.2 Create Report Generation Lambda Open AWS Lambda Create function: ComplianceReportGenerator Configure to generate reports from: Security Hub findings Config compliance data Audit Manager evidence 3.3 Schedule Quarterly Reports Open Amazon EventBridge Create rule: QuarterlyComplianceReporting Set schedule: First day of quarter at 9 AM Configure email delivery via SES Step 4: Compliance Validation Testing 4.1 Test Compliance Controls Use AWS Config to validate: IAM password policies MFA requirements Access key rotation Review Security Hub findings Document control effectiveness 4.2 Generate Compliance Evidence Collect evidence from: CloudTrail logs Config snapshots Security Hub reports Audit Manager assessments Store evidence in S3 with encryption Create evidence inventory 4.3 Validate Report Generation Test quarterly report generation Review report content and format Validate stakeholder distribution Expected Results After completing this workshop, you will have:\n✅ Comprehensive Identity Governance System Centralized access management with AWS IAM Identity Center Automated access certification workflows Real-time privilege analytics and risk assessment Continuous monitoring and alerting ✅ Compliance Framework Implementation SOX, SOC2, ISO27001, PCI-DSS compliance validation Automated evidence collection via AWS services Regulatory reporting capabilities Audit trail maintenance in S3 ✅ Operational Excellence CloudWatch dashboards for operations Automated incident response procedures Systems Manager runbooks Performance monitoring and alerting ✅ Audit and Governance AWS Audit Manager framework Automated control testing via Config Security Hub findings tracking QuickSight management reporting Best Practices Summary Implement Least Privilege: Use IAM Identity Center permission sets Automate Where Possible: Leverage AWS native automation services Monitor Continuously: Use CloudWatch and Security Hub Document Everything: Store evidence in S3 with proper retention Regular Reviews: Schedule automated assessments Stay Updated: Monitor AWS compliance documentation updates Reference Documentation AWS IAM Identity Center Documentation AWS Organizations Best Practices SOX Compliance Guidelines SOC 2 Framework ISO 27001 Standard Support If you encounter issues during deployment, please:\nCheck CloudWatch Logs for debugging Review IAM permissions Refer to AWS documentation Contact support team if needed Workshop completed successfully! 🎉\nNext Steps Continue to 11. Clean Resources to clean up workshop resources.\n"
},
{
	"uri": "http://localhost:1313/workshop/11-clean-resources/",
	"title": "11. Clean Resources",
	"tags": [],
	"description": "",
	"content": "Overview This section provides comprehensive instructions for cleaning up all AWS resources created during the Identity Governance workshop to avoid unnecessary charges.\nImportant Notes ⚠️ Warning: Following these cleanup steps will permanently delete all resources and data created during the workshop. Make sure you have backed up any important configurations or data before proceeding.\nCleanup Order Resources should be cleaned up in the following order to avoid dependency conflicts:\nLambda Functions and EventBridge Rules Step Functions State Machines DynamoDB Tables S3 Buckets and Objects CloudWatch Resources IAM Roles and Policies CloudFormation Stacks AWS Organizations (if created) IAM Identity Center (if no longer needed) Step 1: Lambda Functions and EventBridge Delete Lambda Functions Open AWS Lambda console Filter functions by workshop names: IdentityGovernance AccessCertification ComplianceValidation Select workshop functions Click Actions → Delete Confirm deletion by typing delete Delete EventBridge Rules Open Amazon EventBridge console Go to Rules Select workshop rules: AccessCertificationSchedule ComplianceValidationSchedule Click Delete for each rule Step 2: Step Functions Open AWS Step Functions console Select workshop state machines: AccessCertificationWorkflow ComplianceValidationWorkflow Click Delete Confirm deletion Step 3: DynamoDB Tables Open Amazon DynamoDB console Go to Tables Select workshop tables: OperationalProcedures ComplianceEvidence AuditFindings Click Delete for each table Type delete to confirm Step 4: S3 Buckets Empty S3 Buckets Open Amazon S3 console Identify workshop buckets: privilege-analytics-* compliance-reports-* Select bucket and click Empty Type permanently delete to confirm Delete S3 Buckets After emptying, select bucket Click Delete Type bucket name to confirm Step 5: CloudWatch Resources Delete CloudWatch Dashboards Open Amazon CloudWatch console Go to Dashboards Select workshop dashboards: IdentityGovernanceRiskDashboard DailyOperationsDashboard Click Delete for each dashboard Delete CloudWatch Alarms Go to Alarms Select workshop alarms Click Actions → Delete Delete Log Groups Go to Log groups Select workshop log groups Click Actions → Delete log group Step 6: SNS Topics Open Amazon SNS console Go to Topics Select workshop topics: IdentityGovernanceAlerts ComplianceAlerts Click Delete for each topic Confirm deletion Step 7: IAM Resources Delete IAM Roles # List IAM roles created for workshop aws iam list-roles --query \u0026#39;Roles[?contains(RoleName, `IdentityGovernance`) || contains(RoleName, `Compliance`) || contains(RoleName, `Certification`)].RoleName\u0026#39; --output table # Detach policies and delete roles aws iam detach-role-policy --role-name IdentityGovernanceLambdaRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole aws iam delete-role --role-name IdentityGovernanceLambdaRole aws iam delete-role --role-name ComplianceValidationRole aws iam delete-role --role-name CertificationWorkflowRole Delete Custom IAM Policies # List custom policies aws iam list-policies --scope Local --query \u0026#39;Policies[?contains(PolicyName, `IdentityGovernance`) || contains(PolicyName, `Compliance`)].PolicyName\u0026#39; --output table # Delete custom policies aws iam delete-policy --policy-arn arn:aws:iam::ACCOUNT:policy/IdentityGovernancePolicy aws iam delete-policy --policy-arn arn:aws:iam::ACCOUNT:policy/ComplianceValidationPolicy Step 8: CloudFormation Stacks # List CloudFormation stacks aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query \u0026#39;StackSummaries[?contains(StackName, `identity-governance`) || contains(StackName, `compliance`)].StackName\u0026#39; --output table # Delete CloudFormation stacks aws cloudformation delete-stack --stack-name identity-governance-base aws cloudformation delete-stack --stack-name identity-governance-monitoring aws cloudformation delete-stack --stack-name identity-governance-compliance Step 9: AWS Config (if enabled for workshop) # Stop configuration recorder aws configservice stop-configuration-recorder --configuration-recorder-name IdentityGovernanceRecorder # Delete configuration recorder aws configservice delete-configuration-recorder --configuration-recorder-name IdentityGovernanceRecorder # Delete delivery channel aws configservice delete-delivery-channel --delivery-channel-name IdentityGovernanceDeliveryChannel Step 10: CloudTrail (if created for workshop) # List CloudTrail trails aws cloudtrail describe-trails --query \u0026#39;trailList[?contains(Name, `IdentityGovernance`)].Name\u0026#39; --output table # Delete CloudTrail aws cloudtrail delete-trail --name IdentityGovernanceTrail Automated Cleanup Script For convenience, here\u0026rsquo;s a comprehensive cleanup script:\n#!/bin/bash echo \u0026#34;Starting Identity Governance Workshop Cleanup...\u0026#34; # Get account ID ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text) REGION=$(aws configure get region) echo \u0026#34;Account ID: $ACCOUNT_ID\u0026#34; echo \u0026#34;Region: $REGION\u0026#34; # Function to check if resource exists before deletion check_and_delete() { local resource_type=$1 local resource_name=$2 local delete_command=$3 echo \u0026#34;Checking $resource_type: $resource_name\u0026#34; if eval \u0026#34;$delete_command\u0026#34; 2\u0026gt;/dev/null; then echo \u0026#34;✅ Deleted $resource_type: $resource_name\u0026#34; else echo \u0026#34;⚠️ $resource_type not found or already deleted: $resource_name\u0026#34; fi } # Delete Lambda functions echo \u0026#34;🧹 Cleaning up Lambda functions...\u0026#34; LAMBDA_FUNCTIONS=(\u0026#34;IdentityGovernanceMonitor\u0026#34; \u0026#34;AccessReviewGenerator\u0026#34; \u0026#34;ComplianceValidationEngine\u0026#34; \u0026#34;RiskAssessmentEngine\u0026#34;) for func in \u0026#34;${LAMBDA_FUNCTIONS[@]}\u0026#34;; do check_and_delete \u0026#34;Lambda function\u0026#34; \u0026#34;$func\u0026#34; \u0026#34;aws lambda delete-function --function-name $func\u0026#34; done # Delete DynamoDB tables echo \u0026#34;🧹 Cleaning up DynamoDB tables...\u0026#34; DYNAMODB_TABLES=(\u0026#34;CertificationTasks\u0026#34; \u0026#34;OperationsLog\u0026#34; \u0026#34;ComplianceEvidence\u0026#34; \u0026#34;RiskMonitoring\u0026#34; \u0026#34;AuditFindings\u0026#34;) for table in \u0026#34;${DYNAMODB_TABLES[@]}\u0026#34;; do check_and_delete \u0026#34;DynamoDB table\u0026#34; \u0026#34;$table\u0026#34; \u0026#34;aws dynamodb delete-table --table-name $table\u0026#34; done # Delete S3 buckets echo \u0026#34;🧹 Cleaning up S3 buckets...\u0026#34; S3_BUCKETS=(\u0026#34;privilege-analytics-${ACCOUNT_ID}\u0026#34; \u0026#34;compliance-reports-${ACCOUNT_ID}\u0026#34;) for bucket in \u0026#34;${S3_BUCKETS[@]}\u0026#34;; do echo \u0026#34;Emptying S3 bucket: $bucket\u0026#34; aws s3 rm s3://$bucket --recursive 2\u0026gt;/dev/null || echo \u0026#34;Bucket $bucket not found\u0026#34; check_and_delete \u0026#34;S3 bucket\u0026#34; \u0026#34;$bucket\u0026#34; \u0026#34;aws s3 rb s3://$bucket\u0026#34; done # Delete CloudFormation stacks echo \u0026#34;🧹 Cleaning up CloudFormation stacks...\u0026#34; CF_STACKS=(\u0026#34;identity-governance-base\u0026#34; \u0026#34;identity-governance-monitoring\u0026#34; \u0026#34;identity-governance-compliance\u0026#34;) for stack in \u0026#34;${CF_STACKS[@]}\u0026#34;; do check_and_delete \u0026#34;CloudFormation stack\u0026#34; \u0026#34;$stack\u0026#34; \u0026#34;aws cloudformation delete-stack --stack-name $stack\u0026#34; done echo \u0026#34;🎉 Cleanup completed!\u0026#34; echo \u0026#34;Note: Some resources may take a few minutes to be fully deleted.\u0026#34; echo \u0026#34;Please check the AWS Console to verify all resources have been removed.\u0026#34; Step 7: Final Verification Verify Resource Deletion Check AWS Cost Explorer for any remaining charges Use AWS Resource Groups to find tagged resources Search for tag: Project=IdentityGovernance Final Service Checks AWS Config: Disable configuration recorder if not needed AWS Security Hub: Disable if not used elsewhere Amazon GuardDuty: Disable if not needed AWS Audit Manager: Disable data collection Cleanup Verification Report Generate cleanup summary report Document any resources that couldn\u0026rsquo;t be deleted Note any ongoing charges Cost Verification After cleanup, monitor your AWS billing dashboard to ensure no unexpected charges from remaining resources.\nTroubleshooting Common Issues Dependency Errors: Some resources may have dependencies. Delete dependent resources first. Permission Errors: Ensure you have sufficient permissions to delete all resources. Region Issues: Make sure you\u0026rsquo;re deleting resources in the correct region. Manual Cleanup If automated cleanup fails, manually delete resources through the AWS Console:\nGo to each service console Search for resources with names containing \u0026ldquo;IdentityGovernance\u0026rdquo;, \u0026ldquo;Compliance\u0026rdquo;, or \u0026ldquo;Certification\u0026rdquo; Delete resources individually Final Notes This cleanup removes ALL workshop resources Double-check before running cleanup commands Some resources may have a brief delay before deletion Monitor your AWS bill to ensure no charges continue Expected Results After completing the cleanup:\n✅ All workshop Lambda functions deleted ✅ EventBridge rules removed ✅ Step Functions state machines deleted ✅ DynamoDB tables removed ✅ S3 buckets emptied and deleted ✅ CloudWatch resources cleaned up ✅ SNS topics deleted ✅ No ongoing charges from workshop resources ✅ Account returned to pre-workshop state Workshop cleanup completed successfully! 🎉\n"
},
{
	"uri": "http://localhost:1313/workshop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/workshop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]