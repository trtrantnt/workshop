[
{
	"uri": "//localhost:62814/1-gioi-thieu/",
	"title": "1. Introduction",
	"tags": [],
	"description": "",
	"content": "Workshop Overview This workshop will guide you through implementing a comprehensive Identity Governance system with Access Certification on AWS, including:\nAccess Governance: Managing and controlling access rights Certification Automation: Automating access certification processes Privilege Analytics: Analyzing and monitoring privileges Risk Assessment: Security risk evaluation Monitoring Setup: Setting up continuous monitoring Operational Procedures: Operational processes Audit Procedures: Audit processes Compliance Validation: Compliance verification Overall Architecture AWS Services Used (Minimal Architecture) AWS IAM Identity Center - Centralized access management AWS IAM - Identity and access management AWS Lambda - Automation and processing functions Amazon EventBridge - Event-driven orchestration Amazon DynamoDB - Data storage for certifications Amazon S3 - Log storage and data lake AWS CloudTrail - Audit logging Amazon CloudWatch - Monitoring and metrics Amazon SNS - Notifications and alerts Amazon QuickSight - Analytics dashboard AWS Security Hub - Risk assessment and compliance Benefits of Identity Governance 1. Enhanced Security Strict access control Security risk detection and prevention Continuous activity monitoring 2. Regulatory Compliance Meet SOX, SOC2, ISO27001 requirements Automated audit processes Compliance evidence storage 3. Operational Efficiency Automated certification processes Reduced manual work Improved management processes Completion Time Approximately 4-6 hours (can be divided into multiple sessions)\nNext Steps Continue to 2. Preparation Steps to start setting up the environment.\n"
},
{
	"uri": "//localhost:62814/",
	"title": "Identity Governance with Access Certification",
	"tags": [],
	"description": "",
	"content": "Identity Governance with Access Certification Workshop Workshop Overview This comprehensive workshop guides you through implementing Identity Governance with Access Certification on AWS, covering advanced security practices and compliance requirements.\nWorkshop Modules 1. Introduction\r2. Preparation Steps\r3. Access Governance Setup\r4. Certification Automation\r5. Privilege Analytics\r6. Risk Assessment\r7. Monitoring Setup\r8. Operational Procedures\r9. Audit Procedures\r10. Compliance Validation\r11. Clean Resources\rArchitecture Overview Key Benefits Enhanced Security: Strict access control and continuous monitoring Regulatory Compliance: Meet SOX, SOC2, ISO27001 requirements Operational Efficiency: Automated certification and remediation processes Risk Management: Proactive risk assessment and mitigation Prerequisites AWS Account with Administrator privileges Basic understanding of AWS IAM and Organizations Knowledge of compliance frameworks Python and AWS CLI experience "
},
{
	"uri": "//localhost:62814/2-cac-buoc-chuan-bi/",
	"title": "2. Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Environment Setup 1. Create S3 Buckets for Data Storage Navigate to Amazon S3 service in the AWS Console Click Create bucket Create first bucket for analytics data: Bucket name: identity-governance-analytics AWS Region: Select your preferred region (e.g., us-east-1) Object Ownership: ACLs disabled (recommended) Block Public Access settings: Keep all blocked (recommended) Bucket Versioning: Enable Default encryption: Server-side encryption with Amazon S3 managed keys (SSE-S3) Bucket Key: Enable Click Create bucket Create second bucket for compliance reports: Bucket name: identity-governance-reports AWS Region: Same as first bucket Object Ownership: ACLs disabled (recommended) Block Public Access settings: Keep all blocked (recommended) Bucket Versioning: Enable Default encryption: Server-side encryption with Amazon S3 managed keys (SSE-S3) Bucket Key: Enable Object Lock: Enable for compliance retention Click Create bucket Verify both buckets are created successfully: Infrastructure Preparation 1. Enable AWS CloudTrail Navigate to CloudTrail service in AWS Console Click Create trail Step 1: General details Enter basic information: Trail name: IdentityGovernanceTrail Enable for all accounts in my organization: Leave unchecked Step 2: S3 bucket configuration Configure S3 storage:\nCreate new S3 bucket: Select this option (LEAVE BLANK - DO NOT select \u0026ldquo;Use existing S3 bucket\u0026rdquo;) S3 bucket name: CloudTrail will auto-generate name (e.g., aws-cloudtrail-logs-123456789012-abc12345) Configure security settings:\nLog file SSE-KMS encryption: Unchecked (keep default) Log file validation: Checked (recommended) Step 3: CloudWatch Logs (Optional) CloudWatch Logs configuration:\nCloudWatch Logs: Unchecked (skip for now) Click Next\nStep 4: Choose log events Select event types to log: Management events: Checked Read: Checked Write: Checked Data events: Unchecked (skip) Insight events: Unchecked (skip) Click Next Step 5: Review and create Review configuration: Confirm trail name Confirm new S3 bucket will be created Confirm management events are enabled Click Create trail IMPORTANT: NEVER select the identity-governance-analytics bucket or any bucket you created before ALWAYS choose \u0026ldquo;Create new S3 bucket\u0026rdquo; to let CloudTrail create its own bucket CloudTrail will automatically configure the correct bucket policy, avoiding InsufficientS3BucketPolicyException error 2. Enable AWS Security Hub Navigate to AWS Security Hub service in AWS Console You\u0026rsquo;ll see the Security Hub Onboard page Step 1: Configure Security Hub In the Configure Security Hub section: Read information about Service Linked Roles (SLRs) Keep default settings Step 2: Delegated Administrator Account In the Delegated administrator account section: Choose Do not select an account (for single account setup) Step 3: Account Enablement In the Account enablement section: ☑️ Enable Security Hub for my account (keep checked) Step 4: Delegated Administrator Policy In the Delegated administrator policy section: Read policy details Keep default settings Click Onboard at the bottom of the page Step 5: Verify successful activation After successful onboarding, you\u0026rsquo;ll see the Security Hub dashboard: Security score displayed Findings start being collected Standards automatically enabled 3. Create DynamoDB Tables Navigate to DynamoDB service Click Create table Create first table: Table name: AccessCertifications Partition key: UserId (String) Sort key: CertificationDate (String) Billing mode: On-demand Click Create table\nCreate second table:\nTable name: RiskAssessments Partition key: AssessmentId (String) Billing mode: On-demand Click Create table\n4. Create Required IAM Roles Navigate to IAM service Click Roles in the sidebar Click Create role Create role for Lambda: Trusted entity: AWS service Service: Lambda Role name: IdentityGovernanceLambdaRole Policies: Attach AWSLambdaBasicExecutionRole Verification 1. Check Enabled Services CloudTrail: Go to CloudTrail console, confirm trail is created and active S3: Go to S3 console, confirm 3 buckets created (2 your buckets + 1 CloudTrail bucket) Security Hub: Go to Security Hub console, confirm service is enabled with security score DynamoDB: Go to DynamoDB console, confirm 2 tables created IAM: Go to IAM console, confirm Lambda role is created 2. Check Access Permissions Go to IAM console Click Users and confirm current user has required permissions Click Roles and confirm roles are created Expected Results After completing the preparation steps:\n✅ AWS Account properly configured ✅ Required AWS services enabled ✅ Base infrastructure deployed ✅ Permissions validated ✅ Workshop materials ready Next Steps Continue to 3. Access Governance Setup to start implementing the system.\n"
},
{
	"uri": "//localhost:62814/3-thiet-lap-access-governance/",
	"title": "3. Access Governance Setup",
	"tags": [],
	"description": "",
	"content": "Objective Set up centralized access management foundation with AWS IAM Identity Center and IAM.\nStep 1: IAM Foundation Setup 1.1 Create IAM Groups Navigate to IAM service in AWS Console Click User groups in the sidebar Click Create group Enter group information: Group name: SecurityAuditors Click Create group 1.2 Create IAM Policies Click Policies in the sidebar Click Create policy Use JSON editor to create custom policy: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:Get*\u0026#34;, \u0026#34;iam:List*\u0026#34;, \u0026#34;iam:Generate*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;cloudtrail:Get*\u0026#34;, \u0026#34;cloudtrail:List*\u0026#34;, \u0026#34;cloudtrail:Describe*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Name the policy: SecurityAuditPolicy Click Create policy Step 2: Configure IAM Identity Center 2.1 Enable IAM Identity Center Search and open IAM Identity Center in AWS Console Click Enable to activate IAM Identity Center Choose region to store identity store Select Use IAM Identity Center as my identity source 2.2 Create Permission Sets In IAM Identity Center, click Permission sets in the sidebar Click Create permission set Select Predefined permission set Choose SecurityAudit from dropdown Enter information: Name: SecurityAuditor Description: Read-only access for security auditing Session duration: 8 hours Click Next and Create Step 3: Identity Store Setup 3.1 Create Users and Groups In IAM Identity Center, click Users in the sidebar\nClick Add user\nEnter user information:\nUsername: security-auditor Email: auditor@company.com First name: Security Last name: Auditor Click Next and Add user\n3.2 Create Groups Click Groups in the sidebar\nClick Create group\nEnter:\nGroup name: SecurityAuditors Description: Security auditing team Add users to group\nSelect user security-auditor Click Create group\nStep 4: Assign Access 4.1 Assign Permission Sets to Accounts Click AWS accounts in the sidebar\nSelect the account to assign permissions\nClick Assign users or groups\nSelect Groups tab\nSelect group SecurityAuditors\nClick Next\nSelect permission set SecurityAuditor\nClick Next and Submit\nExpected Results After completing this step, you will have:\n✅ IAM Groups and Policies configured ✅ IAM Identity Center activated ✅ Permission Sets for governance roles ✅ Identity Store with groups and users ✅ Access assignments configured Next Steps Continue to 4. Certification Automation to set up automated certification processes.\n"
},
{
	"uri": "//localhost:62814/4-tu-dong-hoa-certification/",
	"title": "4. Certification Automation",
	"tags": [],
	"description": "",
	"content": "Objective Automate access certification processes to ensure access rights are reviewed periodically and comply with security requirements.\nStep 1: Setup DynamoDB for Certification Data 1.1 Create DynamoDB Table Open Amazon DynamoDB in the console Click Create table Enter table details: Table name: AccessCertifications Partition key: UserId (String) Sort key: CertificationDate (String) Billing mode: On-demand Click Create table Step 2: Create Lambda Function 2.1 Create Lambda Function Open AWS Lambda in the console Click Create function Choose Author from scratch Enter function details: Function name: AccessCertificationTrigger Runtime: Python 3.9 Architecture: x86_64 Click Create function 2.2 Configure Lambda Function Code In the Code tab, replace the default code with the following: import json import boto3 from datetime import datetime def lambda_handler(event, context): print(\u0026#34;Access Certification Trigger Started\u0026#34;) # Initialize AWS clients dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) table = dynamodb.Table(\u0026#39;AccessCertifications\u0026#39;) # Create certification record response = table.put_item( Item={ \u0026#39;UserId\u0026#39;: \u0026#39;system\u0026#39;, \u0026#39;CertificationDate\u0026#39;: datetime.now().isoformat(), \u0026#39;Status\u0026#39;: \u0026#39;Triggered\u0026#39;, \u0026#39;Type\u0026#39;: \u0026#39;Quarterly Review\u0026#39; } ) return { \u0026#39;statusCode\u0026#39;: 200, \u0026#39;body\u0026#39;: json.dumps(\u0026#39;Certification process triggered successfully\u0026#39;) } Click Deploy to save changes 2.3 Configure IAM Role for Lambda Go to Configuration tab Click Permissions Click on the role name to open IAM console Click Add permissions → Attach policies Search and attach policy AmazonDynamoDBFullAccess Step 3: Setup EventBridge Scheduler 3.1 Create Scheduled Rule Open Amazon EventBridge in AWS Console Click Rules in the sidebar Click Create rule Step 1: Define rule detail Enter rule information: Name: AccessCertificationSchedule Description: Quarterly access certification review Event bus: default Enable the rule on the selected event bus: ✅ Checked In Rule type, select Schedule Click Next Step 2: Define schedule In Occurrence, select Recurring schedule In Schedule pattern, select Rate-based schedule Enter 90 and select Days In Flexible time window, enter 15 minutes Click Next Step 3: Select target In Target API, select AWS Lambda Choose API Invoke In Lambda function, select AccessCertificationTrigger Click Next Step 4: Configure tags (Optional) Skip the tags section, click Next Step 5: Review and create Review configuration and click Create rule Step 4: Test the Automation 4.1 Manual Test Execution In EventBridge, select your rule Click Actions → Test rule Monitor Lambda function execution in CloudWatch Logs Expected Results After completion:\n✅ DynamoDB table for certification data storage ✅ Lambda function processing certification logic ✅ EventBridge scheduled triggers quarterly ✅ Automated quarterly access reviews ✅ Audit trail and monitoring Next Steps Continue to 5. Privilege Analytics to set up privilege analysis.\n"
},
{
	"uri": "//localhost:62814/5-phan-tich-dac-quyen/",
	"title": "5. Privilege Analytics",
	"tags": [],
	"description": "",
	"content": "Objective Analyze and monitor privilege usage to detect security risks, excessive permissions, and anomalous patterns.\nAnalytics Architecture graph TB A[CloudTrail Logs] --\u0026gt; B[S3 Data Lake] C[IAM Data] --\u0026gt; B B --\u0026gt; D[Lambda Analytics] D --\u0026gt; E[DynamoDB Results] E --\u0026gt; F[QuickSight Dashboard] D --\u0026gt; G[CloudWatch Metrics] G --\u0026gt; H[SNS Alerts] Step 1: CloudTrail Setup for Data Collection 1.1 Create CloudTrail Open AWS CloudTrail in the console Click Create trail Configure trail settings: Trail name: PrivilegeAnalyticsTrail Apply trail to all regions: Yes Management events: Read and Write Configure S3 bucket: Create new S3 bucket: Yes S3 bucket name: privilege-analytics-logs-[account-id] Log file prefix: cloudtrail-logs/ Enable Log file validation Click Create trail Step 2: Lambda Analytics Engine Setup 2.1 Create Lambda Function for Analytics Open AWS Lambda in the console Create new function: PrivilegeAnalyticsEngine Choose runtime Python 3.9 2.2 Configure Lambda to Read S3 Data Add IAM permissions for S3 and DynamoDB Configure S3 trigger from bucket Upload analytics code 2.3 Process Analytics Data Lambda function processes CloudTrail logs Calculates risk scores and usage patterns Stores results in DynamoDB Step 3: QuickSight Dashboard Setup 3.1 Create QuickSight Account Open Amazon QuickSight in the console Sign up for QuickSight if not already done Choose Standard edition 3.2 Create Data Source Click Datasets in QuickSight Click New dataset Choose Athena as data source Configure Athena connection: Data source name: PrivilegeAnalytics Database: privilege_analytics_db Table: cloudtrail_logs 3.3 Create Analysis Dashboard Click Create analysis Add visualizations for: Top users by activity High-risk events timeline Geographic access patterns Configure filters and parameters Publish the dashboard Step 4: Set Up Automated Analysis 4.1 Create Lambda for Risk Scoring Open AWS Lambda console Create function PrivilegeRiskScoring Configure to run daily via EventBridge 4.2 Configure CloudWatch Alarms Open CloudWatch console Create alarms for high-risk activities Set SNS notifications Expected Results After completion:\n✅ CloudTrail collecting privilege data ✅ Athena tables for analytics queries ✅ QuickSight dashboard for visualization ✅ Automated risk scoring ✅ CloudWatch monitoring and alerts Next Steps Continue to 6. Risk Assessment to set up comprehensive risk assessment.\n"
},
{
	"uri": "//localhost:62814/6-danh-gia-rui-ro/",
	"title": "6. Risk Assessment",
	"tags": [],
	"description": "",
	"content": "Objective Establish a comprehensive risk assessment system to detect, analyze, and prioritize security risks related to identity and access management.\nRisk Assessment Architecture graph TB A[CloudTrail Events] --\u0026gt; B[Lambda Risk Engine] C[IAM Data] --\u0026gt; B B --\u0026gt; D[DynamoDB Risk Data] D --\u0026gt; E[Security Hub Findings] E --\u0026gt; F[CloudWatch Metrics] F --\u0026gt; G[SNS Alerts] D --\u0026gt; H[QuickSight Dashboard] Step 1: Lambda Risk Engine Setup 1.1 Create Risk Assessment Lambda Open AWS Lambda in the console Click Create function Configure: Function name: IdentityRiskEngine Runtime: Python 3.9 Role: Create new role with DynamoDB and Security Hub permissions 1.2 Configure Risk Assessment Logic Add environment variables: RISK_TABLE: RiskAssessments SNS_TOPIC: Risk alert topic ARN Upload risk assessment code Configure EventBridge trigger for daily execution Step 2: Security Hub Integration 3.1 Enable AWS Security Hub Open AWS Security Hub in the console Click Go to Security Hub Enable security standards: AWS Foundational Security Standard CIS AWS Foundations Benchmark PCI DSS Click Enable Security Hub 3.2 Configure Integrations Go to Integrations tab Enable integrations: AWS Config Amazon GuardDuty AWS Inspector Configure custom insights for risk assessment Step 3: CloudWatch Dashboard for Risk Monitoring 4.1 Create Risk Assessment Dashboard Open Amazon CloudWatch console Click Dashboards in sidebar Click Create dashboard Name: IdentityGovernanceRiskDashboard Add widgets for: Security Hub findings GuardDuty threats Config compliance 4.2 Configure Risk Alarms Click Alarms in CloudWatch Click Create alarm Configure alarms for: High severity findings Critical GuardDuty threats Config rule violations Set SNS notifications Expected Results After completion:\n✅ AWS Config monitoring compliance ✅ GuardDuty detecting threats ✅ Security Hub centralizing findings ✅ CloudWatch dashboard for risk metrics ✅ Automated alerting for high-risk events ✅ Integrated security monitoring Next Steps Continue to 7. Monitoring Setup to set up comprehensive monitoring.\n"
},
{
	"uri": "//localhost:62814/7-thiet-lap-giam-sat/",
	"title": "7. Monitoring Setup",
	"tags": [],
	"description": "",
	"content": "Objective Set up comprehensive monitoring system to continuously track identity governance activities, detect anomalies, and ensure compliance.\nMonitoring Architecture graph TB A[CloudTrail] --\u0026gt; B[CloudWatch Logs] C[Lambda Functions] --\u0026gt; B D[Security Hub] --\u0026gt; B B --\u0026gt; E[CloudWatch Metrics] E --\u0026gt; F[CloudWatch Alarms] F --\u0026gt; G[SNS Notifications] E --\u0026gt; H[Custom Dashboard] B --\u0026gt; I[Log Analytics] I --\u0026gt; J[Anomaly Detection] Step 1: CloudWatch Logs Setup 1.1 Create Log Groups Open Amazon CloudWatch console Click Log groups in sidebar Click Create log group Configure log group: Log group name: /aws/identity-governance/events Retention setting: 1 year Click Create 1.2 Set Up SNS Topic for Alerts Open Amazon SNS console Click Topics in sidebar Click Create topic Configure topic: Type: Standard Name: IdentityGovernanceAlerts Display name: Identity Governance Alerts Create subscription with your email Step 2: CloudWatch Metrics and Alarms 2.1 Create Custom Metrics In CloudWatch console, click All metrics Click Browse tab Create custom namespace: IdentityGovernance 2.2 Set Up Alarms Click Alarms in CloudWatch Click Create alarm Configure alarm for failed logins: Metric: Custom metric for failed logins Threshold: \u0026gt; 5 in 5 minutes Action: Send to SNS topic Create additional alarms for: Privilege escalation events Off-hours access Unusual geographic access Step 3: CloudWatch Insights Setup 3.1 Create Insights Queries Click Logs Insights in CloudWatch Select log group: /aws/cloudtrail Create saved queries for monitoring 3.2 Failed Login Analysis Run query for failed logins: fields @timestamp, sourceIPAddress, userIdentity.userName, errorMessage | filter eventName = \u0026#34;ConsoleLogin\u0026#34; and errorCode != \u0026#34;Success\u0026#34; | stats count() by userIdentity.userName | sort count desc 3.3 Privilege Escalation Monitoring Create query for privilege changes: fields @timestamp, eventName, userIdentity.userName, sourceIPAddress | filter eventName in [\u0026#34;AttachUserPolicy\u0026#34;, \u0026#34;CreateRole\u0026#34;, \u0026#34;PutUserPolicy\u0026#34;] | sort @timestamp desc Save queries for regular use Step 4: Automated Monitoring with Lambda 4.1 Create Monitoring Lambda Function Open AWS Lambda console Click Create function Configure function: Name: IdentityGovernanceMonitor Runtime: Python 3.9 4.2 Configure Lambda Triggers Add EventBridge trigger Set schedule: rate(1 hour) Add CloudWatch Logs trigger for real-time analysis 4.3 Configure Environment Variables Set environment variables: SNS_TOPIC_ARN: Your SNS topic ARN LOG_GROUP_NAME: /aws/identity-governance/events Step 5: Dashboard and Reporting 5.1 Create Monitoring Dashboard In CloudWatch, click Dashboards Click Create dashboard Name: IdentityGovernanceMonitoring Add widgets for: Failed login attempts Privilege escalation events Geographic access patterns System health metrics 5.2 Set Up Automated Reports Create EventBridge rule for daily reports Configure Lambda to generate reports Send reports via email Expected Results After completion:\n✅ CloudWatch Logs collecting identity events ✅ Custom metrics and alarms configured ✅ CloudWatch Insights for log analysis ✅ Lambda functions for automated monitoring ✅ SNS notifications for alerts ✅ Comprehensive monitoring dashboard Next Steps Continue to 8. Operational Procedures to set up operational processes.\n"
},
{
	"uri": "//localhost:62814/8-quy-trinh-van-hanh/",
	"title": "8. Operational Procedures",
	"tags": [],
	"description": "",
	"content": "Objective Establish standardized operational procedures to manage identity governance effectively, ensuring consistency and compliance.\nProcess Overview graph TB A[Daily Operations] --\u0026gt; B[Weekly Reviews] B --\u0026gt; C[Monthly Assessments] C --\u0026gt; D[Quarterly Certifications] E[Incident Response] --\u0026gt; F[Investigation] F --\u0026gt; G[Remediation] G --\u0026gt; H[Documentation] I[Change Management] --\u0026gt; J[Approval Process] J --\u0026gt; K[Implementation] K --\u0026gt; L[Validation] Step 1: Daily Operations Dashboard 1.1 Create Operations Dashboard Open Amazon CloudWatch console Click Dashboards Click Create dashboard Name: DailyOperationsDashboard Add widgets for daily monitoring: Failed login attempts (last 24h) High-risk alerts System health status Pending certifications 1.2 Set Up Daily Checklist Automation Open AWS Lambda console Create function: DailyOperationsChecklist Configure EventBridge trigger for daily execution Configure Lambda to check: Security Hub findings CloudWatch alarms DynamoDB table health Store results in DynamoDB table: AccessCertifications Step 2: Standard Operating Procedures (SOPs) 2.1 Create SOP Documentation in Wiki Open Amazon WorkDocs or create S3 bucket for documentation Create folder structure for SOPs Create SOP-001: Daily Monitoring Procedures Include sections: Purpose and Scope Daily procedures timeline Escalation criteria Contact information 2.2 Implement SOP Tracking Create DynamoDB table for SOP tracking: Table name: OperationalProcedures Primary key: procedure_id Create Lambda function to track SOP execution Configure EventBridge rules for SOP scheduling Step 3: Weekly Review Automation 3.1 Set Up Weekly Review Reports Open Amazon QuickSight Create Weekly Review Dashboard Configure data sources: CloudWatch metrics Security Hub findings Config compliance data 3.2 Automate Weekly Report Generation Create Lambda function for weekly reports Configure EventBridge rule: Schedule: Every Monday at 9:00 AM Target: Weekly report Lambda Configure report delivery via SES Step 4: Incident Response Runbooks 4.1 Create Digital Runbooks Open AWS Systems Manager Click Documents Create Command document for incident response Configure runbook sections: Incident classification Initial response steps Investigation procedures Escalation matrix 4.2 Implement Incident Tracking Create ServiceNow integration or use AWS Support Cases Configure ChatBot for Slack/Teams notifications Set up PagerDuty integration for on-call management 4.3 Test Runbook Procedures Schedule tabletop exercises Document lessons learned Update runbooks based on feedback Expected Results After completion:\n✅ CloudWatch dashboard for daily operations ✅ Automated SOP execution and tracking ✅ Weekly review reports via QuickSight ✅ Digital incident response runbooks ✅ Integrated incident tracking system ✅ Automated operational workflows Next Steps Continue to 9. Audit Procedures to set up audit processes.\n"
},
{
	"uri": "//localhost:62814/9-quy-trinh-kiem-toan/",
	"title": "9. Audit Procedures",
	"tags": [],
	"description": "",
	"content": "Objective Establish comprehensive audit procedures to ensure compliance with security, legal, and internal requirements in identity governance management.\nAudit Architecture graph TB A[Audit Planning] --\u0026gt; B[Evidence Collection] B --\u0026gt; C[Analysis \u0026amp; Testing] C --\u0026gt; D[Findings Documentation] D --\u0026gt; E[Remediation Tracking] E --\u0026gt; F[Audit Reporting] G[Continuous Monitoring] --\u0026gt; H[Automated Controls Testing] H --\u0026gt; I[Exception Reporting] I --\u0026gt; J[Management Dashboard] Step 1: Lambda-based Audit Framework Setup 1.1 Create Audit Lambda Function Open AWS Lambda console Create function: ComplianceAuditEngine Configure EventBridge trigger for daily execution 1.2 Configure Audit Logic Add environment variables: AUDIT_TABLE: RiskAssessments SNS_TOPIC: Audit notification topic Upload audit code to check: IAM policies compliance Access patterns analysis Security Hub findings review Step 2: DynamoDB Audit Data Storage 2.1 Configure Audit Data Storage Use existing DynamoDB table: RiskAssessments Lambda function stores audit results Configure data retention policies 2.2 Set Up CloudWatch Monitoring Lambda sends metrics to CloudWatch Configure alarms for audit failures Set up SNS notifications Step 3: Control Testing and Evidence Review 3.1 Review Control Evidence Navigate to Control sets in your assessment Review each control: Evidence status Compliance rating Comments and findings Upload additional evidence if needed Add control testing notes 3.2 Document Findings For each control, document: Testing procedures performed Results and observations Exceptions or deficiencies Recommendations Assign risk ratings to findings Set remediation timelines Step 4: Generate Audit Reports 4.1 Create Assessment Report Click Generate assessment report Select report format: PDF or HTML Configure report sections: Executive summary Control testing results Findings and recommendations Evidence appendix 4.2 Share Report with Stakeholders Download completed report Share with: Executive leadership Audit committee Compliance team Expected Results After completion:\n✅ AWS Audit Manager configured ✅ Custom audit framework created ✅ Assessment with evidence collection ✅ Control testing documentation ✅ Comprehensive audit reports ✅ Stakeholder communication process Next Steps Continue to 10. Compliance Validation to complete the workshop.\n"
},
{
	"uri": "//localhost:62814/10-xac-thuc-tuan-thu/",
	"title": "10. Compliance Validation",
	"tags": [],
	"description": "",
	"content": "Objective Validate and maintain compliance with security frameworks and legal regulations through identity governance, ensuring the organization meets SOX, SOC2, ISO27001, PCI-DSS, and other standards.\nCompliance Framework Mapping graph TB A[Identity Governance Controls] --\u0026gt; B[SOX Compliance] A --\u0026gt; C[SOC2 Type II] A --\u0026gt; D[ISO 27001] A --\u0026gt; E[PCI-DSS] A --\u0026gt; F[NIST Framework] B --\u0026gt; G[Audit Evidence] C --\u0026gt; G D --\u0026gt; G E --\u0026gt; G F --\u0026gt; G G --\u0026gt; H[Compliance Dashboard] G --\u0026gt; I[Regulatory Reports] Step 1: AWS Artifact for Compliance Documentation 1.1 Access AWS Artifact Open AWS Artifact in the console Review available compliance reports: SOC reports PCI DSS documentation ISO 27001 certification Download relevant compliance documents Review AWS responsibility matrix 1.2 Map Controls to Frameworks Create compliance mapping spreadsheet Map identity governance controls to: SOX Section 302/404 SOC 2 Type II ISO 27001 Annex A PCI DSS Requirements Document shared responsibility model Step 2: Compliance Dashboard with Security Hub 2.1 Configure Compliance Standards Open AWS Security Hub Go to Security standards Enable compliance standards: AWS Foundational Security Standard CIS AWS Foundations Benchmark PCI DSS Review compliance scores for each standard 2.2 Create Compliance Dashboard Open Amazon QuickSight Create Compliance Dashboard Connect to Security Hub data Add visualizations for: Overall compliance score Framework-specific scores Trending compliance metrics Critical findings Set up automated refresh schedule Step 3: Automated Compliance Reporting 3.1 Set Up Report Generation Create S3 bucket for compliance reports: Bucket name: compliance-reports-[account-id] Versioning: Enabled Retention: 7 years Configure lifecycle policies for long-term retention 3.2 Create Report Generation Lambda Open AWS Lambda Create function: ComplianceReportGenerator Configure to generate reports from: Security Hub findings Config compliance data Audit Manager evidence 3.3 Schedule Quarterly Reports Open Amazon EventBridge Create rule: QuarterlyComplianceReporting Set schedule: First day of quarter at 9 AM Configure email delivery via SES Step 4: Compliance Validation Testing 4.1 Test Compliance Controls Use Security Hub findings to validate: IAM password policies MFA requirements Access key rotation Review Lambda audit results in DynamoDB Document control effectiveness 4.2 Generate Compliance Evidence Collect evidence from: CloudTrail logs Security Hub findings DynamoDB audit records Lambda execution logs Store evidence in S3 with encryption Create evidence inventory in DynamoDB 4.3 Validate Report Generation Test quarterly report generation Review report content and format Validate stakeholder distribution Expected Results After completing this workshop, you will have:\n✅ Comprehensive Identity Governance System Centralized access management with AWS IAM Identity Center Automated access certification workflows Real-time privilege analytics and risk assessment Continuous monitoring and alerting ✅ Compliance Framework Implementation SOX, SOC2, ISO27001, PCI-DSS compliance validation Automated evidence collection via AWS services Regulatory reporting capabilities Audit trail maintenance in S3 ✅ Operational Excellence CloudWatch dashboards for operations Automated incident response procedures Systems Manager runbooks Performance monitoring and alerting ✅ Audit and Governance AWS Audit Manager framework Automated control testing via Config Security Hub findings tracking QuickSight management reporting Best Practices Summary Implement Least Privilege: Use IAM Identity Center permission sets Automate Where Possible: Leverage AWS native automation services Monitor Continuously: Use CloudWatch and Security Hub Document Everything: Store evidence in S3 with proper retention Regular Reviews: Schedule automated assessments Stay Updated: Monitor AWS compliance documentation updates Reference Documentation AWS IAM Identity Center Documentation AWS Organizations Best Practices SOX Compliance Guidelines SOC 2 Framework ISO 27001 Standard Support If you encounter issues during deployment, please:\nCheck CloudWatch Logs for debugging Review IAM permissions Refer to AWS documentation Contact support team if needed Workshop completed successfully! 🎉\nNext Steps Continue to 11. Clean Resources to clean up workshop resources.\n"
},
{
	"uri": "//localhost:62814/11-clean-resources/",
	"title": "11. Clean Resources",
	"tags": [],
	"description": "",
	"content": "Overview This section provides comprehensive instructions for cleaning up all AWS resources created during the Identity Governance workshop to avoid unnecessary charges.\nImportant Notes ⚠️ Warning: Following these cleanup steps will permanently delete all resources and data created during the workshop. Make sure you have backed up any important configurations or data before proceeding.\nCleanup Order Resources should be cleaned up in the following order to avoid dependency conflicts:\nLambda Functions and EventBridge Rules Step Functions State Machines DynamoDB Tables S3 Buckets and Objects CloudWatch Resources IAM Roles and Policies CloudFormation Stacks AWS Organizations (if created) IAM Identity Center (if no longer needed) Step 1: Lambda Functions and EventBridge Delete Lambda Functions Open AWS Lambda console Filter functions by workshop names: IdentityGovernance AccessCertification ComplianceValidation Select workshop functions Click Actions → Delete Confirm deletion by typing delete Delete EventBridge Rules Open Amazon EventBridge console Go to Rules Select workshop rules: AccessCertificationSchedule ComplianceValidationSchedule Click Delete for each rule Step 2: Step Functions Open AWS Step Functions console Select workshop state machines: AccessCertificationWorkflow ComplianceValidationWorkflow Click Delete Confirm deletion Step 3: DynamoDB Tables Open Amazon DynamoDB console Go to Tables Select workshop tables: OperationalProcedures ComplianceEvidence AuditFindings Click Delete for each table Type delete to confirm Step 4: S3 Buckets Empty S3 Buckets Open Amazon S3 console Identify workshop buckets: privilege-analytics-* compliance-reports-* Select bucket and click Empty Type permanently delete to confirm Delete S3 Buckets After emptying, select bucket Click Delete Type bucket name to confirm Step 5: CloudWatch Resources Delete CloudWatch Dashboards Open Amazon CloudWatch console Go to Dashboards Select workshop dashboards: IdentityGovernanceRiskDashboard DailyOperationsDashboard Click Delete for each dashboard Delete CloudWatch Alarms Go to Alarms Select workshop alarms Click Actions → Delete Delete Log Groups Go to Log groups Select workshop log groups Click Actions → Delete log group Step 6: SNS Topics Open Amazon SNS console Go to Topics Select workshop topics: IdentityGovernanceAlerts ComplianceAlerts Click Delete for each topic Confirm deletion Step 7: IAM Resources Delete IAM Roles Navigate to IAM service in AWS Console Click Roles in the sidebar Search for workshop roles: IdentityGovernanceLambdaRole ComplianceValidationRole CertificationWorkflowRole Select each role and click Delete Type role name to confirm deletion Delete Custom IAM Policies Click Policies in the sidebar Filter by Customer managed Search for workshop policies: SecurityAuditPolicy IdentityGovernancePolicy ComplianceValidationPolicy Select each policy and click Actions → Delete Confirm deletion Delete IAM Users and Groups Click Users in the sidebar Select workshop users and click Delete Click User groups in the sidebar Select workshop groups and click Delete Step 8: IAM Identity Center Cleanup Remove Permission Set Assignments Navigate to IAM Identity Center Click AWS accounts in the sidebar Select your account and click Remove access Delete Permission Sets Click Permission sets in the sidebar Select workshop permission sets: SecurityAuditor ComplianceReviewer Click Delete Delete Users and Groups Click Users in the sidebar Select workshop users and click Delete Click Groups in the sidebar Select workshop groups and click Delete Step 9: AWS Config Cleanup Navigate to AWS Config service Click Settings in the sidebar Click Edit and then Delete configuration recorder Confirm deletion by typing delete Step 10: CloudTrail Cleanup Navigate to CloudTrail service Click Trails in the sidebar Select IdentityGovernanceTrail Click Delete Type trail name to confirm deletion Console-Based Cleanup Checklist For systematic cleanup through AWS Console, follow this checklist:\n✅ Cleanup Checklist Lambda Functions:\nIdentityGovernanceMonitor AccessReviewGenerator ComplianceValidationEngine RiskAssessmentEngine CertificationNotifier EventBridge Rules:\nAccessCertificationSchedule ComplianceValidationSchedule RiskAssessmentSchedule Step Functions:\nAccessCertificationWorkflow ComplianceValidationWorkflow DynamoDB Tables:\nCertificationTasks OperationsLog ComplianceEvidence RiskMonitoring AuditFindings S3 Buckets:\nprivilege-analytics-[ACCOUNT-ID] compliance-reports-[ACCOUNT-ID] CloudWatch Resources:\nIdentityGovernanceRiskDashboard DailyOperationsDashboard All workshop alarms All workshop log groups SNS Topics:\nIdentityGovernanceAlerts ComplianceAlerts IAM Resources:\nWorkshop IAM roles Workshop IAM policies Workshop IAM users Workshop IAM groups IAM Identity Center:\nPermission set assignments Permission sets SSO users and groups Other Services:\nAWS Config recorder CloudTrail trail GuardDuty detector (if not needed) Step 7: Final Verification Verify Resource Deletion Check AWS Cost Explorer for any remaining charges Use AWS Resource Groups to find tagged resources Search for tag: Project=IdentityGovernance Final Service Checks AWS Config: Disable configuration recorder if not needed AWS Security Hub: Disable if not used elsewhere Amazon GuardDuty: Disable if not needed AWS Audit Manager: Disable data collection Cleanup Verification Report Generate cleanup summary report Document any resources that couldn\u0026rsquo;t be deleted Note any ongoing charges Cost Verification After cleanup, monitor your AWS billing dashboard to ensure no unexpected charges from remaining resources.\nTroubleshooting Common Issues Dependency Errors: Some resources may have dependencies. Delete dependent resources first. Permission Errors: Ensure you have sufficient permissions to delete all resources. Region Issues: Make sure you\u0026rsquo;re deleting resources in the correct region. Manual Cleanup If automated cleanup fails, manually delete resources through the AWS Console:\nGo to each service console Search for resources with names containing \u0026ldquo;IdentityGovernance\u0026rdquo;, \u0026ldquo;Compliance\u0026rdquo;, or \u0026ldquo;Certification\u0026rdquo; Delete resources individually Final Notes This cleanup removes ALL workshop resources Double-check before running cleanup commands Some resources may have a brief delay before deletion Monitor your AWS bill to ensure no charges continue Expected Results After completing the cleanup:\n✅ All workshop Lambda functions deleted ✅ EventBridge rules removed ✅ Step Functions state machines deleted ✅ DynamoDB tables removed ✅ S3 buckets emptied and deleted ✅ CloudWatch resources cleaned up ✅ SNS topics deleted ✅ No ongoing charges from workshop resources ✅ Account returned to pre-workshop state Workshop cleanup completed successfully! 🎉\n"
},
{
	"uri": "//localhost:62814/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:62814/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]