[
{
	"uri": "//localhost:1313/1-gioi-thieu/",
	"title": "1. Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction to Identity Governance with Access Certification Workshop Overview This workshop will guide you through implementing a comprehensive Identity Governance system with Access Certification on AWS, including:\nAccess Governance: Managing and controlling access rights Certification Automation: Automating access certification processes Privilege Analytics: Analyzing and monitoring privileges Risk Assessment: Security risk evaluation Monitoring Setup: Setting up continuous monitoring Operational Procedures: Operational processes Audit Procedures: Audit processes Compliance Validation: Compliance verification Overall Architecture graph TB A[Identity Provider] --\u0026gt; B[AWS IAM Identity Center] B --\u0026gt; C[Access Management] C --\u0026gt; D[Privilege Analytics] D --\u0026gt; E[Risk Assessment] E --\u0026gt; F[Access Certification] F --\u0026gt; G[Compliance Reporting] H[CloudTrail] --\u0026gt; I[Monitoring \u0026amp; Alerting] I --\u0026gt; J[Operational Dashboard] K[Automation Engine] --\u0026gt; L[Certification Workflows] L --\u0026gt; M[Remediation Actions] AWS Services Used AWS IAM Identity Center - Centralized access management AWS Organizations - Multi-account governance AWS CloudTrail - Audit logging AWS Config - Compliance monitoring AWS Lambda - Automation functions Amazon EventBridge - Event-driven automation Amazon S3 - Data storage Amazon Athena - Analytics queries Amazon QuickSight - Reporting dashboard AWS Systems Manager - Operational management Benefits of Identity Governance 1. Enhanced Security Strict access control Security risk detection and prevention Continuous activity monitoring 2. Regulatory Compliance Meet SOX, SOC2, ISO27001 requirements Automated audit processes Compliance evidence storage 3. Operational Efficiency Automated certification processes Reduced manual work Improved management processes Completion Time Approximately 4-6 hours (can be divided into multiple sessions)\nNext Steps Continue to 2. Preparation Steps to start setting up the environment.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Identity Governance with Access Certification",
	"tags": [],
	"description": "",
	"content": "Identity Governance with Access Certification Workshop Workshop Overview This comprehensive workshop guides you through implementing Identity Governance with Access Certification on AWS, covering advanced security practices and compliance requirements.\nWorkshop Modules 1. Introduction\r2. Preparation Steps\r3. Access Governance Setup\r4. Certification Automation\r5. Privilege Analytics\r6. Risk Assessment\r7. Monitoring Setup\r8. Operational Procedures\r9. Audit Procedures\r10. Compliance Validation\r11. Clean Resources\rArchitecture Overview graph TB\rA[Identity Provider] --\u0026gt; B[AWS IAM Identity Center]\rB --\u0026gt; C[Access Management]\rC --\u0026gt; D[Privilege Analytics]\rD --\u0026gt; E[Risk Assessment]\rE --\u0026gt; F[Access Certification]\rF --\u0026gt; G[Compliance Reporting]\rH[CloudTrail] --\u0026gt; I[Monitoring \u0026amp; Alerting]\rI --\u0026gt; J[Operational Dashboard]\rK[Automation Engine] --\u0026gt; L[Certification Workflows]\rL --\u0026gt; M[Remediation Actions] Key Benefits Enhanced Security: Strict access control and continuous monitoring Regulatory Compliance: Meet SOX, SOC2, ISO27001 requirements Operational Efficiency: Automated certification and remediation processes Risk Management: Proactive risk assessment and mitigation Prerequisites AWS Account with Administrator privileges Basic understanding of AWS IAM and Organizations Knowledge of compliance frameworks Python and AWS CLI experience Estimated Duration 4-6 hours (can be completed in multiple sessions)\n"
},
{
	"uri": "//localhost:1313/2-cac-buoc-chuan-bi/",
	"title": "2. Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Preparation Steps Prerequisites 1. AWS Account AWS Account with Administrator privileges Permission to create and manage AWS Organizations Permission to use IAM Identity Center 2. Required Knowledge Basic understanding of AWS IAM Experience with AWS Organizations Knowledge of compliance frameworks (SOX, SOC2, ISO27001) Understanding of Python and AWS CLI 3. Required Tools Configured AWS CLI Python 3.9 or higher Git to clone code examples Text editor or IDE Environment Setup 1. Configure AWS CLI # Install AWS CLI pip install awscli # Configure credentials aws configure 2. Check Permissions # Check current account aws sts get-caller-identity # Check Organizations permissions aws organizations describe-organization 3. Create S3 Buckets for Data # Create bucket for analytics data aws s3 mb s3://privilege-analytics-$(aws sts get-caller-identity --query Account --output text) # Create bucket for compliance reports aws s3 mb s3://compliance-reports-$(aws sts get-caller-identity --query Account --output text) Infrastructure Preparation 1. Enable AWS Services # Enable CloudTrail aws cloudtrail create-trail \\ --name IdentityGovernanceTrail \\ --s3-bucket-name privilege-analytics-$(aws sts get-caller-identity --query Account --output text) # Enable Config aws configservice put-configuration-recorder \\ --configuration-recorder name=IdentityGovernanceRecorder,roleARN=arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig # Enable GuardDuty aws guardduty create-detector --enable Expected Results After completing the preparation steps:\n✅ AWS Account properly configured ✅ Required AWS services enabled ✅ Base infrastructure deployed ✅ Permissions validated ✅ Workshop materials ready Next Steps Continue to 3. Access Governance Setup to start implementing the system.\n"
},
{
	"uri": "//localhost:1313/3-thiet-lap-access-governance/",
	"title": "3. Access Governance Setup",
	"tags": [],
	"description": "",
	"content": "3. Access Governance Setup Objective Set up centralized access management foundation with AWS IAM Identity Center and Organizations.\nArchitecture graph LR A[Management Account] --\u0026gt; B[AWS Organizations] B --\u0026gt; C[Member Accounts] C --\u0026gt; D[IAM Identity Center] D --\u0026gt; E[Permission Sets] E --\u0026gt; F[User Assignments] Step 1: AWS Organizations Setup 1.1 Create Organization aws organizations create-organization --feature-set ALL 1.2 Create Organizational Units { \u0026#34;Name\u0026#34;: \u0026#34;Security\u0026#34;, \u0026#34;ParentId\u0026#34;: \u0026#34;r-xxxx\u0026#34; } aws organizations create-organizational-unit \\ --parent-id r-xxxx \\ --name \u0026#34;Security\u0026#34; Step 2: Configure IAM Identity Center 2.1 Enable IAM Identity Center aws sso-admin create-instance \\ --name \u0026#34;IdentityGovernance\u0026#34; \\ --description \u0026#34;Identity Governance Instance\u0026#34; 2.2 Create Permission Sets { \u0026#34;Name\u0026#34;: \u0026#34;SecurityAuditor\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;Read-only access for security auditing\u0026#34;, \u0026#34;SessionDuration\u0026#34;: \u0026#34;PT8H\u0026#34;, \u0026#34;ManagedPolicies\u0026#34;: [ \u0026#34;arn:aws:iam::aws:policy/SecurityAudit\u0026#34;, \u0026#34;arn:aws:iam::aws:policy/ReadOnlyAccess\u0026#34; ] } Step 3: Identity Store Setup 3.1 Configure External Identity Provider import boto3 def setup_external_idp(): client = boto3.client(\u0026#39;identitystore\u0026#39;) # Configure SAML IdP response = client.create_external_id_provider( IdentityStoreId=\u0026#39;d-xxxxxxxxxx\u0026#39;, ExternalIdProvider={ \u0026#39;Type\u0026#39;: \u0026#39;SAML\u0026#39;, \u0026#39;Configuration\u0026#39;: { \u0026#39;MetadataDocument\u0026#39;: \u0026#39;metadata_content\u0026#39;, \u0026#39;LoginUrl\u0026#39;: \u0026#39;https://idp.company.com/login\u0026#39;, \u0026#39;LogoutUrl\u0026#39;: \u0026#39;https://idp.company.com/logout\u0026#39; } } ) return response Expected Results After completing this step, you will have:\n✅ AWS Organizations configured with OUs ✅ IAM Identity Center activated ✅ Permission Sets for governance roles ✅ Identity Store with groups and users ✅ Automation scripts for management Next Steps Continue to 4. Certification Automation to set up automated certification processes.\n"
},
{
	"uri": "//localhost:1313/4-tu-dong-hoa-certification/",
	"title": "4. Certification Automation",
	"tags": [],
	"description": "",
	"content": "4. Certification Automation Objective Automate access certification processes to ensure access rights are reviewed periodically and comply with security requirements.\nAutomation Architecture graph TB A[EventBridge Schedule] --\u0026gt; B[Lambda Trigger] B --\u0026gt; C[Access Review Generator] C --\u0026gt; D[Certification Workflow] D --\u0026gt; E[Manager Approval] E --\u0026gt; F[Remediation Actions] F --\u0026gt; G[Compliance Report] Step 1: EventBridge Scheduler Setup 1.1 Create Scheduled Rule { \u0026#34;Name\u0026#34;: \u0026#34;AccessCertificationSchedule\u0026#34;, \u0026#34;ScheduleExpression\u0026#34;: \u0026#34;rate(90 days)\u0026#34;, \u0026#34;Description\u0026#34;: \u0026#34;Quarterly access certification review\u0026#34;, \u0026#34;State\u0026#34;: \u0026#34;ENABLED\u0026#34;, \u0026#34;Targets\u0026#34;: [ { \u0026#34;Id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:lambda:region:account:function:AccessCertificationTrigger\u0026#34; } ] } Step 2: Access Review Generator 2.1 Lambda Function for Data Collection import boto3 import json from datetime import datetime, timedelta class AccessReviewGenerator: def __init__(self): self.sso_client = boto3.client(\u0026#39;sso-admin\u0026#39;) self.identity_client = boto3.client(\u0026#39;identitystore\u0026#39;) self.org_client = boto3.client(\u0026#39;organizations\u0026#39;) self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) def generate_access_review(self): \u0026#34;\u0026#34;\u0026#34;Generate comprehensive access review data\u0026#34;\u0026#34;\u0026#34; # Get all accounts accounts = self.get_all_accounts() # Get all permission sets permission_sets = self.get_all_permission_sets() # Get all assignments assignments = self.get_all_assignments(accounts, permission_sets) # Generate review data review_data = { \u0026#39;review_id\u0026#39;: f\u0026#34;review_{datetime.now().strftime(\u0026#39;%Y%m%d_%H%M%S\u0026#39;)}\u0026#34;, \u0026#39;generated_date\u0026#39;: datetime.now().isoformat(), \u0026#39;accounts\u0026#39;: accounts, \u0026#39;permission_sets\u0026#39;: permission_sets, \u0026#39;assignments\u0026#39;: assignments, \u0026#39;review_deadline\u0026#39;: (datetime.now() + timedelta(days=30)).isoformat() } # Store in S3 self.store_review_data(review_data) return review_data Step 3: Certification Workflow with Step Functions 3.1 State Machine Definition { \u0026#34;Comment\u0026#34;: \u0026#34;Access Certification Workflow\u0026#34;, \u0026#34;StartAt\u0026#34;: \u0026#34;GenerateReviewTasks\u0026#34;, \u0026#34;States\u0026#34;: { \u0026#34;GenerateReviewTasks\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:region:account:function:GenerateReviewTasks\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;SendNotifications\u0026#34; }, \u0026#34;SendNotifications\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Task\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:lambda:region:account:function:SendCertificationNotifications\u0026#34;, \u0026#34;Next\u0026#34;: \u0026#34;WaitForResponses\u0026#34; }, \u0026#34;WaitForResponses\u0026#34;: { \u0026#34;Type\u0026#34;: \u0026#34;Wait\u0026#34;, \u0026#34;Seconds\u0026#34;: 86400, \u0026#34;Next\u0026#34;: \u0026#34;CheckResponses\u0026#34; } } } Expected Results After completion:\n✅ Automated quarterly access reviews ✅ Email notifications to managers ✅ Web interface for approvals ✅ Automatic remediation for denied access ✅ Audit trail in DynamoDB Next Steps Continue to 5. Privilege Analytics to set up privilege analysis.\n"
},
{
	"uri": "//localhost:1313/5-phan-tich-dac-quyen/",
	"title": "5. Privilege Analytics",
	"tags": [],
	"description": "",
	"content": "5. Privilege Analytics Objective Analyze and monitor privilege usage to detect security risks, excessive permissions, and anomalous patterns.\nAnalytics Architecture graph TB A[CloudTrail Logs] --\u0026gt; B[S3 Data Lake] C[Config Data] --\u0026gt; B D[IAM Data] --\u0026gt; B B --\u0026gt; E[Athena Queries] E --\u0026gt; F[Analytics Engine] F --\u0026gt; G[Risk Scoring] G --\u0026gt; H[QuickSight Dashboard] F --\u0026gt; I[Anomaly Detection] I --\u0026gt; J[Alerts] Step 1: Data Collection Setup 1.1 CloudTrail Configuration AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Privilege Analytics Data Collection\u0026#39; Resources: PrivilegeAnalyticsTrail: Type: AWS::CloudTrail::Trail Properties: TrailName: PrivilegeAnalyticsTrail S3BucketName: !Ref AnalyticsDataBucket S3KeyPrefix: \u0026#39;cloudtrail-logs/\u0026#39; IncludeGlobalServiceEvents: true IsMultiRegionTrail: true EnableLogFileValidation: true Step 2: Athena Queries for Analytics 2.1 Create Athena Tables -- Create table for privilege analytics data CREATE EXTERNAL TABLE privilege_analytics ( collection_timestamp string, iam_data struct\u0026lt; users: array\u0026lt;struct\u0026lt; username: string, user_id: string, arn: string, create_date: string, risk_score: double \u0026gt;\u0026gt; \u0026gt; ) STORED AS JSON LOCATION \u0026#39;s3://privilege-analytics-REGION/analytics-data/\u0026#39; 2.2 Analytics Queries -- Query 1: High-risk users SELECT user.username, user.risk_score, cardinality(user.attached_policies) as policy_count, user.last_activity FROM privilege_analytics CROSS JOIN UNNEST(iam_data.users) AS t(user) WHERE user.risk_score \u0026gt; 7.0 ORDER BY user.risk_score DESC; Step 3: Risk Scoring Engine 3.1 Risk Calculation Lambda import boto3 import json import math from datetime import datetime, timedelta class RiskScoringEngine: def __init__(self): self.weights = { \u0026#39;privilege_level\u0026#39;: 0.3, \u0026#39;usage_frequency\u0026#39;: 0.2, \u0026#39;last_activity\u0026#39;: 0.2, \u0026#39;policy_violations\u0026#39;: 0.15, \u0026#39;external_access\u0026#39;: 0.15 } def calculate_user_risk_score(self, user_data, policies, groups, activity): \u0026#34;\u0026#34;\u0026#34;Calculate risk score for a user (0-10 scale)\u0026#34;\u0026#34;\u0026#34; scores = { \u0026#39;privilege_level\u0026#39;: self.score_privilege_level(policies, groups), \u0026#39;usage_frequency\u0026#39;: self.score_usage_frequency(activity), \u0026#39;last_activity\u0026#39;: self.score_last_activity(user_data.get(\u0026#39;PasswordLastUsed\u0026#39;)), \u0026#39;policy_violations\u0026#39;: self.score_policy_violations(policies), \u0026#39;external_access\u0026#39;: self.score_external_access(activity) } # Calculate weighted score total_score = sum(scores[factor] * self.weights[factor] for factor in scores) return { \u0026#39;total_score\u0026#39;: round(total_score, 2), \u0026#39;factor_scores\u0026#39;: scores, \u0026#39;risk_level\u0026#39;: self.get_risk_level(total_score) } Expected Results After completion:\n✅ Automated privilege data collection ✅ Risk scoring for users and roles ✅ Athena queries for analytics ✅ QuickSight dashboard for visualization ✅ Anomaly detection and alerting Next Steps Continue to 6. Risk Assessment to set up comprehensive risk assessment.\n"
},
{
	"uri": "//localhost:1313/6-danh-gia-rui-ro/",
	"title": "6. Risk Assessment",
	"tags": [],
	"description": "",
	"content": "6. Risk Assessment Objective Establish a comprehensive risk assessment system to detect, analyze, and prioritize security risks related to identity and access management.\nRisk Assessment Architecture graph TB A[Data Sources] --\u0026gt; B[Risk Engine] B --\u0026gt; C[Risk Scoring] C --\u0026gt; D[Risk Classification] D --\u0026gt; E[Risk Prioritization] E --\u0026gt; F[Remediation Recommendations] F --\u0026gt; G[Risk Dashboard] H[Threat Intelligence] --\u0026gt; B I[Compliance Rules] --\u0026gt; B J[Business Context] --\u0026gt; B Step 1: Risk Assessment Framework 1.1 Risk Categories Definition import boto3 import json from datetime import datetime, timedelta from enum import Enum class RiskCategory(Enum): PRIVILEGE_ESCALATION = \u0026#34;privilege_escalation\u0026#34; UNAUTHORIZED_ACCESS = \u0026#34;unauthorized_access\u0026#34; DATA_EXPOSURE = \u0026#34;data_exposure\u0026#34; COMPLIANCE_VIOLATION = \u0026#34;compliance_violation\u0026#34; OPERATIONAL_RISK = \u0026#34;operational_risk\u0026#34; class RiskSeverity(Enum): CRITICAL = 10 HIGH = 8 MEDIUM = 5 LOW = 3 MINIMAL = 1 class RiskAssessmentFramework: def __init__(self): self.risk_rules = self.load_risk_rules() self.threat_intelligence = self.load_threat_intelligence() self.compliance_requirements = self.load_compliance_requirements() Step 2: Threat Intelligence Integration 2.1 Threat Intelligence Collector import requests import boto3 from datetime import datetime class ThreatIntelligenceCollector: def __init__(self): self.threat_feeds = [ { \u0026#34;name\u0026#34;: \u0026#34;AWS Security Bulletins\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://aws.amazon.com/security/security-bulletins/\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;aws_security\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;MITRE ATT\u0026amp;CK\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://attack.mitre.org/\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;attack_patterns\u0026#34; } ] def collect_threat_intelligence(self): \u0026#34;\u0026#34;\u0026#34;Collect threat intelligence from various sources\u0026#34;\u0026#34;\u0026#34; intelligence_data = { \u0026#34;collection_timestamp\u0026#34;: datetime.now().isoformat(), \u0026#34;threat_indicators\u0026#34;: [], \u0026#34;attack_patterns\u0026#34;: [], \u0026#34;vulnerabilities\u0026#34;: [] } return intelligence_data Step 3: Risk Monitoring and Alerting 3.1 Real-time Risk Monitor import boto3 import json from datetime import datetime class RealTimeRiskMonitor: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.risk_table = self.dynamodb.Table(\u0026#39;RiskMonitoring\u0026#39;) def process_security_event(self, event): \u0026#34;\u0026#34;\u0026#34;Process incoming security events for risk assessment\u0026#34;\u0026#34;\u0026#34; event_type = event.get(\u0026#39;eventName\u0026#39;, \u0026#39;\u0026#39;) source_ip = event.get(\u0026#39;sourceIPAddress\u0026#39;, \u0026#39;\u0026#39;) user_identity = event.get(\u0026#39;userIdentity\u0026#39;, {}) # Analyze event for risk indicators risk_score = self.calculate_event_risk_score(event) if risk_score \u0026gt;= 7: # High risk threshold self.handle_high_risk_event(event, risk_score) return { \u0026#39;event_processed\u0026#39;: True, \u0026#39;risk_score\u0026#39;: risk_score, \u0026#39;action_taken\u0026#39;: risk_score \u0026gt;= 7 } Step 4: Risk Dashboard 4.1 CloudFormation for Dashboard Resources AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Risk Assessment Dashboard Resources\u0026#39; Resources: RiskDashboard: Type: AWS::CloudWatch::Dashboard Properties: DashboardName: IdentityGovernanceRiskDashboard DashboardBody: !Sub | { \u0026#34;widgets\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;metric\u0026#34;, \u0026#34;x\u0026#34;: 0, \u0026#34;y\u0026#34;: 0, \u0026#34;width\u0026#34;: 12, \u0026#34;height\u0026#34;: 6, \u0026#34;properties\u0026#34;: { \u0026#34;metrics\u0026#34;: [ [ \u0026#34;IdentityGovernance/Risk\u0026#34;, \u0026#34;RiskScore\u0026#34; ], [ \u0026#34;.\u0026#34;, \u0026#34;HighRiskEvents\u0026#34; ] ], \u0026#34;period\u0026#34;: 300, \u0026#34;stat\u0026#34;: \u0026#34;Average\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;${AWS::Region}\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Risk Metrics Overview\u0026#34; } } ] } Expected Results After completion:\n✅ Comprehensive risk assessment framework ✅ Real-time risk monitoring ✅ Threat intelligence integration ✅ Automated alerting system ✅ Risk dashboard and metrics ✅ Prioritized remediation plans Next Steps Continue to 7. Monitoring Setup to set up comprehensive monitoring.\n"
},
{
	"uri": "//localhost:1313/7-thiet-lap-giam-sat/",
	"title": "7. Monitoring Setup",
	"tags": [],
	"description": "",
	"content": "7. Monitoring Setup Objective Set up comprehensive monitoring system to continuously track identity governance activities, detect anomalies, and ensure compliance.\nMonitoring Architecture graph TB A[CloudTrail] --\u0026gt; B[CloudWatch Logs] C[Config] --\u0026gt; B D[GuardDuty] --\u0026gt; B B --\u0026gt; E[CloudWatch Metrics] E --\u0026gt; F[CloudWatch Alarms] F --\u0026gt; G[SNS Notifications] E --\u0026gt; H[Custom Dashboard] B --\u0026gt; I[Log Analytics] I --\u0026gt; J[Anomaly Detection] Step 1: CloudWatch Monitoring Setup 1.1 Custom Metrics and Alarms AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Identity Governance Monitoring Infrastructure\u0026#39; Parameters: NotificationEmail: Type: String Description: Email for monitoring alerts Default: security-team@company.com Resources: # SNS Topic for Alerts MonitoringAlertsTopic: Type: AWS::SNS::Topic Properties: TopicName: IdentityGovernanceAlerts DisplayName: Identity Governance Monitoring Alerts Subscription: - Protocol: email Endpoint: !Ref NotificationEmail # CloudWatch Log Group for Identity Events IdentityLogGroup: Type: AWS::Logs::LogGroup Properties: LogGroupName: /aws/identity-governance/events RetentionInDays: 365 1.2 Monitoring Lambda Function import boto3 import json import os from datetime import datetime, timedelta class IdentityGovernanceMonitor: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.logs_client = boto3.client(\u0026#39;logs\u0026#39;) self.iam_client = boto3.client(\u0026#39;iam\u0026#39;) self.sso_client = boto3.client(\u0026#39;sso-admin\u0026#39;) self.sns_client = boto3.client(\u0026#39;sns\u0026#39;) self.log_group = os.environ.get(\u0026#39;LOG_GROUP_NAME\u0026#39;, \u0026#39;/aws/identity-governance/events\u0026#39;) self.sns_topic = os.environ.get(\u0026#39;SNS_TOPIC_ARN\u0026#39;) def monitor_identity_events(self): \u0026#34;\u0026#34;\u0026#34;Monitor and analyze identity-related events\u0026#34;\u0026#34;\u0026#34; monitoring_results = { \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;metrics_collected\u0026#39;: [], \u0026#39;anomalies_detected\u0026#39;: [], \u0026#39;alerts_sent\u0026#39;: [] } return monitoring_results Step 2: Log Analytics Setup 2.1 CloudWatch Insights Queries -- Query 1: Failed login attempts by user fields @timestamp, sourceIPAddress, userIdentity.userName, errorMessage | filter eventName = \u0026#34;ConsoleLogin\u0026#34; and errorCode != \u0026#34;Success\u0026#34; | stats count() by userIdentity.userName | sort count desc -- Query 2: Privilege escalation events fields @timestamp, eventName, userIdentity.userName, sourceIPAddress | filter eventName in [\u0026#34;AttachUserPolicy\u0026#34;, \u0026#34;CreateRole\u0026#34;, \u0026#34;PutUserPolicy\u0026#34;] | sort @timestamp desc -- Query 3: Off-hours access patterns fields @timestamp, eventName, userIdentity.userName, sourceIPAddress | filter @timestamp like /T(0[0-5]|2[2-3])/ | stats count() by userIdentity.userName | sort count desc 2.2 Automated Log Analysis import boto3 import json from datetime import datetime, timedelta class LogAnalyzer: def __init__(self): self.logs_client = boto3.client(\u0026#39;logs\u0026#39;) self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) def analyze_security_logs(self): \u0026#34;\u0026#34;\u0026#34;Analyze security logs for patterns and anomalies\u0026#34;\u0026#34;\u0026#34; analysis_results = { \u0026#39;analysis_timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;patterns_detected\u0026#39;: [], \u0026#39;recommendations\u0026#39;: [] } return analysis_results Step 3: Deployment Script 3.1 Complete Monitoring Deployment #!/bin/bash echo \u0026#34;Deploying Identity Governance Monitoring...\u0026#34; # Deploy CloudFormation stack aws cloudformation deploy \\ --template-file monitoring-infrastructure.yaml \\ --stack-name identity-governance-monitoring \\ --parameter-overrides NotificationEmail=security-team@company.com \\ --capabilities CAPABILITY_IAM # Create Lambda functions echo \u0026#34;Creating monitoring Lambda functions...\u0026#34; # Package and deploy monitoring function zip -r monitoring-function.zip monitoring_lambda.py aws lambda create-function \\ --function-name IdentityGovernanceMonitor \\ --runtime python3.9 \\ --role arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/IdentityGovernanceMonitoringRole \\ --handler monitoring_lambda.lambda_handler \\ --zip-file fileb://monitoring-function.zip echo \u0026#34;Monitoring setup completed successfully!\u0026#34; Expected Results After completion:\n✅ Real-time monitoring of identity events ✅ Custom CloudWatch metrics and alarms ✅ Automated log analysis ✅ Anomaly detection and alerting ✅ Comprehensive monitoring dashboard ✅ Scheduled monitoring tasks Next Steps Continue to 8. Operational Procedures to set up operational processes.\n"
},
{
	"uri": "//localhost:1313/8-quy-trinh-van-hanh/",
	"title": "8. Operational Procedures",
	"tags": [],
	"description": "",
	"content": "8. Operational Procedures Objective Establish standardized operational procedures to manage identity governance effectively, ensuring consistency and compliance.\nProcess Overview graph TB A[Daily Operations] --\u0026gt; B[Weekly Reviews] B --\u0026gt; C[Monthly Assessments] C --\u0026gt; D[Quarterly Certifications] E[Incident Response] --\u0026gt; F[Investigation] F --\u0026gt; G[Remediation] G --\u0026gt; H[Documentation] I[Change Management] --\u0026gt; J[Approval Process] J --\u0026gt; K[Implementation] K --\u0026gt; L[Validation] Step 1: Daily Operations Procedures 1.1 Daily Monitoring Checklist import boto3 import json from datetime import datetime, timedelta class DailyOperations: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.operations_table = self.dynamodb.Table(\u0026#39;OperationsLog\u0026#39;) def execute_daily_checklist(self): \u0026#34;\u0026#34;\u0026#34;Execute daily operational checklist\u0026#34;\u0026#34;\u0026#34; checklist_results = { \u0026#39;date\u0026#39;: datetime.now().strftime(\u0026#39;%Y-%m-%d\u0026#39;), \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;checks_performed\u0026#39;: [], \u0026#39;issues_found\u0026#39;: [], \u0026#39;actions_taken\u0026#39;: [] } # Daily checks checks = [ (\u0026#39;Monitor Failed Logins\u0026#39;, self.check_failed_logins), (\u0026#39;Review High-Risk Alerts\u0026#39;, self.review_high_risk_alerts), (\u0026#39;Check System Health\u0026#39;, self.check_system_health), (\u0026#39;Validate Backup Status\u0026#39;, self.validate_backup_status), (\u0026#39;Review Pending Certifications\u0026#39;, self.review_pending_certifications) ] return checklist_results 1.2 Standard Operating Procedures (SOPs) # Identity Governance Standard Operating Procedures ## SOP-001: Daily Monitoring Procedures ### Purpose Ensure daily monitoring of identity governance systems and prompt response to issues. ### Scope All identity governance monitoring activities performed daily. ### Procedure 1. **Morning Health Check (9:00 AM)** - Review CloudWatch dashboard - Check for active alarms - Verify system availability 2. **Failed Login Review (10:00 AM)** - Analyze failed login patterns - Investigate suspicious activities - Document findings 3. **Risk Alert Review (2:00 PM)** - Review high-risk alerts - Prioritize investigations - Assign remediation tasks 4. **End-of-Day Summary (5:00 PM)** - Generate daily report - Update incident tracking - Plan next day activities ### Escalation Criteria - Critical alarms: Immediate escalation - High-risk events: 2-hour response time - System outages: Immediate escalation Step 2: Weekly Review Procedures 2.1 Weekly Assessment Script import boto3 import json from datetime import datetime, timedelta class WeeklyReview: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.athena_client = boto3.client(\u0026#39;athena\u0026#39;) def execute_weekly_review(self): \u0026#34;\u0026#34;\u0026#34;Execute weekly identity governance review\u0026#34;\u0026#34;\u0026#34; review_results = { \u0026#39;week_ending\u0026#39;: datetime.now().strftime(\u0026#39;%Y-%m-%d\u0026#39;), \u0026#39;timestamp\u0026#39;: datetime.now().isoformat(), \u0026#39;metrics_summary\u0026#39;: {}, \u0026#39;trend_analysis\u0026#39;: {}, \u0026#39;recommendations\u0026#39;: [] } # Collect weekly metrics review_results[\u0026#39;metrics_summary\u0026#39;] = self.collect_weekly_metrics() # Perform trend analysis review_results[\u0026#39;trend_analysis\u0026#39;] = self.analyze_trends() # Generate recommendations review_results[\u0026#39;recommendations\u0026#39;] = self.generate_weekly_recommendations() return review_results Step 3: Runbook Templates 3.1 Incident Response Runbook # Incident Response Runbook Template incident_response: incident_id: \u0026#34;INC-{YYYY-MM-DD}-{###}\u0026#34; classification: severity: \u0026#34;[P1|P2|P3|P4]\u0026#34; category: \u0026#34;[Security|Availability|Performance|Compliance]\u0026#34; impact: \u0026#34;[Critical|High|Medium|Low]\u0026#34; initial_response: - step: \u0026#34;Acknowledge incident\u0026#34; owner: \u0026#34;On-call engineer\u0026#34; sla: \u0026#34;15 minutes\u0026#34; - step: \u0026#34;Assess severity and impact\u0026#34; owner: \u0026#34;Incident commander\u0026#34; sla: \u0026#34;30 minutes\u0026#34; - step: \u0026#34;Activate response team\u0026#34; owner: \u0026#34;Incident commander\u0026#34; sla: \u0026#34;30 minutes\u0026#34; investigation: - step: \u0026#34;Collect initial evidence\u0026#34; actions: - \u0026#34;Export relevant CloudTrail logs\u0026#34; - \u0026#34;Capture system state\u0026#34; - \u0026#34;Document timeline\u0026#34; - step: \u0026#34;Analyze root cause\u0026#34; actions: - \u0026#34;Review logs and metrics\u0026#34; - \u0026#34;Interview stakeholders\u0026#34; - \u0026#34;Test hypotheses\u0026#34; Expected Results After completion:\n✅ Standardized daily operations procedures ✅ Weekly review and trend analysis ✅ Incident response runbooks ✅ Change management processes ✅ Operational documentation ✅ Automated operational tasks Next Steps Continue to 9. Audit Procedures to set up audit processes.\n"
},
{
	"uri": "//localhost:1313/9-quy-trinh-kiem-toan/",
	"title": "9. Audit Procedures",
	"tags": [],
	"description": "",
	"content": "9. Audit Procedures Objective Establish comprehensive audit procedures to ensure compliance with security, legal, and internal requirements in identity governance management.\nAudit Architecture graph TB A[Audit Planning] --\u0026gt; B[Evidence Collection] B --\u0026gt; C[Analysis \u0026amp; Testing] C --\u0026gt; D[Findings Documentation] D --\u0026gt; E[Remediation Tracking] E --\u0026gt; F[Audit Reporting] G[Continuous Monitoring] --\u0026gt; H[Automated Controls Testing] H --\u0026gt; I[Exception Reporting] I --\u0026gt; J[Management Dashboard] Step 1: Audit Framework Setup 1.1 Audit Control Matrix import boto3 import json from datetime import datetime, timedelta from enum import Enum class AuditFramework: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.athena_client = boto3.client(\u0026#39;athena\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.audit_table = self.dynamodb.Table(\u0026#39;AuditFindings\u0026#39;) # Define audit controls self.audit_controls = self.load_audit_controls() def load_audit_controls(self): \u0026#34;\u0026#34;\u0026#34;Load comprehensive audit control matrix\u0026#34;\u0026#34;\u0026#34; return { \u0026#34;access_management\u0026#34;: [ { \u0026#34;control_id\u0026#34;: \u0026#34;AM-001\u0026#34;, \u0026#34;control_name\u0026#34;: \u0026#34;User Access Provisioning\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Verify user access is properly authorized and documented\u0026#34;, \u0026#34;frequency\u0026#34;: \u0026#34;Quarterly\u0026#34;, \u0026#34;test_procedure\u0026#34;: self.test_user_provisioning, \u0026#34;compliance_frameworks\u0026#34;: [\u0026#34;SOX\u0026#34;, \u0026#34;SOC2\u0026#34;, \u0026#34;ISO27001\u0026#34;] } ] } Step 2: Continuous Audit Monitoring 2.1 Real-time Compliance Monitoring import boto3 import json from datetime import datetime class ContinuousAuditMonitor: def __init__(self): self.config_client = boto3.client(\u0026#39;config\u0026#39;) self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.sns = boto3.client(\u0026#39;sns\u0026#39;) def monitor_compliance_rules(self): \u0026#34;\u0026#34;\u0026#34;Monitor AWS Config compliance rules\u0026#34;\u0026#34;\u0026#34; monitoring_results = { \u0026#34;timestamp\u0026#34;: datetime.now().isoformat(), \u0026#34;compliance_summary\u0026#34;: {}, \u0026#34;non_compliant_resources\u0026#34;: [], \u0026#34;alerts_sent\u0026#34;: [] } # Get compliance summary response = self.config_client.get_compliance_summary_by_config_rule() for rule_summary in response[\u0026#39;ComplianceSummary\u0026#39;]: rule_name = rule_summary[\u0026#39;ConfigRuleName\u0026#39;] compliance_summary = rule_summary[\u0026#39;ComplianceSummary\u0026#39;] monitoring_results[\u0026#34;compliance_summary\u0026#34;][rule_name] = { \u0026#34;compliant\u0026#34;: compliance_summary.get(\u0026#39;CompliantResourceCount\u0026#39;, {}).get(\u0026#39;CappedCount\u0026#39;, 0), \u0026#34;non_compliant\u0026#34;: compliance_summary.get(\u0026#39;NonCompliantResourceCount\u0026#39;, {}).get(\u0026#39;CappedCount\u0026#39;, 0) } return monitoring_results Step 3: Audit Report Generation 3.1 Automated Report Generator import boto3 import json from datetime import datetime, timedelta from jinja2 import Template class AuditReportGenerator: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.ses_client = boto3.client(\u0026#39;ses\u0026#39;) def generate_monthly_audit_report(self): \u0026#34;\u0026#34;\u0026#34;Generate comprehensive monthly audit report\u0026#34;\u0026#34;\u0026#34; report_data = { \u0026#34;report_period\u0026#34;: datetime.now().strftime(\u0026#34;%Y-%m\u0026#34;), \u0026#34;generated_date\u0026#34;: datetime.now().isoformat(), \u0026#34;executive_summary\u0026#34;: {}, \u0026#34;control_effectiveness\u0026#34;: {}, \u0026#34;findings_summary\u0026#34;: {}, \u0026#34;trend_analysis\u0026#34;: {}, \u0026#34;recommendations\u0026#34;: [] } # Collect audit data from S3 audit_data = self.collect_monthly_audit_data() # Generate report sections report_data[\u0026#34;executive_summary\u0026#34;] = self.generate_executive_summary(audit_data) return report_data Expected Results After completion:\n✅ Comprehensive audit framework ✅ Automated control testing ✅ Continuous compliance monitoring ✅ Detailed audit reports ✅ Finding tracking and remediation ✅ Stakeholder communication Next Steps Continue to 10. Compliance Validation to complete the workshop.\n"
},
{
	"uri": "//localhost:1313/10-xac-thuc-tuan-thu/",
	"title": "10. Compliance Validation",
	"tags": [],
	"description": "",
	"content": "10. Compliance Validation Objective Validate and maintain compliance with security frameworks and legal regulations through identity governance, ensuring the organization meets SOX, SOC2, ISO27001, PCI-DSS, and other standards.\nCompliance Framework Mapping graph TB A[Identity Governance Controls] --\u0026gt; B[SOX Compliance] A --\u0026gt; C[SOC2 Type II] A --\u0026gt; D[ISO 27001] A --\u0026gt; E[PCI-DSS] A --\u0026gt; F[NIST Framework] B --\u0026gt; G[Audit Evidence] C --\u0026gt; G D --\u0026gt; G E --\u0026gt; G F --\u0026gt; G G --\u0026gt; H[Compliance Dashboard] G --\u0026gt; I[Regulatory Reports] Step 1: Compliance Framework Implementation 1.1 Multi-Framework Compliance Engine import boto3 import json from datetime import datetime, timedelta from enum import Enum class ComplianceFramework(Enum): SOX = \u0026#34;sox\u0026#34; SOC2 = \u0026#34;soc2\u0026#34; ISO27001 = \u0026#34;iso27001\u0026#34; PCI_DSS = \u0026#34;pci_dss\u0026#34; NIST = \u0026#34;nist\u0026#34; GDPR = \u0026#34;gdpr\u0026#34; class ComplianceValidationEngine: def __init__(self): self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) self.dynamodb = boto3.resource(\u0026#39;dynamodb\u0026#39;) self.compliance_table = self.dynamodb.Table(\u0026#39;ComplianceEvidence\u0026#39;) # Load compliance requirements self.compliance_requirements = self.load_compliance_requirements() def load_compliance_requirements(self): \u0026#34;\u0026#34;\u0026#34;Load compliance requirements for each framework\u0026#34;\u0026#34;\u0026#34; return { ComplianceFramework.SOX: { \u0026#34;name\u0026#34;: \u0026#34;Sarbanes-Oxley Act\u0026#34;, \u0026#34;requirements\u0026#34;: [ { \u0026#34;requirement_id\u0026#34;: \u0026#34;SOX-302\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Corporate Responsibility for Financial Reports\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;Ensure proper access controls for financial systems\u0026#34;, \u0026#34;controls\u0026#34;: [\u0026#34;access_segregation\u0026#34;, \u0026#34;approval_workflows\u0026#34;, \u0026#34;audit_trails\u0026#34;] } ] } } Step 2: Compliance Dashboard 2.1 Real-time Compliance Monitoring import boto3 import json from datetime import datetime, timedelta class ComplianceDashboard: def __init__(self): self.cloudwatch = boto3.client(\u0026#39;cloudwatch\u0026#39;) self.s3_client = boto3.client(\u0026#39;s3\u0026#39;) def generate_compliance_metrics(self): \u0026#34;\u0026#34;\u0026#34;Generate real-time compliance metrics\u0026#34;\u0026#34;\u0026#34; metrics = { \u0026#34;timestamp\u0026#34;: datetime.now().isoformat(), \u0026#34;overall_compliance_score\u0026#34;: 0, \u0026#34;framework_scores\u0026#34;: {}, \u0026#34;trending_metrics\u0026#34;: {}, \u0026#34;risk_indicators\u0026#34;: {} } # Calculate compliance scores for each framework frameworks = [\u0026#39;sox\u0026#39;, \u0026#39;soc2\u0026#39;, \u0026#39;iso27001\u0026#39;, \u0026#39;pci_dss\u0026#39;] for framework in frameworks: score = self.calculate_framework_score(framework) metrics[\u0026#34;framework_scores\u0026#34;][framework] = score # Calculate overall score metrics[\u0026#34;overall_compliance_score\u0026#34;] = sum(metrics[\u0026#34;framework_scores\u0026#34;].values()) / len(frameworks) return metrics Step 3: Regulatory Reporting 3.1 Automated Compliance Reports # CloudFormation template for compliance reporting AWSTemplateFormatVersion: \u0026#39;2010-09-09\u0026#39; Description: \u0026#39;Compliance Reporting Infrastructure\u0026#39; Resources: ComplianceReportingBucket: Type: AWS::S3::Bucket Properties: BucketName: !Sub \u0026#39;compliance-reports-${AWS::AccountId}\u0026#39; VersioningConfiguration: Status: Enabled LifecycleConfiguration: Rules: - Id: RetainReports Status: Enabled ExpirationInDays: 2555 # 7 years retention QuarterlyComplianceReport: Type: AWS::Events::Rule Properties: Name: QuarterlyComplianceReporting Description: Generate quarterly compliance reports ScheduleExpression: \u0026#34;cron(0 9 1 */3 *)\u0026#34; # First day of quarter at 9 AM State: ENABLED Step 4: Deployment and Validation 4.1 Complete Deployment Script #!/bin/bash echo \u0026#34;Deploying Identity Governance Compliance Validation...\u0026#34; # Deploy compliance infrastructure aws cloudformation deploy \\ --template-file compliance-infrastructure.yaml \\ --stack-name identity-governance-compliance \\ --capabilities CAPABILITY_IAM # Create DynamoDB table for compliance evidence aws dynamodb create-table \\ --table-name ComplianceEvidence \\ --attribute-definitions \\ AttributeName=evidence_id,AttributeType=S \\ AttributeName=framework,AttributeType=S \\ --key-schema \\ AttributeName=evidence_id,KeyType=HASH \\ --billing-mode PAY_PER_REQUEST echo \u0026#34;Compliance validation deployment completed successfully!\u0026#34; Expected Results After completing this workshop, you will have:\n✅ Comprehensive Identity Governance System Centralized access management with AWS IAM Identity Center Automated access certification workflows Real-time privilege analytics and risk assessment Continuous monitoring and alerting ✅ Compliance Framework Implementation SOX, SOC2, ISO27001, PCI-DSS compliance validation Automated evidence collection Regulatory reporting capabilities Audit trail maintenance ✅ Operational Excellence Standardized operational procedures Incident response capabilities Change management processes Performance monitoring ✅ Audit and Governance Comprehensive audit framework Automated control testing Finding tracking and remediation Management reporting Best Practices Summary Implement Least Privilege: Grant only minimum necessary permissions Automate Where Possible: Automate repetitive processes Monitor Continuously: Continuously monitor activities Document Everything: Maintain complete documentation for audit trail Regular Reviews: Conduct periodic reviews Stay Updated: Keep up with compliance changes Reference Documentation AWS IAM Identity Center Documentation AWS Organizations Best Practices SOX Compliance Guidelines SOC 2 Framework ISO 27001 Standard Support If you encounter issues during deployment, please:\nCheck CloudWatch Logs for debugging Review IAM permissions Refer to AWS documentation Contact support team if needed Workshop completed successfully! 🎉\nNext Steps Continue to 11. Clean Resources to clean up workshop resources.\n"
},
{
	"uri": "//localhost:1313/11-clean-resources/",
	"title": "11. Clean Resources",
	"tags": [],
	"description": "",
	"content": "11. Clean Resources Overview This section provides comprehensive instructions for cleaning up all AWS resources created during the Identity Governance workshop to avoid unnecessary charges.\nImportant Notes ⚠️ Warning: Following these cleanup steps will permanently delete all resources and data created during the workshop. Make sure you have backed up any important configurations or data before proceeding.\nCleanup Order Resources should be cleaned up in the following order to avoid dependency conflicts:\nLambda Functions and EventBridge Rules Step Functions State Machines DynamoDB Tables S3 Buckets and Objects CloudWatch Resources IAM Roles and Policies CloudFormation Stacks AWS Organizations (if created) IAM Identity Center (if no longer needed) Step 1: Lambda Functions and EventBridge Delete Lambda Functions Open AWS Lambda console Filter functions by workshop names: IdentityGovernance AccessCertification ComplianceValidation Select workshop functions Click Actions → Delete Confirm deletion by typing delete Delete EventBridge Rules Open Amazon EventBridge console Go to Rules Select workshop rules: AccessCertificationSchedule ComplianceValidationSchedule Click Delete for each rule Step 2: Step Functions Open AWS Step Functions console Select workshop state machines: AccessCertificationWorkflow ComplianceValidationWorkflow Click Delete Confirm deletion Step 3: DynamoDB Tables Open Amazon DynamoDB console Go to Tables Select workshop tables: OperationalProcedures ComplianceEvidence AuditFindings Click Delete for each table Type delete to confirm Step 4: S3 Buckets Empty S3 Buckets Open Amazon S3 console Identify workshop buckets: privilege-analytics-* compliance-reports-* Select bucket and click Empty Type permanently delete to confirm Delete S3 Buckets After emptying, select bucket Click Delete Type bucket name to confirm Step 5: CloudWatch Resources Delete CloudWatch Dashboards Open Amazon CloudWatch console Go to Dashboards Select workshop dashboards: IdentityGovernanceRiskDashboard DailyOperationsDashboard Click Delete for each dashboard Delete CloudWatch Alarms Go to Alarms Select workshop alarms Click Actions → Delete Delete Log Groups Go to Log groups Select workshop log groups Click Actions → Delete log group Step 6: SNS Topics Open Amazon SNS console Go to Topics Select workshop topics: IdentityGovernanceAlerts ComplianceAlerts Click Delete for each topic Confirm deletion Step 7: IAM Resources Delete IAM Roles # List IAM roles created for workshop aws iam list-roles --query \u0026#39;Roles[?contains(RoleName, `IdentityGovernance`) || contains(RoleName, `Compliance`) || contains(RoleName, `Certification`)].RoleName\u0026#39; --output table # Detach policies and delete roles aws iam detach-role-policy --role-name IdentityGovernanceLambdaRole --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole aws iam delete-role --role-name IdentityGovernanceLambdaRole aws iam delete-role --role-name ComplianceValidationRole aws iam delete-role --role-name CertificationWorkflowRole Delete Custom IAM Policies # List custom policies aws iam list-policies --scope Local --query \u0026#39;Policies[?contains(PolicyName, `IdentityGovernance`) || contains(PolicyName, `Compliance`)].PolicyName\u0026#39; --output table # Delete custom policies aws iam delete-policy --policy-arn arn:aws:iam::ACCOUNT:policy/IdentityGovernancePolicy aws iam delete-policy --policy-arn arn:aws:iam::ACCOUNT:policy/ComplianceValidationPolicy Step 8: CloudFormation Stacks # List CloudFormation stacks aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query \u0026#39;StackSummaries[?contains(StackName, `identity-governance`) || contains(StackName, `compliance`)].StackName\u0026#39; --output table # Delete CloudFormation stacks aws cloudformation delete-stack --stack-name identity-governance-base aws cloudformation delete-stack --stack-name identity-governance-monitoring aws cloudformation delete-stack --stack-name identity-governance-compliance Step 9: AWS Config (if enabled for workshop) # Stop configuration recorder aws configservice stop-configuration-recorder --configuration-recorder-name IdentityGovernanceRecorder # Delete configuration recorder aws configservice delete-configuration-recorder --configuration-recorder-name IdentityGovernanceRecorder # Delete delivery channel aws configservice delete-delivery-channel --delivery-channel-name IdentityGovernanceDeliveryChannel Step 10: CloudTrail (if created for workshop) # List CloudTrail trails aws cloudtrail describe-trails --query \u0026#39;trailList[?contains(Name, `IdentityGovernance`)].Name\u0026#39; --output table # Delete CloudTrail aws cloudtrail delete-trail --name IdentityGovernanceTrail Automated Cleanup Script For convenience, here\u0026rsquo;s a comprehensive cleanup script:\n#!/bin/bash echo \u0026#34;Starting Identity Governance Workshop Cleanup...\u0026#34; # Get account ID ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text) REGION=$(aws configure get region) echo \u0026#34;Account ID: $ACCOUNT_ID\u0026#34; echo \u0026#34;Region: $REGION\u0026#34; # Function to check if resource exists before deletion check_and_delete() { local resource_type=$1 local resource_name=$2 local delete_command=$3 echo \u0026#34;Checking $resource_type: $resource_name\u0026#34; if eval \u0026#34;$delete_command\u0026#34; 2\u0026gt;/dev/null; then echo \u0026#34;✅ Deleted $resource_type: $resource_name\u0026#34; else echo \u0026#34;⚠️ $resource_type not found or already deleted: $resource_name\u0026#34; fi } # Delete Lambda functions echo \u0026#34;🧹 Cleaning up Lambda functions...\u0026#34; LAMBDA_FUNCTIONS=(\u0026#34;IdentityGovernanceMonitor\u0026#34; \u0026#34;AccessReviewGenerator\u0026#34; \u0026#34;ComplianceValidationEngine\u0026#34; \u0026#34;RiskAssessmentEngine\u0026#34;) for func in \u0026#34;${LAMBDA_FUNCTIONS[@]}\u0026#34;; do check_and_delete \u0026#34;Lambda function\u0026#34; \u0026#34;$func\u0026#34; \u0026#34;aws lambda delete-function --function-name $func\u0026#34; done # Delete DynamoDB tables echo \u0026#34;🧹 Cleaning up DynamoDB tables...\u0026#34; DYNAMODB_TABLES=(\u0026#34;CertificationTasks\u0026#34; \u0026#34;OperationsLog\u0026#34; \u0026#34;ComplianceEvidence\u0026#34; \u0026#34;RiskMonitoring\u0026#34; \u0026#34;AuditFindings\u0026#34;) for table in \u0026#34;${DYNAMODB_TABLES[@]}\u0026#34;; do check_and_delete \u0026#34;DynamoDB table\u0026#34; \u0026#34;$table\u0026#34; \u0026#34;aws dynamodb delete-table --table-name $table\u0026#34; done # Delete S3 buckets echo \u0026#34;🧹 Cleaning up S3 buckets...\u0026#34; S3_BUCKETS=(\u0026#34;privilege-analytics-${ACCOUNT_ID}\u0026#34; \u0026#34;compliance-reports-${ACCOUNT_ID}\u0026#34;) for bucket in \u0026#34;${S3_BUCKETS[@]}\u0026#34;; do echo \u0026#34;Emptying S3 bucket: $bucket\u0026#34; aws s3 rm s3://$bucket --recursive 2\u0026gt;/dev/null || echo \u0026#34;Bucket $bucket not found\u0026#34; check_and_delete \u0026#34;S3 bucket\u0026#34; \u0026#34;$bucket\u0026#34; \u0026#34;aws s3 rb s3://$bucket\u0026#34; done # Delete CloudFormation stacks echo \u0026#34;🧹 Cleaning up CloudFormation stacks...\u0026#34; CF_STACKS=(\u0026#34;identity-governance-base\u0026#34; \u0026#34;identity-governance-monitoring\u0026#34; \u0026#34;identity-governance-compliance\u0026#34;) for stack in \u0026#34;${CF_STACKS[@]}\u0026#34;; do check_and_delete \u0026#34;CloudFormation stack\u0026#34; \u0026#34;$stack\u0026#34; \u0026#34;aws cloudformation delete-stack --stack-name $stack\u0026#34; done echo \u0026#34;🎉 Cleanup completed!\u0026#34; echo \u0026#34;Note: Some resources may take a few minutes to be fully deleted.\u0026#34; echo \u0026#34;Please check the AWS Console to verify all resources have been removed.\u0026#34; Step 7: Final Verification Verify Resource Deletion Check AWS Cost Explorer for any remaining charges Use AWS Resource Groups to find tagged resources Search for tag: Project=IdentityGovernance Final Service Checks AWS Config: Disable configuration recorder if not needed AWS Security Hub: Disable if not used elsewhere Amazon GuardDuty: Disable if not needed AWS Audit Manager: Disable data collection Cleanup Verification Report Generate cleanup summary report Document any resources that couldn\u0026rsquo;t be deleted Note any ongoing charges Cost Verification After cleanup, monitor your AWS billing dashboard to ensure no unexpected charges from remaining resources.\nTroubleshooting Common Issues Dependency Errors: Some resources may have dependencies. Delete dependent resources first. Permission Errors: Ensure you have sufficient permissions to delete all resources. Region Issues: Make sure you\u0026rsquo;re deleting resources in the correct region. Manual Cleanup If automated cleanup fails, manually delete resources through the AWS Console:\nGo to each service console Search for resources with names containing \u0026ldquo;IdentityGovernance\u0026rdquo;, \u0026ldquo;Compliance\u0026rdquo;, or \u0026ldquo;Certification\u0026rdquo; Delete resources individually Final Notes This cleanup removes ALL workshop resources Double-check before running cleanup commands Some resources may have a brief delay before deletion Monitor your AWS bill to ensure no charges continue Expected Results After completing the cleanup:\n✅ All workshop Lambda functions deleted ✅ EventBridge rules removed ✅ Step Functions state machines deleted ✅ DynamoDB tables removed ✅ S3 buckets emptied and deleted ✅ CloudWatch resources cleaned up ✅ SNS topics deleted ✅ No ongoing charges from workshop resources ✅ Account returned to pre-workshop state Workshop cleanup completed successfully! 🎉\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]